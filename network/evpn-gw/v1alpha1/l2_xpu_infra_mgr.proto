// SPDX-License-Identifier: Apache-2.0
// Copyright (C) 2023 Nordix Foundation.

syntax = "proto3";

package opi_api.network.evpn_gw.v1alpha1;

option go_package = "github.com/opiproject/opi-api/network/evpn-gw/v1alpha1/gen/go";
option java_package = "opi_api.network.evpn_gw.v1alpha1";
option java_multiple_files = true;
option java_outer_classname = "L2XpuInfraMgrProto";

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/protobuf/empty.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";

// Management of LogicalBridge Resources
service LogicalBridgeService {
    // Create a Logical Bridge
    rpc CreateLogicalBridge(CreateLogicalBridgeRequest) returns (LogicalBridge){
        option (google.api.http) = {
          post: "/v1/logicalBridges"
          body: "logical_bridge"
        };
        option (google.api.method_signature) = "logical_bridge,logical_bridge_id";
    }
    // List Logical Bridges
    rpc ListLogicalBridges(ListLogicalBridgesRequest) returns (ListLogicalBridgesResponse){
        option (google.api.http) = {
          get: "/v1/logicalBridges"
        };
    }
    // Retrieve a Logical Bridge
    rpc GetLogicalBridge(GetLogicalBridgeRequest) returns (LogicalBridge){
        option (google.api.http) = {
          get: "/v1/{name=logicalBridges/*}"
        };
        option (google.api.method_signature) = "name";
    }
    // Delete a Logical Bridge
    rpc DeleteLogicalBridge(DeleteLogicalBridgeRequest) returns (google.protobuf.Empty){
        option (google.api.http) = {
          delete: "/v1/{name=logicalBridges/*}"
        };
        option (google.api.method_signature) = "name";
    }
}

// Management of BridgePort resources
service BridgePortService {
    // Create a Bridge Port
    rpc CreateBridgePort(CreateBridgePortRequest) returns (BridgePort){
        option (google.api.http) = {
          post: "/v1/bridgePorts"
          body: "bridge_port"
        };
        option (google.api.method_signature) = "bridge_port,bridge_port_id";
    }
    // List Bridge Ports
    rpc ListBridgePorts(ListBridgePortsRequest) returns (ListBridgePortsResponse){
        option (google.api.http) = {
          get: "/v1/bridgePorts"
        };
    }
    // Retrieve a Bridge Port
    rpc GetBridgePort(GetBridgePortRequest) returns (BridgePort){
        option (google.api.http) = {
          get: "/v1/{name=bridgePorts/*}"
        };
        option (google.api.method_signature) = "name";
    }
    // Delete a Bridge Port
    rpc DeleteBridgePort(DeleteBridgePortRequest) returns (google.protobuf.Empty){
        option (google.api.http) = {
          delete: "/v1/{name=bridgePorts/*}"
        };
        option (google.api.method_signature) = "name";
    }
}

// Logical Bridge network configuration and status
message LogicalBridge {
    // The resource name of the Logical Bridge.
    // Format: logicalBridges/{logical_bridge}
    string name                = 1;

    // Logical Bridge network configuration
    LogicalBridgeSpec spec     = 2 [(google.api.field_behavior) = REQUIRED];
    // Logical Bridge network status
    LogicalBridgeStatus status = 3;
}

// Logical Bridge network configuration
message LogicalBridgeSpec {
    // the VLAN of the L2 domain
    uint32 vlan_id         = 1 [(google.api.field_behavior) = REQUIRED];
    //VXLAN VNI for the L2 EVPN. Also used as EVPN route target
    uint32 vni             = 2;
}

// operational status of a Logical Bridge
message LogicalBridgeStatus {
    // operational status of a Logical Bridge
    LBOperStatus oper_status = 1;
}

enum LBOperStatus {
    // unknown
    LB_OPER_STATUS_UNSPECIFIED = 0;
    // Logical Bridge is up
    LB_OPER_STATUS_UP          = 1;
    // Logical Bridge is down
    LB_OPER_STATUS_DOWN        = 2;
}

// CreateLogicalBridgeRequest structure
message CreateLogicalBridgeRequest {
    // The ID to use for the logical bridge, which will become the final component of
    // the logical bridge's resource name.
    //
    // This value should be 4-63 characters, and valid characters
    // are /[a-z][0-9]-/.
    string logical_bridge_id     = 1 [(google.api.field_behavior) = REQUIRED];

    // The logical bridge to create
    LogicalBridge logical_bridge = 2 [(google.api.field_behavior) = REQUIRED];
}

// ListLogicalBridgesRequest structure
message ListLogicalBridgesRequest {
    // page size of list request
    int32 page_size   = 1;
    // page token of list request
    string page_token = 2;
}

// ListLogicalBridgesResponse structure
message ListLogicalBridgesResponse {
    // List of all the logical bridges
    repeated LogicalBridge logical_bridges = 1;
    // Next page token of list response
    string next_page_token                 = 2;
}

// GetLogicalBridgeRequest structure
message GetLogicalBridgeRequest {
    // The name of the logical bridge to retrieve
    // Format: logicalBridges/{logical_bridge}
    string name = 1 [
      (google.api.field_behavior) = REQUIRED,
      (google.api.resource_reference).type = "opi_api.network.v1alpha1/LogicalBridge"
    ];
}

message DeleteLogicalBridgeRequest {
    // The name of the logical bridge to retrieve
    // Format: logicalBridges/{logical_bridge}
    string name = 1 [
      (google.api.field_behavior) = REQUIRED,
      (google.api.resource_reference).type = "opi_api.network.v1alpha1/LogicalBridge"
    ];
}

// Bridge Port network configuration and status
message BridgePort {
    // The resource name of the Bridge Port.
    // Format: bridge_ports/{bridge_port}
    string name             = 1;

    // Bridge Port network configuration
    BridgePortSpec spec     = 2;
    // Bridge Port network status
    BridgePortStatus status = 3;
}

// Bridge Port network configuration
message BridgePortSpec {
    // Bridge Port's MAC address.
    bytes mac_address        = 1 [(google.api.field_behavior) = REQUIRED];
    // Type of Bridge Port
    BridgePortType ptype     = 2 [(google.api.field_behavior) = REQUIRED];
    // Configured vlan ids on the bridge port
    repeated uint32 vlan_ids = 3;
}

// operational status of a Bridge Port
message BridgePortStatus {
    // operational status of a Bridge Port
    BPOperStatus oper_status = 1;
}

enum BPOperStatus {
    // unknown
    BP_OPER_STATUS_UNSPECIFIED = 0;
    // Bridge Port is up
    BP_OPER_STATUS_UP          = 1;
    // Bridge Port is down
    BP_OPER_STATUS_DOWN        = 2;
}

enum BridgePortType {
    // "unknown" bridge port type
    UNKNOWN = 0;
    // "access" bridge port type 
    ACCESS  = 1;
    // "trunk" bridge port type
    TRUNK   = 2;
}

// CreateBridgePortRequest structure
message CreateBridgePortRequest {
    // The ID to use for the bridge port, which will become the final component of
    // the bridge port's resource name.
    //
    // This value should be 4-63 characters, and valid characters
    // are /[a-z][0-9]-/.
    string bridge_port_id     = 1 [(google.api.field_behavior) = REQUIRED];
    // The bridge port to create
    BridgePort bridge_port    = 2 [(google.api.field_behavior) = REQUIRED];
}

// ListBridgePortsRequest structure
message ListBridgePortsRequest {
    // page size of list request
    int32 page_size   = 1;
    // page token of list request
    string page_token = 2;
}

// ListBridgePortsResponse structure
message ListBridgePortsResponse {
    // List of all the bridge ports
    repeated BridgePort bridge_ports = 1;
    // Next page token of list response
    string next_page_token           = 2;
}

// GetBridgePortRequest structure
message GetBridgePortRequest {
    // The name of the bridge port to retrieve
    // Format: bridgePorts/{bridge_port}
    string name = 1 [
      (google.api.field_behavior) = REQUIRED,
      (google.api.resource_reference).type = "opi_api.network.v1alpha1/BridgePort"
    ];
}

// DeleteBridgePortRequest structure
message DeleteBridgePortRequest {
    // The name of the bridge port to retrieve
    // Format: bridgePorts/{bridge_port}
    string name = 1 [
      (google.api.field_behavior) = REQUIRED,
      (google.api.resource_reference).type = "opi_api.network.v1alpha1/BridgePort"
    ];
}