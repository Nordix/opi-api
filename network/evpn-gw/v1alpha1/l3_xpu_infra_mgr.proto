// SPDX-License-Identifier: Apache-2.0
// Copyright (C) 2023 Nordix Foundation.

syntax = "proto3";

package opi_api.network.evpn_gw.v1alpha1;

option go_package = "github.com/opiproject/opi-api/network/evpn-gw/v1alpha1/gen/go";
option java_package = "opi_api.network.evpn_gw.v1alpha1";
option java_multiple_files = true;
option java_outer_classname = "L3XpuInfraMgrProto";

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/protobuf/empty.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";

// Management of Vrf Resources
service VrfService {
    // Create a Vrf
    rpc CreateVrf(CreateVrfRequest) returns (Vrf){
        option (google.api.http) = {
          post: "/v1/vrfs"
          body: "vrf"
        };
        option (google.api.method_signature) = "vrf,vrf_id";
    }
    // List Vrfs
    rpc ListVrfs(ListVrfsRequest) returns (ListVrfsResponse){
        option (google.api.http) = {
          get: "/v1/vrfs"
        };
    }
    // Retrieve a Vrf
    rpc GetVrf(GetVrfRequest) returns (Vrf){
        option (google.api.http) = {
          get: "/v1/{name=vrfs/*}"
        };
        option (google.api.method_signature) = "name";
    }
    // Delete a Vrf
    rpc DeleteVrf(DeleteVrfRequest) returns (google.protobuf.Empty){
        option (google.api.http) = {
          delete: "/v1/{name=vrfs/*}"
        };
        option (google.api.method_signature) = "name";
    }
}

// Management of switch virtual interfaces (SVIs) binding LogicalBridges to VRFs.
service SviService {
    // Create a Svi
    rpc CreateSvi(CreateSviRequest) returns (Svi){
        option (google.api.http) = {
          post: "/v1/svis"
          body: "svi"
        };
        option (google.api.method_signature) = "svi,svi_id";
    }
    // List Svis
    rpc ListSvis(ListSvisRequest) returns (ListSvisResponse){
        option (google.api.http) = {
          get: "/v1/svis"
        };
    }
    // Retrieve a Svi
    rpc GetSvi(GetSviRequest) returns (Svi){
        option (google.api.http) = {
          get: ""/v1/{name=svis/*}""
        };
        option (google.api.method_signature) = "name";
    }
    // Delete a Svi
    rpc DeleteSvi(DeleteSviRequest) returns (google.protobuf.Empty){
        option (google.api.http) = {
          delete: "/v1/{name=svis/*}"
        };
        option (google.api.method_signature) = "name";
    }
}


// Vrf level network configuration
message Vrf {
    // The resource name of the Vrf.
    // Format: vrfs/{vrf}
    string name      = 1;

    // Vrf's network configuration
    VrfSpec spec     = 2 [(google.api.field_behavior) = REQUIRED];
    // Vrf's network status
    VrfStatus status = 3;
}

// Vrf network configuration
message VrfSpec {
    // VXLAN VNI for L3 EVPN. Also used as EVPN route target
    uint32 vni                                                    = 1;
    // IPv4 or IPv6 loopback address prefix. Also serves as basis for RD in FRR
    network.opinetcommon.v1alpha1.IPPrefix loopback_ip_prefix     = 2 [(google.api.field_behavior) = REQUIRED];
    // IPv4 or IPv6 IP address prefix for the VXLAN TEP
    network.opinetcommon.v1alpha1.IPPrefix vtep_ip_prefix         = 3;
}

message VrfStatus {
    // Routing table number
    uint32 routing_table       = 1;
    // Local AS configured for VRF
    uint32 local_as            = 2;
    // Route distinguisher
    string rd                  = 3;
    // Router MAC address of the Vrf
    bytes rmac                 = 4;
    // List of import RTs
    repeated string import_rts = 5;
    // List of export RTs
    repeated string export_rts = 6;
    // List of connected VLANs to Vrf
    repeated uint32 vlan_ids   = 7;
    // operational status of a Vrf
    VRFOperStatus oper_status  = 8;
}

enum VRFOperStatus {
    // unknown
    VRF_OPER_STATUS_UNSPECIFIED = 0;
    // Vrf is up
    VRF_OPER_STATUS_UP          = 1;
    // Vrf is down
    VRF_OPER_STATUS_DOWN        = 2;
}

// CreateVrfRequest structure
message CreateVrfRequest {
    // The ID to use for the vrf, which will become the final component of
    // the vrf's resource name.
    //
    // This value should be 4-63 characters, and valid characters
    // are /[a-z][0-9]-/.
    string vrf_id = 1 [(google.api.field_behavior) = REQUIRED];

    // The vrf to create
    Vrf vrf       = 2 [(google.api.field_behavior) = REQUIRED];
}

// ListVrfsRequest structure
message ListVrfsRequest {
    // page size of list request
    int32 page_size   = 1;
    // page token of list request
    string page_token = 2;
}

// ListVrfsResponse structure
message ListVrfsResponse {
    // List of all the vrfs
    repeated Vrf vrfs      = 1;
    // Next page token of list response
    string next_page_token = 2;
}

// GetVrfRequest structure
message GetVrfRequest {
    // The name of the vrf to retrieve
    // Format: vrfs/{vrf}
    string name = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference).type = "opi_api.network.evpn_gw.v1alpha1/Vrf"
    ];
}

// DeleteVrfRequest structure
message DeleteVrfRequest {
    // The name of the vrf to delete
    // Format: vrfs/{vrf}
    string name = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference).type = "opi_api.network.evpn_gw.v1alpha1/Vrf"
    ];
}

// Svi network configuration
message Svi {
    // The resource name of the Svi.
    // Format: svis/{svi}
    string name      = 1;

    // Svi's network configuration
    SviSpec spec     = 2 [(google.api.field_behavior) = REQUIRED];
    // Svi's network status
    SviStatus status = 3;
}

message SviSpec {
    //Vrf name
    // Format is `vrfs/{vrf}`
    string vrf                                                   = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference) = {type: "opi_api.network.evpn_gw.v1alpha1/Vrf"}
    ];
    // Logical Bridge name
    // Format is `logicalBridges/{logical_bridge}`
    string logical_bridge                                        = 2 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference) = {type: "opi_api.network.evpn_gw.v1alpha1/LogicalBridge"}
    ];
    // Svi's MAC address.
    bytes mac_address                                            = 3 [(google.api.field_behavior) = REQUIRED];
    repeated network.opinetcommon.v1alpha1.IPPrefix gw_ip_prefix = 4 [(google.api.field_behavior) = REQUIRED];
    // Set to true to enable BGP peering with Vrf on Svi
    bool enable_bgp                                              = 5;
    // Conditional: The remote AS used by BGP speakers on LB (1-65535)
    uint32 remote_as                                             = 6;
}

message SviStatus {
    // operational status of a Svi
    SVIOperStatus oper_status  = 1;
}

enum SVIOperStatus {
    // unknown
    SVI_OPER_STATUS_UNSPECIFIED = 0;
    // Svi is up
    SVI_OPER_STATUS_UP          = 1;
    // Svi is down
    SVI_OPER_STATUS_DOWN        = 2;
}

// CreateSviRequest structure
message CreateSviRequest {
    // The ID to use for the svi, which will become the final component of
    // the svi's resource name.
    //
    // This value should be 4-63 characters, and valid characters
    // are /[a-z][0-9]-/.
    string svi_id = 1 [(google.api.field_behavior) = REQUIRED];
    // The Svi to create
    Svi svi       = 2 [(google.api.field_behavior) = REQUIRED];
}

// ListSvisRequest structure
message ListSvisRequest {
    // page size of list request
    int32 page_size   = 1;
    // page token of list request
    string page_token = 2;
}

// ListSvisResponse structure
message ListSvisResponse {
    // List of all the svis
    repeated Svi svis      = 1;
    // Next page token of list response
    string next_page_token = 2;
}

// GetSviRequest structure
message GetSviRequest {
    // The name of the svi to retrieve
    // Format: svis/{svi}
    string name = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference).type = "opi_api.network.evpn_gw.v1alpha1/Svi"
    ];
}

// DeleteSviRequest structure
message DeleteSviRequest {
    // The name of the svi to delete
    // Format: svis/{svi}
    string name = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference).type = "opi_api.network.evpn_gw.v1alpha1/Svi"
    ];
}