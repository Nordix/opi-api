// SPDX-License-Identifier: Apache-2.0
// Copyright (C) 2023 Nordix Foundation.

// (-- api-linter: core::0132::request-parent-required=disabled
//     aip.dev/not-precedent: All the resources are top level. --)
// (-- api-linter: core::0133::request-parent-required=disabled
//     aip.dev/not-precedent: All the resources are top level. --)
// (-- api-linter: core::0133::http-uri-parent=disabled
//     aip.dev/not-precedent: All resources are top-level. --)

syntax = "proto3";

package opi_api.network.evpn_gw.v1alpha1;

option go_package = "github.com/opiproject/opi-api/network/evpn-gw/v1alpha1/gen/go";
option java_package = "opi_api.network.evpn_gw.v1alpha1";
option java_multiple_files = true;
option java_outer_classname = "L3XpuInfraMgrProto";

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/protobuf/empty.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";

// Management of Vrf Resources
service VrfService {
    // Create a Vrf
    rpc CreateVrf(CreateVrfRequest) returns (Vrf){
        option (google.api.http) = {
          post: "/v1/vrfs"
          body: "vrf"
        };
        option (google.api.method_signature) = "vrf";
    }
    // List Vrfs
    rpc ListVrfs(ListVrfsRequest) returns (ListVrfsResponse){
        option (google.api.http) = {
          get: "/v1/vrfs"
        };
    }
    // Retrieve a Vrf
    rpc GetVrf(GetVrfRequest) returns (Vrf){
        option (google.api.http) = {
          get: "/v1/{name=vrfs/*}"
        };
        option (google.api.method_signature) = "name";
    }
    // Delete a Vrf
    rpc DeleteVrf(DeleteVrfRequest) returns (google.protobuf.Empty){
        option (google.api.http) = {
          delete: "/v1/{name=vrfs/*}"
        };
        option (google.api.method_signature) = "name";
    }
}

// Management of switch virtual interfaces (SVIs) binding LogicalBridges to VRFs.
service SviService {
    // Create a Svi
    rpc CreateSvi(CreateSviRequest) returns (Svi){
        option (google.api.http) = {
          post: "/v1/svis"
          body: "svi"
        };
        option (google.api.method_signature) = "svi";
    }
    // List Svis
    rpc ListSvis(ListSvisRequest) returns (ListSvisResponse){
        option (google.api.http) = {
          get: "/v1/svis"
        };
    }
    // Retrieve a Svi
    // (-- api-linter: core::0131::method-signature=disabled
    //     aip.dev/not-precedent: "vrf" and "vlan_id" are the keys. --)
    // (-- api-linter: client-libraries::4232::required-fields=disabled
    //     aip.dev/not-precedent: vrf" and "vlan_id" are the required fields. --)
    // (-- api-linter: core::0131::http-uri-name=disabled
    //     aip.dev/not-precedent: No "name" is used as key. --)
    rpc GetSvi(GetSviRequest) returns (Svi){
        option (google.api.http) = {
          get: "/v1/{vrf&vlan_id=svis/*}"
        };
        option (google.api.method_signature) = "vrf, vlan_id";
    }
    // Delete a Svi
    // (-- api-linter: core::0135::method-signature=disabled
    //     aip.dev/not-precedent: "vrf" and "vlan_id" are the keys. --)
    // (-- api-linter: client-libraries::4232::required-fields=disabled
    //     aip.dev/not-precedent: "vrf" and "vlan_id" are the required fields. --)
    // (-- api-linter: core::0135::http-uri-name=disabled
    //     aip.dev/not-precedent: The "name" is not used as key. --)
    rpc DeleteSvi(DeleteSviRequest) returns (google.protobuf.Empty){
        option (google.api.http) = {
          delete: "/v1/{vrf&vlan_id=svis/*}"
        };
        option (google.api.method_signature) = "vrf, vlan_id";
    }
}

// Vrf structure
message Vrf {
    option (google.api.resource) = {
      type: "opi_api.network.evpn_gw.v1alpha1/Vrf"
      pattern: "vrfs/{vrf}"
    };
    // Key, also used as name of the Linux vrf device (max 9 chars)
    string name = 1 [(google.api.field_behavior) = REQUIRED];
    // VXLAN VNI for L3 EVPN. Also used as EVPN route target
    // (-- api-linter: core::0141::forbidden-types=disabled
    //     aip.dev/not-precedent: vni cannot be negative number. --)                  
    uint32 vni = 2;
    // Linux routing table number (range 1001-3999). Defaults to vni
    // (-- api-linter: core::0141::forbidden-types=disabled
    //     aip.dev/not-precedent: routing_table cannot be negative number. --)
    uint32 routing_table = 3;
    // IPv4 or IPv6 loopback address. Also serves as basis for RD in FRR
    string loopback_ip = 4 [(google.api.field_behavior) = REQUIRED];
    // IPv4 or IPv6 IP address for the VXLAN TEP
    string vtep_ip = 5;
    // Read-only: Local AS configured for VRF
    // (-- api-linter: core::0141::forbidden-types=disabled
    //     aip.dev/not-precedent: local_as cannot be negative number. --)
    uint32 local_as = 6;
    // Read-only: Route distinguisher chosen by FRR
    string rd = 7;
    // Read-only: Router MAC address of the VRF
    string rmac = 8;
    // Read-only: List of import RTs chosen by FRR
    repeated string import_rts = 9;
    // Read-only: List of export RTs chosen by FRR
    repeated string export_rts = 10;
    // Read-only: List of connected LogicalBridges
    // (-- api-linter: core::0141::forbidden-types=disabled
    //     aip.dev/not-precedent: vlan cannot be negative number. --)
    repeated uint32 vlan_ids = 11;
}

// CreateVrfRequest structure
message CreateVrfRequest {
    // The vrf to create
    Vrf vrf = 1 [(google.api.field_behavior) = REQUIRED];
}

// ListVrfsRequest structure
message ListVrfsRequest {
    // page size of list request
    int32 page_size = 1;
    // page token of list request
    string page_token = 2;
}

// ListVrfsResponse structure
message ListVrfsResponse {
    // List of all the bridge ports
    repeated Vrf vrfs = 1;
    // Next page token of list response
    string next_page_token = 2;
}

// GetVrfRequest structure
message GetVrfRequest {
    // The name of the vrf to retrieve
    string name = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference).type = "opi_api.network.evpn_gw.v1alpha1/Vrf"
    ];
}

// DeleteVrfRequest structure
message DeleteVrfRequest {
    // The name of the vrf to delete
    string name = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference).type = "opi_api.network.evpn_gw.v1alpha1/Vrf"
    ];
}

// IpAddressMasklen structure
message IpAddressMasklen {
    // IP address
    string ip_addr = 1;
    // Length of the subnet prefix mask
    // (-- api-linter: core::0141::forbidden-types=disabled
    //     aip.dev/not-precedent: subnet mask cannot be negative number. --)
    uint32 len = 2;
}

// (-- api-linter: core::0123::resource-name-field=disabled
//     aip.dev/not-precedent: The "vrf", "vlan_id" are used for unique identification
//     of the svi object. --)
//Svi structure
message Svi {
    option (google.api.resource) = {
      type: "opi_api.network.evpn_gw.v1alpha1/Svi"
      pattern: "svis/{svi}"
    };
    // Name of the VRF
    string vrf = 1 [(google.api.field_behavior) = REQUIRED];
    // Key of the LogicalBridge
    // (-- api-linter: core::0141::forbidden-types=disabled
    //     aip.dev/not-precedent: vlan cannot be negative number. --)
    uint32 vlan_id = 2 [(google.api.field_behavior) = REQUIRED];
    // Use "aa:bb:cc:dd:ee:ff" format. Randomly assigned if not specified
    string mac_address = 3 [(google.api.field_behavior) = REQUIRED];
    // The GW IP addresses with masks assigned to the SVI
    repeated IpAddressMasklen gw_ip = 4 [(google.api.field_behavior) = REQUIRED];
    // Set to true to enable BGP peering with VRF on SVI
    bool enable_bgp = 5;
    // Conditional: The remote AS used by BGP speakers on LB (1-65535)
    // (-- api-linter: core::0141::forbidden-types=disabled
    //     aip.dev/not-precedent: remote_as cannot be negative number. --)
    uint32 remote_as = 6;
}

// CreateSviRequest structure
message CreateSviRequest {
    // The Svi to create
    Svi svi = 1 [(google.api.field_behavior) = REQUIRED];
}

// ListSvisRequest structure
message ListSvisRequest {
    // page size of list request
    int32 page_size = 1;
    // page token of list request
    string page_token = 2;
}

// ListSvisResponse structure
message ListSvisResponse {
    // List of all the svis
    repeated Svi svis = 1;
    // Next page token of list response
    string next_page_token = 2;
}

//(-- api-linter: core::0135::request-unknown-fields=disabled
//     aip.dev/not-precedent: We really need "vrf", "vlan_id" because are used as keys
//     for the retrieve operation. --)
// (-- api-linter: core::0131::request-name-required=disabled
//     aip.dev/not-precedent: We really need "vrf", "vlan_id" because are used as keys
//     for the retrieve operation. --)
// (-- api-linter: core::0131::request-unknown-fields=disabled
//     aip.dev/not-precedent: We really need "vrf", "vlan_id" because are used as keys
//     for the retrieve operation. --)
// GetSviRequest structure
message GetSviRequest {
    // The name of the associated vrf
    string vrf = 1 [(google.api.field_behavior) = REQUIRED];
    // The vlan id of the associated logical bridge
    // (-- api-linter: core::0141::forbidden-types=disabled
    //     aip.dev/not-precedent: vlan cannot be negative number. --)
    uint32 vlan_id = 2 [(google.api.field_behavior) = REQUIRED];
}

// (-- api-linter: core::0135::request-unknown-fields=disabled
//     aip.dev/not-precedent: We really need "vrf", "vlan_id" because are used as keys
//     for deletion. --)
// (-- api-linter: core::0135::request-name-required=disabled
//     aip.dev/not-precedent: The "vrf", "vlan_id" keys are used for deletion. --)
// DeleteSviRequest structure
message DeleteSviRequest {
    // The name of the associated vrf
    string vrf = 1 [(google.api.field_behavior) = REQUIRED];
    // The vlan id of the associated logical bridge
    // (-- api-linter: core::0141::forbidden-types=disabled
    //     aip.dev/not-precedent: vlan cannot be negative number. --)
    uint32 vlan_id = 2 [(google.api.field_behavior) = REQUIRED];
}