// SPDX-License-Identifier: Apache-2.0
// Copyright (C) 2023 Nordix Foundation.

// (-- api-linter: core::0132::request-parent-required=disabled
//     aip.dev/not-precedent: All the resources are top level. --)
// (-- api-linter: core::0131::request-unknown-fields=disabled
//     aip.dev/not-precedent: "Different keys have been used for creation/retrieval of objects". --)
// (-- api-linter: core::0131::request-name-required=disabled
//     aip.dev/not-precedent: No "name" is used as key for retrieval or deletion of objects. --)
// (-- api-linter: core::0133::request-parent-required=disabled
//     aip.dev/not-precedent: All the resources are top level. --)
// (-- api-linter: core::0133::http-uri-parent=disabled
//     aip.dev/not-precedent: All resources are top-level. --)
// (-- api-linter: core::0135::request-name-required=disabled
//     aip.dev/not-precedent: No "name" is used as key for retrieval or deletion of objects. --)

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: l2_xpu_infra_mgr.proto

package _go

import (
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Defines the available types of a bridge port
type BridgePort_BridgePortType int32

const (
	// "unknown" bridge port type
	BridgePort_UNKNOWN BridgePort_BridgePortType = 0
	// "access" bridge port type
	BridgePort_ACCESS BridgePort_BridgePortType = 1
	// "trunk" bridge port type
	BridgePort_TRUNK BridgePort_BridgePortType = 2
)

// Enum value maps for BridgePort_BridgePortType.
var (
	BridgePort_BridgePortType_name = map[int32]string{
		0: "UNKNOWN",
		1: "ACCESS",
		2: "TRUNK",
	}
	BridgePort_BridgePortType_value = map[string]int32{
		"UNKNOWN": 0,
		"ACCESS":  1,
		"TRUNK":   2,
	}
)

func (x BridgePort_BridgePortType) Enum() *BridgePort_BridgePortType {
	p := new(BridgePort_BridgePortType)
	*p = x
	return p
}

func (x BridgePort_BridgePortType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BridgePort_BridgePortType) Descriptor() protoreflect.EnumDescriptor {
	return file_l2_xpu_infra_mgr_proto_enumTypes[0].Descriptor()
}

func (BridgePort_BridgePortType) Type() protoreflect.EnumType {
	return &file_l2_xpu_infra_mgr_proto_enumTypes[0]
}

func (x BridgePort_BridgePortType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BridgePort_BridgePortType.Descriptor instead.
func (BridgePort_BridgePortType) EnumDescriptor() ([]byte, []int) {
	return file_l2_xpu_infra_mgr_proto_rawDescGZIP(), []int{6, 0}
}

// LogicalBridge structure
type LogicalBridge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Free text description
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Key
	// (-- api-linter: core::0141::forbidden-types=disabled
	//     aip.dev/not-precedent: vlan cannot be negative number. --)
	VlanId uint32 `protobuf:"varint,2,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
	// VXLAN VNI for L2 EVPN. Also used as EVPN route target
	// (-- api-linter: core::0141::forbidden-types=disabled
	//     aip.dev/not-precedent: vni cannot be negative number. --)
	Vni uint32 `protobuf:"varint,3,opt,name=vni,proto3" json:"vni,omitempty"`
}

func (x *LogicalBridge) Reset() {
	*x = LogicalBridge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_l2_xpu_infra_mgr_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogicalBridge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicalBridge) ProtoMessage() {}

func (x *LogicalBridge) ProtoReflect() protoreflect.Message {
	mi := &file_l2_xpu_infra_mgr_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicalBridge.ProtoReflect.Descriptor instead.
func (*LogicalBridge) Descriptor() ([]byte, []int) {
	return file_l2_xpu_infra_mgr_proto_rawDescGZIP(), []int{0}
}

func (x *LogicalBridge) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LogicalBridge) GetVlanId() uint32 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

func (x *LogicalBridge) GetVni() uint32 {
	if x != nil {
		return x.Vni
	}
	return 0
}

// CreateLogicalBridgeRequest structure
type CreateLogicalBridgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The logical bridge to create
	LogicalBridge *LogicalBridge `protobuf:"bytes,1,opt,name=logical_bridge,json=logicalBridge,proto3" json:"logical_bridge,omitempty"`
}

func (x *CreateLogicalBridgeRequest) Reset() {
	*x = CreateLogicalBridgeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_l2_xpu_infra_mgr_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateLogicalBridgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLogicalBridgeRequest) ProtoMessage() {}

func (x *CreateLogicalBridgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_l2_xpu_infra_mgr_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLogicalBridgeRequest.ProtoReflect.Descriptor instead.
func (*CreateLogicalBridgeRequest) Descriptor() ([]byte, []int) {
	return file_l2_xpu_infra_mgr_proto_rawDescGZIP(), []int{1}
}

func (x *CreateLogicalBridgeRequest) GetLogicalBridge() *LogicalBridge {
	if x != nil {
		return x.LogicalBridge
	}
	return nil
}

// ListLogicalBridgesRequest structure
type ListLogicalBridgesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// page size of list request
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// page token of list request
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListLogicalBridgesRequest) Reset() {
	*x = ListLogicalBridgesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_l2_xpu_infra_mgr_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLogicalBridgesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLogicalBridgesRequest) ProtoMessage() {}

func (x *ListLogicalBridgesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_l2_xpu_infra_mgr_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLogicalBridgesRequest.ProtoReflect.Descriptor instead.
func (*ListLogicalBridgesRequest) Descriptor() ([]byte, []int) {
	return file_l2_xpu_infra_mgr_proto_rawDescGZIP(), []int{2}
}

func (x *ListLogicalBridgesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListLogicalBridgesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// ListLogicalBridgesResponse structure
type ListLogicalBridgesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of all the logical bridges
	LogicalBridges []*LogicalBridge `protobuf:"bytes,1,rep,name=logical_bridges,json=logicalBridges,proto3" json:"logical_bridges,omitempty"`
	// Next page token of list response
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListLogicalBridgesResponse) Reset() {
	*x = ListLogicalBridgesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_l2_xpu_infra_mgr_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLogicalBridgesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLogicalBridgesResponse) ProtoMessage() {}

func (x *ListLogicalBridgesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_l2_xpu_infra_mgr_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLogicalBridgesResponse.ProtoReflect.Descriptor instead.
func (*ListLogicalBridgesResponse) Descriptor() ([]byte, []int) {
	return file_l2_xpu_infra_mgr_proto_rawDescGZIP(), []int{3}
}

func (x *ListLogicalBridgesResponse) GetLogicalBridges() []*LogicalBridge {
	if x != nil {
		return x.LogicalBridges
	}
	return nil
}

func (x *ListLogicalBridgesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

//(-- api-linter: core::0135::request-unknown-fields=disabled
//     aip.dev/not-precedent: We really need "vlan_id" because is used as key
//     for the retrieve operation. --)
// GetLogicalBridgeRequest structure
type GetLogicalBridgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The vlan id of the logical bridge to retrieve
	// (-- api-linter: core::0141::forbidden-types=disabled
	//     aip.dev/not-precedent: vlan cannot be negative number. --)
	VlanId uint32 `protobuf:"varint,1,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
}

func (x *GetLogicalBridgeRequest) Reset() {
	*x = GetLogicalBridgeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_l2_xpu_infra_mgr_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLogicalBridgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLogicalBridgeRequest) ProtoMessage() {}

func (x *GetLogicalBridgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_l2_xpu_infra_mgr_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLogicalBridgeRequest.ProtoReflect.Descriptor instead.
func (*GetLogicalBridgeRequest) Descriptor() ([]byte, []int) {
	return file_l2_xpu_infra_mgr_proto_rawDescGZIP(), []int{4}
}

func (x *GetLogicalBridgeRequest) GetVlanId() uint32 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

// (-- api-linter: core::0135::request-unknown-fields=disabled
//     aip.dev/not-precedent: We really need "vlan_id" because is used as key
//     for deletion. --)
// DeleteLogicalBridgeRequest structure
type DeleteLogicalBridgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The vlan id of the logical bridge to delete
	// (-- api-linter: core::0141::forbidden-types=disabled
	//     aip.dev/not-precedent: vlan cannot be negative number. --)
	VlanId uint32 `protobuf:"varint,1,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
}

func (x *DeleteLogicalBridgeRequest) Reset() {
	*x = DeleteLogicalBridgeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_l2_xpu_infra_mgr_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteLogicalBridgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLogicalBridgeRequest) ProtoMessage() {}

func (x *DeleteLogicalBridgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_l2_xpu_infra_mgr_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLogicalBridgeRequest.ProtoReflect.Descriptor instead.
func (*DeleteLogicalBridgeRequest) Descriptor() ([]byte, []int) {
	return file_l2_xpu_infra_mgr_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteLogicalBridgeRequest) GetVlanId() uint32 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

// BridgePort structure
type BridgePort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Free text description
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Key. Read-only. Assigned by the server in CreateBridgePort
	// (-- api-linter: core::0141::forbidden-types=disabled
	//     aip.dev/not-precedent: vport_id cannot be negative number. --)
	VportId uint32 `protobuf:"varint,2,opt,name=vport_id,json=vportId,proto3" json:"vport_id,omitempty"`
	// Use "aa:bb:cc:dd:ee:ff" format
	MacAddress string `protobuf:"bytes,3,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	// holds the type of the bridge port
	Ptype BridgePort_BridgePortType `protobuf:"varint,4,opt,name=ptype,proto3,enum=opi_api.network.evpn_gw.v1alpha1.BridgePort_BridgePortType" json:"ptype,omitempty"`
	// Configured vlan ids on the bridge port
	// (-- api-linter: core::0141::forbidden-types=disabled
	//     aip.dev/not-precedent: vlan cannot be negative number. --)
	VlanId []uint32 `protobuf:"varint,5,rep,packed,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
}

func (x *BridgePort) Reset() {
	*x = BridgePort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_l2_xpu_infra_mgr_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BridgePort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BridgePort) ProtoMessage() {}

func (x *BridgePort) ProtoReflect() protoreflect.Message {
	mi := &file_l2_xpu_infra_mgr_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BridgePort.ProtoReflect.Descriptor instead.
func (*BridgePort) Descriptor() ([]byte, []int) {
	return file_l2_xpu_infra_mgr_proto_rawDescGZIP(), []int{6}
}

func (x *BridgePort) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BridgePort) GetVportId() uint32 {
	if x != nil {
		return x.VportId
	}
	return 0
}

func (x *BridgePort) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *BridgePort) GetPtype() BridgePort_BridgePortType {
	if x != nil {
		return x.Ptype
	}
	return BridgePort_UNKNOWN
}

func (x *BridgePort) GetVlanId() []uint32 {
	if x != nil {
		return x.VlanId
	}
	return nil
}

// CreateBridgePortRequest structure
type CreateBridgePortRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The bridge port to create
	BridgePort *BridgePort `protobuf:"bytes,1,opt,name=bridge_port,json=bridgePort,proto3" json:"bridge_port,omitempty"`
}

func (x *CreateBridgePortRequest) Reset() {
	*x = CreateBridgePortRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_l2_xpu_infra_mgr_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBridgePortRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBridgePortRequest) ProtoMessage() {}

func (x *CreateBridgePortRequest) ProtoReflect() protoreflect.Message {
	mi := &file_l2_xpu_infra_mgr_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBridgePortRequest.ProtoReflect.Descriptor instead.
func (*CreateBridgePortRequest) Descriptor() ([]byte, []int) {
	return file_l2_xpu_infra_mgr_proto_rawDescGZIP(), []int{7}
}

func (x *CreateBridgePortRequest) GetBridgePort() *BridgePort {
	if x != nil {
		return x.BridgePort
	}
	return nil
}

// ListBridgePortsRequest structure
type ListBridgePortsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// page size of list request
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// page token of list request
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListBridgePortsRequest) Reset() {
	*x = ListBridgePortsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_l2_xpu_infra_mgr_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBridgePortsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBridgePortsRequest) ProtoMessage() {}

func (x *ListBridgePortsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_l2_xpu_infra_mgr_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBridgePortsRequest.ProtoReflect.Descriptor instead.
func (*ListBridgePortsRequest) Descriptor() ([]byte, []int) {
	return file_l2_xpu_infra_mgr_proto_rawDescGZIP(), []int{8}
}

func (x *ListBridgePortsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListBridgePortsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// ListBridgePortsResponse structure
type ListBridgePortsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of all the bridge ports
	BridgePorts []*BridgePort `protobuf:"bytes,1,rep,name=bridge_ports,json=bridgePorts,proto3" json:"bridge_ports,omitempty"`
	// Next page token of list response
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListBridgePortsResponse) Reset() {
	*x = ListBridgePortsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_l2_xpu_infra_mgr_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBridgePortsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBridgePortsResponse) ProtoMessage() {}

func (x *ListBridgePortsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_l2_xpu_infra_mgr_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBridgePortsResponse.ProtoReflect.Descriptor instead.
func (*ListBridgePortsResponse) Descriptor() ([]byte, []int) {
	return file_l2_xpu_infra_mgr_proto_rawDescGZIP(), []int{9}
}

func (x *ListBridgePortsResponse) GetBridgePorts() []*BridgePort {
	if x != nil {
		return x.BridgePorts
	}
	return nil
}

func (x *ListBridgePortsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// (-- api-linter: core::0135::request-unknown-fields=disabled
//     aip.dev/not-precedent: We really need "vport_id" because is used as key
//     for the retrieve operation. --)
// GetBridgePortRequest structure
type GetBridgePortRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The vport id of the bridge port to retrieve
	// (-- api-linter: core::0141::forbidden-types=disabled
	//     aip.dev/not-precedent: vport_id cannot be negative number. --)
	VportId uint32 `protobuf:"varint,1,opt,name=vport_id,json=vportId,proto3" json:"vport_id,omitempty"`
}

func (x *GetBridgePortRequest) Reset() {
	*x = GetBridgePortRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_l2_xpu_infra_mgr_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBridgePortRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBridgePortRequest) ProtoMessage() {}

func (x *GetBridgePortRequest) ProtoReflect() protoreflect.Message {
	mi := &file_l2_xpu_infra_mgr_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBridgePortRequest.ProtoReflect.Descriptor instead.
func (*GetBridgePortRequest) Descriptor() ([]byte, []int) {
	return file_l2_xpu_infra_mgr_proto_rawDescGZIP(), []int{10}
}

func (x *GetBridgePortRequest) GetVportId() uint32 {
	if x != nil {
		return x.VportId
	}
	return 0
}

// (-- api-linter: core::0135::request-unknown-fields=disabled
//     aip.dev/not-precedent: We really need "vport_id" because is used as key
//     for deletion. --)
// DeleteBridgePortRequest structure
type DeleteBridgePortRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The vport id of the bridge port to delete
	// (-- api-linter: core::0141::forbidden-types=disabled
	//     aip.dev/not-precedent: vport_id cannot be negative number. --)
	VportId uint32 `protobuf:"varint,1,opt,name=vport_id,json=vportId,proto3" json:"vport_id,omitempty"`
}

func (x *DeleteBridgePortRequest) Reset() {
	*x = DeleteBridgePortRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_l2_xpu_infra_mgr_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBridgePortRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBridgePortRequest) ProtoMessage() {}

func (x *DeleteBridgePortRequest) ProtoReflect() protoreflect.Message {
	mi := &file_l2_xpu_infra_mgr_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBridgePortRequest.ProtoReflect.Descriptor instead.
func (*DeleteBridgePortRequest) Descriptor() ([]byte, []int) {
	return file_l2_xpu_infra_mgr_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteBridgePortRequest) GetVportId() uint32 {
	if x != nil {
		return x.VportId
	}
	return 0
}

var File_l2_xpu_infra_mgr_proto protoreflect.FileDescriptor

var file_l2_xpu_infra_mgr_proto_rawDesc = []byte{
	0x0a, 0x16, 0x6c, 0x32, 0x5f, 0x78, 0x70, 0x75, 0x5f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x6d,
	0x67, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x20, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67,
	0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9c, 0x01, 0x0a, 0x0d, 0x4c,
	0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x76, 0x6e, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x76, 0x6e, 0x69,
	0x3a, 0x47, 0xea, 0x41, 0x44, 0x0a, 0x24, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x12, 0x1c, 0x6c, 0x6f, 0x67,
	0x69, 0x63, 0x61, 0x6c, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x73, 0x2f, 0x6c, 0x6f, 0x67, 0x69,
	0x63, 0x61, 0x6c, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x22, 0x79, 0x0a, 0x1a, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5b, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x5f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x22, 0x57, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x61, 0x6c, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x9e, 0x01,
	0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x0f,
	0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x42,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x37,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x07, 0x76, 0x6c, 0x61,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x06, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x22, 0x3a, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x76, 0x6c, 0x61,
	0x6e, 0x49, 0x64, 0x22, 0xc8, 0x02, 0x0a, 0x0a, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f,
	0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x70, 0x6f, 0x72, 0x74, 0x49,
	0x64, 0x12, 0x24, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x6d, 0x61, 0x63,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x56, 0x0a, 0x05, 0x70, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x50, 0x6f, 0x72, 0x74, 0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x70, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x06, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x22, 0x34, 0x0a, 0x0e, 0x42, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x52, 0x55, 0x4e, 0x4b, 0x10, 0x02, 0x3a, 0x3e,
	0xea, 0x41, 0x3b, 0x0a, 0x21, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x42, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f,
	0x72, 0x74, 0x73, 0x2f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x6d,
	0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x0b, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x0a, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x54, 0x0a,
	0x16, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x92, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4f, 0x0a, 0x0c, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50,
	0x6f, 0x72, 0x74, 0x52, 0x0b, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73,
	0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x36, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x42,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1e, 0x0a, 0x08, 0x76, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x76, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64,
	0x22, 0x39, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x08, 0x76,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x07, 0x76, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x32, 0xdb, 0x05, 0x0a, 0x14,
	0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0xc1, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c,
	0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x12, 0x3c, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65,
	0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70,
	0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x22, 0x3b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x24, 0x22, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x73, 0x3a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x5f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0xda, 0x41, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x5f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x12, 0xab, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73,
	0x74, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x73, 0x12,
	0x3b, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65,
	0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x14, 0x12, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x42,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x73, 0x12, 0xb0, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x12, 0x39, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76,
	0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12,
	0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x3d, 0x6c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0xda,
	0x41, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x12, 0x9d, 0x01, 0x0a, 0x13, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x12, 0x3c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x2a,
	0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x3d, 0x6c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0xda,
	0x41, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x32, 0xa9, 0x05, 0x0a, 0x11, 0x42, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0xaf, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x39, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x32, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x3a, 0x0b, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0xda, 0x41, 0x0b, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x9f, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x38, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x39, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x11, 0x12, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f,
	0x72, 0x74, 0x73, 0x12, 0xa6, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x36, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x2f, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x76, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x69, 0x64, 0x3d, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x2a,
	0x7d, 0xda, 0x41, 0x08, 0x76, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x96, 0x01, 0x0a,
	0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x39, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x2a, 0x1c, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x76, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x3d, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0xda, 0x41, 0x08, 0x76, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x77, 0x0a, 0x20, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x42, 0x12, 0x4c, 0x32, 0x58, 0x70, 0x75,
	0x49, 0x6e, 0x66, 0x72, 0x61, 0x4d, 0x67, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x3d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x69, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x6f, 0x70, 0x69, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x65, 0x76, 0x70, 0x6e, 0x2d, 0x67, 0x77, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_l2_xpu_infra_mgr_proto_rawDescOnce sync.Once
	file_l2_xpu_infra_mgr_proto_rawDescData = file_l2_xpu_infra_mgr_proto_rawDesc
)

func file_l2_xpu_infra_mgr_proto_rawDescGZIP() []byte {
	file_l2_xpu_infra_mgr_proto_rawDescOnce.Do(func() {
		file_l2_xpu_infra_mgr_proto_rawDescData = protoimpl.X.CompressGZIP(file_l2_xpu_infra_mgr_proto_rawDescData)
	})
	return file_l2_xpu_infra_mgr_proto_rawDescData
}

var file_l2_xpu_infra_mgr_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_l2_xpu_infra_mgr_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_l2_xpu_infra_mgr_proto_goTypes = []interface{}{
	(BridgePort_BridgePortType)(0),     // 0: opi_api.network.evpn_gw.v1alpha1.BridgePort.BridgePortType
	(*LogicalBridge)(nil),              // 1: opi_api.network.evpn_gw.v1alpha1.LogicalBridge
	(*CreateLogicalBridgeRequest)(nil), // 2: opi_api.network.evpn_gw.v1alpha1.CreateLogicalBridgeRequest
	(*ListLogicalBridgesRequest)(nil),  // 3: opi_api.network.evpn_gw.v1alpha1.ListLogicalBridgesRequest
	(*ListLogicalBridgesResponse)(nil), // 4: opi_api.network.evpn_gw.v1alpha1.ListLogicalBridgesResponse
	(*GetLogicalBridgeRequest)(nil),    // 5: opi_api.network.evpn_gw.v1alpha1.GetLogicalBridgeRequest
	(*DeleteLogicalBridgeRequest)(nil), // 6: opi_api.network.evpn_gw.v1alpha1.DeleteLogicalBridgeRequest
	(*BridgePort)(nil),                 // 7: opi_api.network.evpn_gw.v1alpha1.BridgePort
	(*CreateBridgePortRequest)(nil),    // 8: opi_api.network.evpn_gw.v1alpha1.CreateBridgePortRequest
	(*ListBridgePortsRequest)(nil),     // 9: opi_api.network.evpn_gw.v1alpha1.ListBridgePortsRequest
	(*ListBridgePortsResponse)(nil),    // 10: opi_api.network.evpn_gw.v1alpha1.ListBridgePortsResponse
	(*GetBridgePortRequest)(nil),       // 11: opi_api.network.evpn_gw.v1alpha1.GetBridgePortRequest
	(*DeleteBridgePortRequest)(nil),    // 12: opi_api.network.evpn_gw.v1alpha1.DeleteBridgePortRequest
	(*emptypb.Empty)(nil),              // 13: google.protobuf.Empty
}
var file_l2_xpu_infra_mgr_proto_depIdxs = []int32{
	1,  // 0: opi_api.network.evpn_gw.v1alpha1.CreateLogicalBridgeRequest.logical_bridge:type_name -> opi_api.network.evpn_gw.v1alpha1.LogicalBridge
	1,  // 1: opi_api.network.evpn_gw.v1alpha1.ListLogicalBridgesResponse.logical_bridges:type_name -> opi_api.network.evpn_gw.v1alpha1.LogicalBridge
	0,  // 2: opi_api.network.evpn_gw.v1alpha1.BridgePort.ptype:type_name -> opi_api.network.evpn_gw.v1alpha1.BridgePort.BridgePortType
	7,  // 3: opi_api.network.evpn_gw.v1alpha1.CreateBridgePortRequest.bridge_port:type_name -> opi_api.network.evpn_gw.v1alpha1.BridgePort
	7,  // 4: opi_api.network.evpn_gw.v1alpha1.ListBridgePortsResponse.bridge_ports:type_name -> opi_api.network.evpn_gw.v1alpha1.BridgePort
	2,  // 5: opi_api.network.evpn_gw.v1alpha1.LogicalBridgeService.CreateLogicalBridge:input_type -> opi_api.network.evpn_gw.v1alpha1.CreateLogicalBridgeRequest
	3,  // 6: opi_api.network.evpn_gw.v1alpha1.LogicalBridgeService.ListLogicalBridges:input_type -> opi_api.network.evpn_gw.v1alpha1.ListLogicalBridgesRequest
	5,  // 7: opi_api.network.evpn_gw.v1alpha1.LogicalBridgeService.GetLogicalBridge:input_type -> opi_api.network.evpn_gw.v1alpha1.GetLogicalBridgeRequest
	6,  // 8: opi_api.network.evpn_gw.v1alpha1.LogicalBridgeService.DeleteLogicalBridge:input_type -> opi_api.network.evpn_gw.v1alpha1.DeleteLogicalBridgeRequest
	8,  // 9: opi_api.network.evpn_gw.v1alpha1.BridgePortService.CreateBridgePort:input_type -> opi_api.network.evpn_gw.v1alpha1.CreateBridgePortRequest
	9,  // 10: opi_api.network.evpn_gw.v1alpha1.BridgePortService.ListBridgePorts:input_type -> opi_api.network.evpn_gw.v1alpha1.ListBridgePortsRequest
	11, // 11: opi_api.network.evpn_gw.v1alpha1.BridgePortService.GetBridgePort:input_type -> opi_api.network.evpn_gw.v1alpha1.GetBridgePortRequest
	12, // 12: opi_api.network.evpn_gw.v1alpha1.BridgePortService.DeleteBridgePort:input_type -> opi_api.network.evpn_gw.v1alpha1.DeleteBridgePortRequest
	1,  // 13: opi_api.network.evpn_gw.v1alpha1.LogicalBridgeService.CreateLogicalBridge:output_type -> opi_api.network.evpn_gw.v1alpha1.LogicalBridge
	4,  // 14: opi_api.network.evpn_gw.v1alpha1.LogicalBridgeService.ListLogicalBridges:output_type -> opi_api.network.evpn_gw.v1alpha1.ListLogicalBridgesResponse
	1,  // 15: opi_api.network.evpn_gw.v1alpha1.LogicalBridgeService.GetLogicalBridge:output_type -> opi_api.network.evpn_gw.v1alpha1.LogicalBridge
	13, // 16: opi_api.network.evpn_gw.v1alpha1.LogicalBridgeService.DeleteLogicalBridge:output_type -> google.protobuf.Empty
	7,  // 17: opi_api.network.evpn_gw.v1alpha1.BridgePortService.CreateBridgePort:output_type -> opi_api.network.evpn_gw.v1alpha1.BridgePort
	10, // 18: opi_api.network.evpn_gw.v1alpha1.BridgePortService.ListBridgePorts:output_type -> opi_api.network.evpn_gw.v1alpha1.ListBridgePortsResponse
	7,  // 19: opi_api.network.evpn_gw.v1alpha1.BridgePortService.GetBridgePort:output_type -> opi_api.network.evpn_gw.v1alpha1.BridgePort
	13, // 20: opi_api.network.evpn_gw.v1alpha1.BridgePortService.DeleteBridgePort:output_type -> google.protobuf.Empty
	13, // [13:21] is the sub-list for method output_type
	5,  // [5:13] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_l2_xpu_infra_mgr_proto_init() }
func file_l2_xpu_infra_mgr_proto_init() {
	if File_l2_xpu_infra_mgr_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_l2_xpu_infra_mgr_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogicalBridge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_l2_xpu_infra_mgr_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateLogicalBridgeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_l2_xpu_infra_mgr_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLogicalBridgesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_l2_xpu_infra_mgr_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLogicalBridgesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_l2_xpu_infra_mgr_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLogicalBridgeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_l2_xpu_infra_mgr_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteLogicalBridgeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_l2_xpu_infra_mgr_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BridgePort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_l2_xpu_infra_mgr_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBridgePortRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_l2_xpu_infra_mgr_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBridgePortsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_l2_xpu_infra_mgr_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBridgePortsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_l2_xpu_infra_mgr_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBridgePortRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_l2_xpu_infra_mgr_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBridgePortRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_l2_xpu_infra_mgr_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_l2_xpu_infra_mgr_proto_goTypes,
		DependencyIndexes: file_l2_xpu_infra_mgr_proto_depIdxs,
		EnumInfos:         file_l2_xpu_infra_mgr_proto_enumTypes,
		MessageInfos:      file_l2_xpu_infra_mgr_proto_msgTypes,
	}.Build()
	File_l2_xpu_infra_mgr_proto = out.File
	file_l2_xpu_infra_mgr_proto_rawDesc = nil
	file_l2_xpu_infra_mgr_proto_goTypes = nil
	file_l2_xpu_infra_mgr_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LogicalBridgeServiceClient is the client API for LogicalBridgeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LogicalBridgeServiceClient interface {
	// Create a LogicalBridge
	// (-- api-linter: core::0133::method-signature=disabled
	//     aip.dev/not-precedent: The "logical_bridge" is top-level resource. --)
	CreateLogicalBridge(ctx context.Context, in *CreateLogicalBridgeRequest, opts ...grpc.CallOption) (*LogicalBridge, error)
	// List LogicalBridges
	ListLogicalBridges(ctx context.Context, in *ListLogicalBridgesRequest, opts ...grpc.CallOption) (*ListLogicalBridgesResponse, error)
	// Retrieve a LogicalBridge
	// (-- api-linter: core::0131::method-signature=disabled
	//     aip.dev/not-precedent: "vlan_id" is the key. --)
	// (-- api-linter: client-libraries::4232::required-fields=disabled
	//     aip.dev/not-precedent: "vlan_id" is the required field. --)
	// (-- api-linter: core::0131::http-uri-name=disabled
	//     aip.dev/not-precedent: No "name" is used as key. --)
	GetLogicalBridge(ctx context.Context, in *GetLogicalBridgeRequest, opts ...grpc.CallOption) (*LogicalBridge, error)
	// Delete a LogicalBridge
	// (-- api-linter: core::0135::method-signature=disabled
	//     aip.dev/not-precedent: "vlan_id" is the key. --)
	// (-- api-linter: client-libraries::4232::required-fields=disabled
	//     aip.dev/not-precedent: "vlan_id" is the required field. --)
	// (-- api-linter: core::0135::http-uri-name=disabled
	//     aip.dev/not-precedent: The "name" is not used as key. --)
	DeleteLogicalBridge(ctx context.Context, in *DeleteLogicalBridgeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type logicalBridgeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogicalBridgeServiceClient(cc grpc.ClientConnInterface) LogicalBridgeServiceClient {
	return &logicalBridgeServiceClient{cc}
}

func (c *logicalBridgeServiceClient) CreateLogicalBridge(ctx context.Context, in *CreateLogicalBridgeRequest, opts ...grpc.CallOption) (*LogicalBridge, error) {
	out := new(LogicalBridge)
	err := c.cc.Invoke(ctx, "/opi_api.network.evpn_gw.v1alpha1.LogicalBridgeService/CreateLogicalBridge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicalBridgeServiceClient) ListLogicalBridges(ctx context.Context, in *ListLogicalBridgesRequest, opts ...grpc.CallOption) (*ListLogicalBridgesResponse, error) {
	out := new(ListLogicalBridgesResponse)
	err := c.cc.Invoke(ctx, "/opi_api.network.evpn_gw.v1alpha1.LogicalBridgeService/ListLogicalBridges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicalBridgeServiceClient) GetLogicalBridge(ctx context.Context, in *GetLogicalBridgeRequest, opts ...grpc.CallOption) (*LogicalBridge, error) {
	out := new(LogicalBridge)
	err := c.cc.Invoke(ctx, "/opi_api.network.evpn_gw.v1alpha1.LogicalBridgeService/GetLogicalBridge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicalBridgeServiceClient) DeleteLogicalBridge(ctx context.Context, in *DeleteLogicalBridgeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/opi_api.network.evpn_gw.v1alpha1.LogicalBridgeService/DeleteLogicalBridge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogicalBridgeServiceServer is the server API for LogicalBridgeService service.
type LogicalBridgeServiceServer interface {
	// Create a LogicalBridge
	// (-- api-linter: core::0133::method-signature=disabled
	//     aip.dev/not-precedent: The "logical_bridge" is top-level resource. --)
	CreateLogicalBridge(context.Context, *CreateLogicalBridgeRequest) (*LogicalBridge, error)
	// List LogicalBridges
	ListLogicalBridges(context.Context, *ListLogicalBridgesRequest) (*ListLogicalBridgesResponse, error)
	// Retrieve a LogicalBridge
	// (-- api-linter: core::0131::method-signature=disabled
	//     aip.dev/not-precedent: "vlan_id" is the key. --)
	// (-- api-linter: client-libraries::4232::required-fields=disabled
	//     aip.dev/not-precedent: "vlan_id" is the required field. --)
	// (-- api-linter: core::0131::http-uri-name=disabled
	//     aip.dev/not-precedent: No "name" is used as key. --)
	GetLogicalBridge(context.Context, *GetLogicalBridgeRequest) (*LogicalBridge, error)
	// Delete a LogicalBridge
	// (-- api-linter: core::0135::method-signature=disabled
	//     aip.dev/not-precedent: "vlan_id" is the key. --)
	// (-- api-linter: client-libraries::4232::required-fields=disabled
	//     aip.dev/not-precedent: "vlan_id" is the required field. --)
	// (-- api-linter: core::0135::http-uri-name=disabled
	//     aip.dev/not-precedent: The "name" is not used as key. --)
	DeleteLogicalBridge(context.Context, *DeleteLogicalBridgeRequest) (*emptypb.Empty, error)
}

// UnimplementedLogicalBridgeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedLogicalBridgeServiceServer struct {
}

func (*UnimplementedLogicalBridgeServiceServer) CreateLogicalBridge(context.Context, *CreateLogicalBridgeRequest) (*LogicalBridge, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLogicalBridge not implemented")
}
func (*UnimplementedLogicalBridgeServiceServer) ListLogicalBridges(context.Context, *ListLogicalBridgesRequest) (*ListLogicalBridgesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLogicalBridges not implemented")
}
func (*UnimplementedLogicalBridgeServiceServer) GetLogicalBridge(context.Context, *GetLogicalBridgeRequest) (*LogicalBridge, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogicalBridge not implemented")
}
func (*UnimplementedLogicalBridgeServiceServer) DeleteLogicalBridge(context.Context, *DeleteLogicalBridgeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLogicalBridge not implemented")
}

func RegisterLogicalBridgeServiceServer(s *grpc.Server, srv LogicalBridgeServiceServer) {
	s.RegisterService(&_LogicalBridgeService_serviceDesc, srv)
}

func _LogicalBridgeService_CreateLogicalBridge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLogicalBridgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicalBridgeServiceServer).CreateLogicalBridge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.evpn_gw.v1alpha1.LogicalBridgeService/CreateLogicalBridge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicalBridgeServiceServer).CreateLogicalBridge(ctx, req.(*CreateLogicalBridgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogicalBridgeService_ListLogicalBridges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLogicalBridgesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicalBridgeServiceServer).ListLogicalBridges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.evpn_gw.v1alpha1.LogicalBridgeService/ListLogicalBridges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicalBridgeServiceServer).ListLogicalBridges(ctx, req.(*ListLogicalBridgesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogicalBridgeService_GetLogicalBridge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLogicalBridgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicalBridgeServiceServer).GetLogicalBridge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.evpn_gw.v1alpha1.LogicalBridgeService/GetLogicalBridge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicalBridgeServiceServer).GetLogicalBridge(ctx, req.(*GetLogicalBridgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogicalBridgeService_DeleteLogicalBridge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLogicalBridgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicalBridgeServiceServer).DeleteLogicalBridge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.evpn_gw.v1alpha1.LogicalBridgeService/DeleteLogicalBridge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicalBridgeServiceServer).DeleteLogicalBridge(ctx, req.(*DeleteLogicalBridgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LogicalBridgeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "opi_api.network.evpn_gw.v1alpha1.LogicalBridgeService",
	HandlerType: (*LogicalBridgeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLogicalBridge",
			Handler:    _LogicalBridgeService_CreateLogicalBridge_Handler,
		},
		{
			MethodName: "ListLogicalBridges",
			Handler:    _LogicalBridgeService_ListLogicalBridges_Handler,
		},
		{
			MethodName: "GetLogicalBridge",
			Handler:    _LogicalBridgeService_GetLogicalBridge_Handler,
		},
		{
			MethodName: "DeleteLogicalBridge",
			Handler:    _LogicalBridgeService_DeleteLogicalBridge_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "l2_xpu_infra_mgr.proto",
}

// BridgePortServiceClient is the client API for BridgePortService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BridgePortServiceClient interface {
	// Create a BridgePort
	// (-- api-linter: core::0133::method-signature=disabled
	//     aip.dev/not-precedent: The "bridge_port" is top-level resource. --)
	CreateBridgePort(ctx context.Context, in *CreateBridgePortRequest, opts ...grpc.CallOption) (*BridgePort, error)
	// List BridgePorts
	ListBridgePorts(ctx context.Context, in *ListBridgePortsRequest, opts ...grpc.CallOption) (*ListBridgePortsResponse, error)
	// Retrieve a BridgePort
	// (-- api-linter: core::0131::method-signature=disabled
	//     aip.dev/not-precedent: "vport_id" is the key. --)
	// (-- api-linter: client-libraries::4232::required-fields=disabled
	//     aip.dev/not-precedent: "vport_id" is the required field. --)
	// (-- api-linter: core::0131::http-uri-name=disabled
	//     aip.dev/not-precedent: No "name" is used as key. --)
	GetBridgePort(ctx context.Context, in *GetBridgePortRequest, opts ...grpc.CallOption) (*BridgePort, error)
	// Delete a BridgePort
	// (-- api-linter: core::0135::method-signature=disabled
	//     aip.dev/not-precedent: "vport_id" is the key. --)
	// (-- api-linter: client-libraries::4232::required-fields=disabled
	//     aip.dev/not-precedent: "vport_id" is the required field. --)
	// (-- api-linter: core::0135::http-uri-name=disabled
	//     aip.dev/not-precedent: The "name" is not used as key. --)
	DeleteBridgePort(ctx context.Context, in *DeleteBridgePortRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type bridgePortServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBridgePortServiceClient(cc grpc.ClientConnInterface) BridgePortServiceClient {
	return &bridgePortServiceClient{cc}
}

func (c *bridgePortServiceClient) CreateBridgePort(ctx context.Context, in *CreateBridgePortRequest, opts ...grpc.CallOption) (*BridgePort, error) {
	out := new(BridgePort)
	err := c.cc.Invoke(ctx, "/opi_api.network.evpn_gw.v1alpha1.BridgePortService/CreateBridgePort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bridgePortServiceClient) ListBridgePorts(ctx context.Context, in *ListBridgePortsRequest, opts ...grpc.CallOption) (*ListBridgePortsResponse, error) {
	out := new(ListBridgePortsResponse)
	err := c.cc.Invoke(ctx, "/opi_api.network.evpn_gw.v1alpha1.BridgePortService/ListBridgePorts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bridgePortServiceClient) GetBridgePort(ctx context.Context, in *GetBridgePortRequest, opts ...grpc.CallOption) (*BridgePort, error) {
	out := new(BridgePort)
	err := c.cc.Invoke(ctx, "/opi_api.network.evpn_gw.v1alpha1.BridgePortService/GetBridgePort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bridgePortServiceClient) DeleteBridgePort(ctx context.Context, in *DeleteBridgePortRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/opi_api.network.evpn_gw.v1alpha1.BridgePortService/DeleteBridgePort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BridgePortServiceServer is the server API for BridgePortService service.
type BridgePortServiceServer interface {
	// Create a BridgePort
	// (-- api-linter: core::0133::method-signature=disabled
	//     aip.dev/not-precedent: The "bridge_port" is top-level resource. --)
	CreateBridgePort(context.Context, *CreateBridgePortRequest) (*BridgePort, error)
	// List BridgePorts
	ListBridgePorts(context.Context, *ListBridgePortsRequest) (*ListBridgePortsResponse, error)
	// Retrieve a BridgePort
	// (-- api-linter: core::0131::method-signature=disabled
	//     aip.dev/not-precedent: "vport_id" is the key. --)
	// (-- api-linter: client-libraries::4232::required-fields=disabled
	//     aip.dev/not-precedent: "vport_id" is the required field. --)
	// (-- api-linter: core::0131::http-uri-name=disabled
	//     aip.dev/not-precedent: No "name" is used as key. --)
	GetBridgePort(context.Context, *GetBridgePortRequest) (*BridgePort, error)
	// Delete a BridgePort
	// (-- api-linter: core::0135::method-signature=disabled
	//     aip.dev/not-precedent: "vport_id" is the key. --)
	// (-- api-linter: client-libraries::4232::required-fields=disabled
	//     aip.dev/not-precedent: "vport_id" is the required field. --)
	// (-- api-linter: core::0135::http-uri-name=disabled
	//     aip.dev/not-precedent: The "name" is not used as key. --)
	DeleteBridgePort(context.Context, *DeleteBridgePortRequest) (*emptypb.Empty, error)
}

// UnimplementedBridgePortServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBridgePortServiceServer struct {
}

func (*UnimplementedBridgePortServiceServer) CreateBridgePort(context.Context, *CreateBridgePortRequest) (*BridgePort, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBridgePort not implemented")
}
func (*UnimplementedBridgePortServiceServer) ListBridgePorts(context.Context, *ListBridgePortsRequest) (*ListBridgePortsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBridgePorts not implemented")
}
func (*UnimplementedBridgePortServiceServer) GetBridgePort(context.Context, *GetBridgePortRequest) (*BridgePort, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBridgePort not implemented")
}
func (*UnimplementedBridgePortServiceServer) DeleteBridgePort(context.Context, *DeleteBridgePortRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBridgePort not implemented")
}

func RegisterBridgePortServiceServer(s *grpc.Server, srv BridgePortServiceServer) {
	s.RegisterService(&_BridgePortService_serviceDesc, srv)
}

func _BridgePortService_CreateBridgePort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBridgePortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgePortServiceServer).CreateBridgePort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.evpn_gw.v1alpha1.BridgePortService/CreateBridgePort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgePortServiceServer).CreateBridgePort(ctx, req.(*CreateBridgePortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BridgePortService_ListBridgePorts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBridgePortsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgePortServiceServer).ListBridgePorts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.evpn_gw.v1alpha1.BridgePortService/ListBridgePorts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgePortServiceServer).ListBridgePorts(ctx, req.(*ListBridgePortsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BridgePortService_GetBridgePort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBridgePortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgePortServiceServer).GetBridgePort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.evpn_gw.v1alpha1.BridgePortService/GetBridgePort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgePortServiceServer).GetBridgePort(ctx, req.(*GetBridgePortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BridgePortService_DeleteBridgePort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBridgePortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgePortServiceServer).DeleteBridgePort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.evpn_gw.v1alpha1.BridgePortService/DeleteBridgePort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgePortServiceServer).DeleteBridgePort(ctx, req.(*DeleteBridgePortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BridgePortService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "opi_api.network.evpn_gw.v1alpha1.BridgePortService",
	HandlerType: (*BridgePortServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBridgePort",
			Handler:    _BridgePortService_CreateBridgePort_Handler,
		},
		{
			MethodName: "ListBridgePorts",
			Handler:    _BridgePortService_ListBridgePorts_Handler,
		},
		{
			MethodName: "GetBridgePort",
			Handler:    _BridgePortService_GetBridgePort_Handler,
		},
		{
			MethodName: "DeleteBridgePort",
			Handler:    _BridgePortService_DeleteBridgePort_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "l2_xpu_infra_mgr.proto",
}
