// SPDX-License-Identifier: Apache-2.0
// Copyright (C) 2023 Nordix Foundation.

// (-- api-linter: core::0132::request-parent-required=disabled
//     aip.dev/not-precedent: All the resources are top level. --)
// (-- api-linter: core::0133::request-parent-required=disabled
//     aip.dev/not-precedent: All the resources are top level. --)
// (-- api-linter: core::0133::http-uri-parent=disabled
//     aip.dev/not-precedent: All resources are top-level. --)

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: l3_xpu_infra_mgr.proto

package _go

import (
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Vrf structure
type Vrf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key, also used as name of the Linux vrf device (max 9 chars)
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// VXLAN VNI for L3 EVPN. Also used as EVPN route target
	// (-- api-linter: core::0141::forbidden-types=disabled
	//     aip.dev/not-precedent: vni cannot be negative number. --)
	Vni uint32 `protobuf:"varint,2,opt,name=vni,proto3" json:"vni,omitempty"`
	// Linux routing table number (range 1001-3999). Defaults to vni
	// (-- api-linter: core::0141::forbidden-types=disabled
	//     aip.dev/not-precedent: routing_table cannot be negative number. --)
	RoutingTable uint32 `protobuf:"varint,3,opt,name=routing_table,json=routingTable,proto3" json:"routing_table,omitempty"`
	// IPv4 or IPv6 loopback address. Also serves as basis for RD in FRR
	LoopbackIp string `protobuf:"bytes,4,opt,name=loopback_ip,json=loopbackIp,proto3" json:"loopback_ip,omitempty"`
	// IPv4 or IPv6 IP address for the VXLAN TEP
	VtepIp string `protobuf:"bytes,5,opt,name=vtep_ip,json=vtepIp,proto3" json:"vtep_ip,omitempty"`
	// Read-only: Local AS configured for VRF
	// (-- api-linter: core::0141::forbidden-types=disabled
	//     aip.dev/not-precedent: local_as cannot be negative number. --)
	LocalAs uint32 `protobuf:"varint,6,opt,name=local_as,json=localAs,proto3" json:"local_as,omitempty"`
	// Read-only: Route distinguisher chosen by FRR
	Rd string `protobuf:"bytes,7,opt,name=rd,proto3" json:"rd,omitempty"`
	// Read-only: Router MAC address of the VRF
	Rmac string `protobuf:"bytes,8,opt,name=rmac,proto3" json:"rmac,omitempty"`
	// Read-only: List of import RTs chosen by FRR
	ImportRts []string `protobuf:"bytes,9,rep,name=import_rts,json=importRts,proto3" json:"import_rts,omitempty"`
	// Read-only: List of export RTs chosen by FRR
	ExportRts []string `protobuf:"bytes,10,rep,name=export_rts,json=exportRts,proto3" json:"export_rts,omitempty"`
	// Read-only: List of connected LogicalBridges
	// (-- api-linter: core::0141::forbidden-types=disabled
	//     aip.dev/not-precedent: vlan cannot be negative number. --)
	VlanIds []uint32 `protobuf:"varint,11,rep,packed,name=vlan_ids,json=vlanIds,proto3" json:"vlan_ids,omitempty"`
}

func (x *Vrf) Reset() {
	*x = Vrf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_l3_xpu_infra_mgr_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vrf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vrf) ProtoMessage() {}

func (x *Vrf) ProtoReflect() protoreflect.Message {
	mi := &file_l3_xpu_infra_mgr_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vrf.ProtoReflect.Descriptor instead.
func (*Vrf) Descriptor() ([]byte, []int) {
	return file_l3_xpu_infra_mgr_proto_rawDescGZIP(), []int{0}
}

func (x *Vrf) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Vrf) GetVni() uint32 {
	if x != nil {
		return x.Vni
	}
	return 0
}

func (x *Vrf) GetRoutingTable() uint32 {
	if x != nil {
		return x.RoutingTable
	}
	return 0
}

func (x *Vrf) GetLoopbackIp() string {
	if x != nil {
		return x.LoopbackIp
	}
	return ""
}

func (x *Vrf) GetVtepIp() string {
	if x != nil {
		return x.VtepIp
	}
	return ""
}

func (x *Vrf) GetLocalAs() uint32 {
	if x != nil {
		return x.LocalAs
	}
	return 0
}

func (x *Vrf) GetRd() string {
	if x != nil {
		return x.Rd
	}
	return ""
}

func (x *Vrf) GetRmac() string {
	if x != nil {
		return x.Rmac
	}
	return ""
}

func (x *Vrf) GetImportRts() []string {
	if x != nil {
		return x.ImportRts
	}
	return nil
}

func (x *Vrf) GetExportRts() []string {
	if x != nil {
		return x.ExportRts
	}
	return nil
}

func (x *Vrf) GetVlanIds() []uint32 {
	if x != nil {
		return x.VlanIds
	}
	return nil
}

// CreateVrfRequest structure
type CreateVrfRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The vrf to create
	Vrf *Vrf `protobuf:"bytes,1,opt,name=vrf,proto3" json:"vrf,omitempty"`
}

func (x *CreateVrfRequest) Reset() {
	*x = CreateVrfRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_l3_xpu_infra_mgr_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVrfRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVrfRequest) ProtoMessage() {}

func (x *CreateVrfRequest) ProtoReflect() protoreflect.Message {
	mi := &file_l3_xpu_infra_mgr_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVrfRequest.ProtoReflect.Descriptor instead.
func (*CreateVrfRequest) Descriptor() ([]byte, []int) {
	return file_l3_xpu_infra_mgr_proto_rawDescGZIP(), []int{1}
}

func (x *CreateVrfRequest) GetVrf() *Vrf {
	if x != nil {
		return x.Vrf
	}
	return nil
}

// ListVrfsRequest structure
type ListVrfsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// page size of list request
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// page token of list request
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListVrfsRequest) Reset() {
	*x = ListVrfsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_l3_xpu_infra_mgr_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVrfsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVrfsRequest) ProtoMessage() {}

func (x *ListVrfsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_l3_xpu_infra_mgr_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVrfsRequest.ProtoReflect.Descriptor instead.
func (*ListVrfsRequest) Descriptor() ([]byte, []int) {
	return file_l3_xpu_infra_mgr_proto_rawDescGZIP(), []int{2}
}

func (x *ListVrfsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListVrfsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// ListVrfsResponse structure
type ListVrfsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of all the bridge ports
	Vrfs []*Vrf `protobuf:"bytes,1,rep,name=vrfs,proto3" json:"vrfs,omitempty"`
	// Next page token of list response
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListVrfsResponse) Reset() {
	*x = ListVrfsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_l3_xpu_infra_mgr_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVrfsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVrfsResponse) ProtoMessage() {}

func (x *ListVrfsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_l3_xpu_infra_mgr_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVrfsResponse.ProtoReflect.Descriptor instead.
func (*ListVrfsResponse) Descriptor() ([]byte, []int) {
	return file_l3_xpu_infra_mgr_proto_rawDescGZIP(), []int{3}
}

func (x *ListVrfsResponse) GetVrfs() []*Vrf {
	if x != nil {
		return x.Vrfs
	}
	return nil
}

func (x *ListVrfsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// GetVrfRequest structure
type GetVrfRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the vrf to retrieve
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetVrfRequest) Reset() {
	*x = GetVrfRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_l3_xpu_infra_mgr_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVrfRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVrfRequest) ProtoMessage() {}

func (x *GetVrfRequest) ProtoReflect() protoreflect.Message {
	mi := &file_l3_xpu_infra_mgr_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVrfRequest.ProtoReflect.Descriptor instead.
func (*GetVrfRequest) Descriptor() ([]byte, []int) {
	return file_l3_xpu_infra_mgr_proto_rawDescGZIP(), []int{4}
}

func (x *GetVrfRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// DeleteVrfRequest structure
type DeleteVrfRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the vrf to delete
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteVrfRequest) Reset() {
	*x = DeleteVrfRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_l3_xpu_infra_mgr_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteVrfRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVrfRequest) ProtoMessage() {}

func (x *DeleteVrfRequest) ProtoReflect() protoreflect.Message {
	mi := &file_l3_xpu_infra_mgr_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVrfRequest.ProtoReflect.Descriptor instead.
func (*DeleteVrfRequest) Descriptor() ([]byte, []int) {
	return file_l3_xpu_infra_mgr_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteVrfRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// IpAddressMasklen structure
type IpAddressMasklen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IP address
	IpAddr string `protobuf:"bytes,1,opt,name=ip_addr,json=ipAddr,proto3" json:"ip_addr,omitempty"`
	// Length of the subnet prefix mask
	// (-- api-linter: core::0141::forbidden-types=disabled
	//     aip.dev/not-precedent: subnet mask cannot be negative number. --)
	Len uint32 `protobuf:"varint,2,opt,name=len,proto3" json:"len,omitempty"`
}

func (x *IpAddressMasklen) Reset() {
	*x = IpAddressMasklen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_l3_xpu_infra_mgr_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpAddressMasklen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpAddressMasklen) ProtoMessage() {}

func (x *IpAddressMasklen) ProtoReflect() protoreflect.Message {
	mi := &file_l3_xpu_infra_mgr_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpAddressMasklen.ProtoReflect.Descriptor instead.
func (*IpAddressMasklen) Descriptor() ([]byte, []int) {
	return file_l3_xpu_infra_mgr_proto_rawDescGZIP(), []int{6}
}

func (x *IpAddressMasklen) GetIpAddr() string {
	if x != nil {
		return x.IpAddr
	}
	return ""
}

func (x *IpAddressMasklen) GetLen() uint32 {
	if x != nil {
		return x.Len
	}
	return 0
}

// (-- api-linter: core::0123::resource-name-field=disabled
//     aip.dev/not-precedent: The "vrf", "vlan_id" are used for unique identification
//     of the svi object. --)
//Svi structure
type Svi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the VRF
	Vrf string `protobuf:"bytes,1,opt,name=vrf,proto3" json:"vrf,omitempty"`
	// Key of the LogicalBridge
	// (-- api-linter: core::0141::forbidden-types=disabled
	//     aip.dev/not-precedent: vlan cannot be negative number. --)
	VlanId uint32 `protobuf:"varint,2,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
	// Use "aa:bb:cc:dd:ee:ff" format. Randomly assigned if not specified
	MacAddress string `protobuf:"bytes,3,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	// The GW IP addresses with masks assigned to the SVI
	GwIp []*IpAddressMasklen `protobuf:"bytes,4,rep,name=gw_ip,json=gwIp,proto3" json:"gw_ip,omitempty"`
	// Set to true to enable BGP peering with VRF on SVI
	EnableBgp bool `protobuf:"varint,5,opt,name=enable_bgp,json=enableBgp,proto3" json:"enable_bgp,omitempty"`
	// Conditional: The remote AS used by BGP speakers on LB (1-65535)
	// (-- api-linter: core::0141::forbidden-types=disabled
	//     aip.dev/not-precedent: remote_as cannot be negative number. --)
	RemoteAs uint32 `protobuf:"varint,6,opt,name=remote_as,json=remoteAs,proto3" json:"remote_as,omitempty"`
}

func (x *Svi) Reset() {
	*x = Svi{}
	if protoimpl.UnsafeEnabled {
		mi := &file_l3_xpu_infra_mgr_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Svi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Svi) ProtoMessage() {}

func (x *Svi) ProtoReflect() protoreflect.Message {
	mi := &file_l3_xpu_infra_mgr_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Svi.ProtoReflect.Descriptor instead.
func (*Svi) Descriptor() ([]byte, []int) {
	return file_l3_xpu_infra_mgr_proto_rawDescGZIP(), []int{7}
}

func (x *Svi) GetVrf() string {
	if x != nil {
		return x.Vrf
	}
	return ""
}

func (x *Svi) GetVlanId() uint32 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

func (x *Svi) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *Svi) GetGwIp() []*IpAddressMasklen {
	if x != nil {
		return x.GwIp
	}
	return nil
}

func (x *Svi) GetEnableBgp() bool {
	if x != nil {
		return x.EnableBgp
	}
	return false
}

func (x *Svi) GetRemoteAs() uint32 {
	if x != nil {
		return x.RemoteAs
	}
	return 0
}

// CreateSviRequest structure
type CreateSviRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Svi to create
	Svi *Svi `protobuf:"bytes,1,opt,name=svi,proto3" json:"svi,omitempty"`
}

func (x *CreateSviRequest) Reset() {
	*x = CreateSviRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_l3_xpu_infra_mgr_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSviRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSviRequest) ProtoMessage() {}

func (x *CreateSviRequest) ProtoReflect() protoreflect.Message {
	mi := &file_l3_xpu_infra_mgr_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSviRequest.ProtoReflect.Descriptor instead.
func (*CreateSviRequest) Descriptor() ([]byte, []int) {
	return file_l3_xpu_infra_mgr_proto_rawDescGZIP(), []int{8}
}

func (x *CreateSviRequest) GetSvi() *Svi {
	if x != nil {
		return x.Svi
	}
	return nil
}

// ListSvisRequest structure
type ListSvisRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// page size of list request
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// page token of list request
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListSvisRequest) Reset() {
	*x = ListSvisRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_l3_xpu_infra_mgr_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSvisRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSvisRequest) ProtoMessage() {}

func (x *ListSvisRequest) ProtoReflect() protoreflect.Message {
	mi := &file_l3_xpu_infra_mgr_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSvisRequest.ProtoReflect.Descriptor instead.
func (*ListSvisRequest) Descriptor() ([]byte, []int) {
	return file_l3_xpu_infra_mgr_proto_rawDescGZIP(), []int{9}
}

func (x *ListSvisRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListSvisRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// ListSvisResponse structure
type ListSvisResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of all the svis
	Svis []*Svi `protobuf:"bytes,1,rep,name=svis,proto3" json:"svis,omitempty"`
	// Next page token of list response
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListSvisResponse) Reset() {
	*x = ListSvisResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_l3_xpu_infra_mgr_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSvisResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSvisResponse) ProtoMessage() {}

func (x *ListSvisResponse) ProtoReflect() protoreflect.Message {
	mi := &file_l3_xpu_infra_mgr_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSvisResponse.ProtoReflect.Descriptor instead.
func (*ListSvisResponse) Descriptor() ([]byte, []int) {
	return file_l3_xpu_infra_mgr_proto_rawDescGZIP(), []int{10}
}

func (x *ListSvisResponse) GetSvis() []*Svi {
	if x != nil {
		return x.Svis
	}
	return nil
}

func (x *ListSvisResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

//(-- api-linter: core::0135::request-unknown-fields=disabled
//     aip.dev/not-precedent: We really need "vrf", "vlan_id" because are used as keys
//     for the retrieve operation. --)
// (-- api-linter: core::0131::request-name-required=disabled
//     aip.dev/not-precedent: We really need "vrf", "vlan_id" because are used as keys
//     for the retrieve operation. --)
// (-- api-linter: core::0131::request-unknown-fields=disabled
//     aip.dev/not-precedent: We really need "vrf", "vlan_id" because are used as keys
//     for the retrieve operation. --)
// GetSviRequest structure
type GetSviRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the associated vrf
	Vrf string `protobuf:"bytes,1,opt,name=vrf,proto3" json:"vrf,omitempty"`
	// The vlan id of the associated logical bridge
	// (-- api-linter: core::0141::forbidden-types=disabled
	//     aip.dev/not-precedent: vlan cannot be negative number. --)
	VlanId uint32 `protobuf:"varint,2,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
}

func (x *GetSviRequest) Reset() {
	*x = GetSviRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_l3_xpu_infra_mgr_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSviRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSviRequest) ProtoMessage() {}

func (x *GetSviRequest) ProtoReflect() protoreflect.Message {
	mi := &file_l3_xpu_infra_mgr_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSviRequest.ProtoReflect.Descriptor instead.
func (*GetSviRequest) Descriptor() ([]byte, []int) {
	return file_l3_xpu_infra_mgr_proto_rawDescGZIP(), []int{11}
}

func (x *GetSviRequest) GetVrf() string {
	if x != nil {
		return x.Vrf
	}
	return ""
}

func (x *GetSviRequest) GetVlanId() uint32 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

// (-- api-linter: core::0135::request-unknown-fields=disabled
//     aip.dev/not-precedent: We really need "vrf", "vlan_id" because are used as keys
//     for deletion. --)
// (-- api-linter: core::0135::request-name-required=disabled
//     aip.dev/not-precedent: The "vrf", "vlan_id" keys are used for deletion. --)
// DeleteSviRequest structure
type DeleteSviRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the associated vrf
	Vrf string `protobuf:"bytes,1,opt,name=vrf,proto3" json:"vrf,omitempty"`
	// The vlan id of the associated logical bridge
	// (-- api-linter: core::0141::forbidden-types=disabled
	//     aip.dev/not-precedent: vlan cannot be negative number. --)
	VlanId uint32 `protobuf:"varint,2,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
}

func (x *DeleteSviRequest) Reset() {
	*x = DeleteSviRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_l3_xpu_infra_mgr_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSviRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSviRequest) ProtoMessage() {}

func (x *DeleteSviRequest) ProtoReflect() protoreflect.Message {
	mi := &file_l3_xpu_infra_mgr_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSviRequest.ProtoReflect.Descriptor instead.
func (*DeleteSviRequest) Descriptor() ([]byte, []int) {
	return file_l3_xpu_infra_mgr_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteSviRequest) GetVrf() string {
	if x != nil {
		return x.Vrf
	}
	return ""
}

func (x *DeleteSviRequest) GetVlanId() uint32 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

var File_l3_xpu_infra_mgr_proto protoreflect.FileDescriptor

var file_l3_xpu_infra_mgr_proto_rawDesc = []byte{
	0x0a, 0x16, 0x6c, 0x33, 0x5f, 0x78, 0x70, 0x75, 0x5f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x6d,
	0x67, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x20, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67,
	0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe3, 0x02, 0x0a, 0x03, 0x56,
	0x72, 0x66, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x76,
	0x6e, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x76, 0x6e, 0x69, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x69,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x6c, 0x6f,
	0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x49, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x74, 0x65, 0x70,
	0x5f, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x74, 0x65, 0x70, 0x49,
	0x70, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x6d, 0x61, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6d, 0x61, 0x63,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x74, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x74, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x74, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x74, 0x73, 0x12, 0x19,
	0x0a, 0x08, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x73, 0x3a, 0x35, 0xea, 0x41, 0x32, 0x0a, 0x24,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x56, 0x72, 0x66, 0x12, 0x0a, 0x76, 0x72, 0x66, 0x73, 0x2f, 0x7b, 0x76, 0x72, 0x66, 0x7d,
	0x22, 0x50, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x72, 0x66, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x03, 0x76, 0x72, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x72, 0x66, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x76,
	0x72, 0x66, 0x22, 0x4d, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x72, 0x66, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x75, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x72, 0x66, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x76, 0x72, 0x66, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x72, 0x66, 0x52, 0x04, 0x76, 0x72, 0x66, 0x73,
	0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x51, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x56,
	0x72, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x26, 0x0a,
	0x24, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2f, 0x56, 0x72, 0x66, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x54, 0x0a, 0x10, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x72, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x40, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0xe0,
	0x41, 0x02, 0xfa, 0x41, 0x26, 0x0a, 0x24, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x56, 0x72, 0x66, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x3d, 0x0a, 0x10, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x61,
	0x73, 0x6b, 0x6c, 0x65, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x12, 0x10,
	0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6c, 0x65, 0x6e,
	0x22, 0xa1, 0x02, 0x0a, 0x03, 0x53, 0x76, 0x69, 0x12, 0x15, 0x0a, 0x03, 0x76, 0x72, 0x66, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x76, 0x72, 0x66, 0x12,
	0x1c, 0x0a, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x4c, 0x0a, 0x05, 0x67, 0x77, 0x5f, 0x69, 0x70, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4d,
	0x61, 0x73, 0x6b, 0x6c, 0x65, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x67, 0x77, 0x49,
	0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x67, 0x70, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x67, 0x70,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x73, 0x3a, 0x35, 0xea,
	0x41, 0x32, 0x0a, 0x24, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x53, 0x76, 0x69, 0x12, 0x0a, 0x73, 0x76, 0x69, 0x73, 0x2f, 0x7b,
	0x73, 0x76, 0x69, 0x7d, 0x22, 0x50, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x76,
	0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x03, 0x73, 0x76, 0x69, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x76, 0x69, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x03, 0x73, 0x76, 0x69, 0x22, 0x4d, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x76,
	0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x75, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x76, 0x69,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x73, 0x76, 0x69,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67,
	0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x76, 0x69, 0x52, 0x04,
	0x73, 0x76, 0x69, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e,
	0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x44, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x53, 0x76, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a,
	0x03, 0x76, 0x72, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x03, 0x76, 0x72, 0x66, 0x12, 0x1c, 0x0a, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x76, 0x6c, 0x61, 0x6e,
	0x49, 0x64, 0x22, 0x47, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x76, 0x69, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x03, 0x76, 0x72, 0x66, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x76, 0x72, 0x66, 0x12, 0x1c, 0x0a,
	0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x06, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x32, 0x98, 0x04, 0x0a, 0x0a,
	0x56, 0x72, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x09, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x72, 0x66, 0x12, 0x32, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f,
	0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x56, 0x72, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65,
	0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x56, 0x72, 0x66, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x22, 0x08, 0x2f, 0x76, 0x31,
	0x2f, 0x76, 0x72, 0x66, 0x73, 0x3a, 0x03, 0x76, 0x72, 0x66, 0xda, 0x41, 0x03, 0x76, 0x72, 0x66,
	0x12, 0x83, 0x01, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x72, 0x66, 0x73, 0x12, 0x31, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x72, 0x66, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x32, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x72, 0x66, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x10, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0a, 0x12, 0x08, 0x2f, 0x76,
	0x31, 0x2f, 0x76, 0x72, 0x66, 0x73, 0x12, 0x82, 0x01, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x56, 0x72,
	0x66, 0x12, 0x2f, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x72, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x72, 0x66, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x13, 0x12, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x76, 0x72, 0x66,
	0x73, 0x2f, 0x2a, 0x7d, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x79, 0x0a, 0x09, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x72, 0x66, 0x12, 0x32, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f,
	0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x56, 0x72, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x2a, 0x11, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x76, 0x72, 0x66, 0x73, 0x2f, 0x2a, 0x7d, 0xda,
	0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0xb7, 0x04, 0x0a, 0x0a, 0x53, 0x76, 0x69, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x76, 0x69, 0x12, 0x32, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x76, 0x69,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67,
	0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x76, 0x69, 0x22, 0x1b,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x22, 0x08, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x76, 0x69, 0x73,
	0x3a, 0x03, 0x73, 0x76, 0x69, 0xda, 0x41, 0x03, 0x73, 0x76, 0x69, 0x12, 0x83, 0x01, 0x0a, 0x08,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x76, 0x69, 0x73, 0x12, 0x31, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f,
	0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x76, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76,
	0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x76, 0x69, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x10, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0a, 0x12, 0x08, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x76, 0x69,
	0x73, 0x12, 0x91, 0x01, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x53, 0x76, 0x69, 0x12, 0x2f, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65,
	0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x76, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x53, 0x76, 0x69, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x76, 0x72, 0x66, 0x26, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x3d, 0x73,
	0x76, 0x69, 0x73, 0x2f, 0x2a, 0x7d, 0xda, 0x41, 0x0c, 0x76, 0x72, 0x66, 0x2c, 0x20, 0x76, 0x6c,
	0x61, 0x6e, 0x5f, 0x69, 0x64, 0x12, 0x88, 0x01, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x76, 0x69, 0x12, 0x32, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x76, 0x69,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x2a, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x76, 0x72,
	0x66, 0x26, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x3d, 0x73, 0x76, 0x69, 0x73, 0x2f, 0x2a,
	0x7d, 0xda, 0x41, 0x0c, 0x76, 0x72, 0x66, 0x2c, 0x20, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64,
	0x42, 0x77, 0x0a, 0x20, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x42, 0x12, 0x4c, 0x33, 0x58, 0x70, 0x75, 0x49, 0x6e, 0x66, 0x72, 0x61,
	0x4d, 0x67, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3d, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x2f, 0x6f, 0x70, 0x69, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2f, 0x65, 0x76, 0x70, 0x6e, 0x2d, 0x67, 0x77, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_l3_xpu_infra_mgr_proto_rawDescOnce sync.Once
	file_l3_xpu_infra_mgr_proto_rawDescData = file_l3_xpu_infra_mgr_proto_rawDesc
)

func file_l3_xpu_infra_mgr_proto_rawDescGZIP() []byte {
	file_l3_xpu_infra_mgr_proto_rawDescOnce.Do(func() {
		file_l3_xpu_infra_mgr_proto_rawDescData = protoimpl.X.CompressGZIP(file_l3_xpu_infra_mgr_proto_rawDescData)
	})
	return file_l3_xpu_infra_mgr_proto_rawDescData
}

var file_l3_xpu_infra_mgr_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_l3_xpu_infra_mgr_proto_goTypes = []interface{}{
	(*Vrf)(nil),              // 0: opi_api.network.evpn_gw.v1alpha1.Vrf
	(*CreateVrfRequest)(nil), // 1: opi_api.network.evpn_gw.v1alpha1.CreateVrfRequest
	(*ListVrfsRequest)(nil),  // 2: opi_api.network.evpn_gw.v1alpha1.ListVrfsRequest
	(*ListVrfsResponse)(nil), // 3: opi_api.network.evpn_gw.v1alpha1.ListVrfsResponse
	(*GetVrfRequest)(nil),    // 4: opi_api.network.evpn_gw.v1alpha1.GetVrfRequest
	(*DeleteVrfRequest)(nil), // 5: opi_api.network.evpn_gw.v1alpha1.DeleteVrfRequest
	(*IpAddressMasklen)(nil), // 6: opi_api.network.evpn_gw.v1alpha1.IpAddressMasklen
	(*Svi)(nil),              // 7: opi_api.network.evpn_gw.v1alpha1.Svi
	(*CreateSviRequest)(nil), // 8: opi_api.network.evpn_gw.v1alpha1.CreateSviRequest
	(*ListSvisRequest)(nil),  // 9: opi_api.network.evpn_gw.v1alpha1.ListSvisRequest
	(*ListSvisResponse)(nil), // 10: opi_api.network.evpn_gw.v1alpha1.ListSvisResponse
	(*GetSviRequest)(nil),    // 11: opi_api.network.evpn_gw.v1alpha1.GetSviRequest
	(*DeleteSviRequest)(nil), // 12: opi_api.network.evpn_gw.v1alpha1.DeleteSviRequest
	(*emptypb.Empty)(nil),    // 13: google.protobuf.Empty
}
var file_l3_xpu_infra_mgr_proto_depIdxs = []int32{
	0,  // 0: opi_api.network.evpn_gw.v1alpha1.CreateVrfRequest.vrf:type_name -> opi_api.network.evpn_gw.v1alpha1.Vrf
	0,  // 1: opi_api.network.evpn_gw.v1alpha1.ListVrfsResponse.vrfs:type_name -> opi_api.network.evpn_gw.v1alpha1.Vrf
	6,  // 2: opi_api.network.evpn_gw.v1alpha1.Svi.gw_ip:type_name -> opi_api.network.evpn_gw.v1alpha1.IpAddressMasklen
	7,  // 3: opi_api.network.evpn_gw.v1alpha1.CreateSviRequest.svi:type_name -> opi_api.network.evpn_gw.v1alpha1.Svi
	7,  // 4: opi_api.network.evpn_gw.v1alpha1.ListSvisResponse.svis:type_name -> opi_api.network.evpn_gw.v1alpha1.Svi
	1,  // 5: opi_api.network.evpn_gw.v1alpha1.VrfService.CreateVrf:input_type -> opi_api.network.evpn_gw.v1alpha1.CreateVrfRequest
	2,  // 6: opi_api.network.evpn_gw.v1alpha1.VrfService.ListVrfs:input_type -> opi_api.network.evpn_gw.v1alpha1.ListVrfsRequest
	4,  // 7: opi_api.network.evpn_gw.v1alpha1.VrfService.GetVrf:input_type -> opi_api.network.evpn_gw.v1alpha1.GetVrfRequest
	5,  // 8: opi_api.network.evpn_gw.v1alpha1.VrfService.DeleteVrf:input_type -> opi_api.network.evpn_gw.v1alpha1.DeleteVrfRequest
	8,  // 9: opi_api.network.evpn_gw.v1alpha1.SviService.CreateSvi:input_type -> opi_api.network.evpn_gw.v1alpha1.CreateSviRequest
	9,  // 10: opi_api.network.evpn_gw.v1alpha1.SviService.ListSvis:input_type -> opi_api.network.evpn_gw.v1alpha1.ListSvisRequest
	11, // 11: opi_api.network.evpn_gw.v1alpha1.SviService.GetSvi:input_type -> opi_api.network.evpn_gw.v1alpha1.GetSviRequest
	12, // 12: opi_api.network.evpn_gw.v1alpha1.SviService.DeleteSvi:input_type -> opi_api.network.evpn_gw.v1alpha1.DeleteSviRequest
	0,  // 13: opi_api.network.evpn_gw.v1alpha1.VrfService.CreateVrf:output_type -> opi_api.network.evpn_gw.v1alpha1.Vrf
	3,  // 14: opi_api.network.evpn_gw.v1alpha1.VrfService.ListVrfs:output_type -> opi_api.network.evpn_gw.v1alpha1.ListVrfsResponse
	0,  // 15: opi_api.network.evpn_gw.v1alpha1.VrfService.GetVrf:output_type -> opi_api.network.evpn_gw.v1alpha1.Vrf
	13, // 16: opi_api.network.evpn_gw.v1alpha1.VrfService.DeleteVrf:output_type -> google.protobuf.Empty
	7,  // 17: opi_api.network.evpn_gw.v1alpha1.SviService.CreateSvi:output_type -> opi_api.network.evpn_gw.v1alpha1.Svi
	10, // 18: opi_api.network.evpn_gw.v1alpha1.SviService.ListSvis:output_type -> opi_api.network.evpn_gw.v1alpha1.ListSvisResponse
	7,  // 19: opi_api.network.evpn_gw.v1alpha1.SviService.GetSvi:output_type -> opi_api.network.evpn_gw.v1alpha1.Svi
	13, // 20: opi_api.network.evpn_gw.v1alpha1.SviService.DeleteSvi:output_type -> google.protobuf.Empty
	13, // [13:21] is the sub-list for method output_type
	5,  // [5:13] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_l3_xpu_infra_mgr_proto_init() }
func file_l3_xpu_infra_mgr_proto_init() {
	if File_l3_xpu_infra_mgr_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_l3_xpu_infra_mgr_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vrf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_l3_xpu_infra_mgr_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVrfRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_l3_xpu_infra_mgr_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListVrfsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_l3_xpu_infra_mgr_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListVrfsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_l3_xpu_infra_mgr_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVrfRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_l3_xpu_infra_mgr_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteVrfRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_l3_xpu_infra_mgr_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpAddressMasklen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_l3_xpu_infra_mgr_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Svi); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_l3_xpu_infra_mgr_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSviRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_l3_xpu_infra_mgr_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSvisRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_l3_xpu_infra_mgr_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSvisResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_l3_xpu_infra_mgr_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSviRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_l3_xpu_infra_mgr_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSviRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_l3_xpu_infra_mgr_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_l3_xpu_infra_mgr_proto_goTypes,
		DependencyIndexes: file_l3_xpu_infra_mgr_proto_depIdxs,
		MessageInfos:      file_l3_xpu_infra_mgr_proto_msgTypes,
	}.Build()
	File_l3_xpu_infra_mgr_proto = out.File
	file_l3_xpu_infra_mgr_proto_rawDesc = nil
	file_l3_xpu_infra_mgr_proto_goTypes = nil
	file_l3_xpu_infra_mgr_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// VrfServiceClient is the client API for VrfService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VrfServiceClient interface {
	// Create a Vrf
	CreateVrf(ctx context.Context, in *CreateVrfRequest, opts ...grpc.CallOption) (*Vrf, error)
	// List Vrfs
	ListVrfs(ctx context.Context, in *ListVrfsRequest, opts ...grpc.CallOption) (*ListVrfsResponse, error)
	// Retrieve a Vrf
	GetVrf(ctx context.Context, in *GetVrfRequest, opts ...grpc.CallOption) (*Vrf, error)
	// Delete a Vrf
	DeleteVrf(ctx context.Context, in *DeleteVrfRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type vrfServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVrfServiceClient(cc grpc.ClientConnInterface) VrfServiceClient {
	return &vrfServiceClient{cc}
}

func (c *vrfServiceClient) CreateVrf(ctx context.Context, in *CreateVrfRequest, opts ...grpc.CallOption) (*Vrf, error) {
	out := new(Vrf)
	err := c.cc.Invoke(ctx, "/opi_api.network.evpn_gw.v1alpha1.VrfService/CreateVrf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vrfServiceClient) ListVrfs(ctx context.Context, in *ListVrfsRequest, opts ...grpc.CallOption) (*ListVrfsResponse, error) {
	out := new(ListVrfsResponse)
	err := c.cc.Invoke(ctx, "/opi_api.network.evpn_gw.v1alpha1.VrfService/ListVrfs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vrfServiceClient) GetVrf(ctx context.Context, in *GetVrfRequest, opts ...grpc.CallOption) (*Vrf, error) {
	out := new(Vrf)
	err := c.cc.Invoke(ctx, "/opi_api.network.evpn_gw.v1alpha1.VrfService/GetVrf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vrfServiceClient) DeleteVrf(ctx context.Context, in *DeleteVrfRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/opi_api.network.evpn_gw.v1alpha1.VrfService/DeleteVrf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VrfServiceServer is the server API for VrfService service.
type VrfServiceServer interface {
	// Create a Vrf
	CreateVrf(context.Context, *CreateVrfRequest) (*Vrf, error)
	// List Vrfs
	ListVrfs(context.Context, *ListVrfsRequest) (*ListVrfsResponse, error)
	// Retrieve a Vrf
	GetVrf(context.Context, *GetVrfRequest) (*Vrf, error)
	// Delete a Vrf
	DeleteVrf(context.Context, *DeleteVrfRequest) (*emptypb.Empty, error)
}

// UnimplementedVrfServiceServer can be embedded to have forward compatible implementations.
type UnimplementedVrfServiceServer struct {
}

func (*UnimplementedVrfServiceServer) CreateVrf(context.Context, *CreateVrfRequest) (*Vrf, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVrf not implemented")
}
func (*UnimplementedVrfServiceServer) ListVrfs(context.Context, *ListVrfsRequest) (*ListVrfsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVrfs not implemented")
}
func (*UnimplementedVrfServiceServer) GetVrf(context.Context, *GetVrfRequest) (*Vrf, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVrf not implemented")
}
func (*UnimplementedVrfServiceServer) DeleteVrf(context.Context, *DeleteVrfRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVrf not implemented")
}

func RegisterVrfServiceServer(s *grpc.Server, srv VrfServiceServer) {
	s.RegisterService(&_VrfService_serviceDesc, srv)
}

func _VrfService_CreateVrf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVrfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VrfServiceServer).CreateVrf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.evpn_gw.v1alpha1.VrfService/CreateVrf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VrfServiceServer).CreateVrf(ctx, req.(*CreateVrfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VrfService_ListVrfs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVrfsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VrfServiceServer).ListVrfs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.evpn_gw.v1alpha1.VrfService/ListVrfs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VrfServiceServer).ListVrfs(ctx, req.(*ListVrfsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VrfService_GetVrf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVrfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VrfServiceServer).GetVrf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.evpn_gw.v1alpha1.VrfService/GetVrf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VrfServiceServer).GetVrf(ctx, req.(*GetVrfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VrfService_DeleteVrf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVrfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VrfServiceServer).DeleteVrf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.evpn_gw.v1alpha1.VrfService/DeleteVrf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VrfServiceServer).DeleteVrf(ctx, req.(*DeleteVrfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VrfService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "opi_api.network.evpn_gw.v1alpha1.VrfService",
	HandlerType: (*VrfServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVrf",
			Handler:    _VrfService_CreateVrf_Handler,
		},
		{
			MethodName: "ListVrfs",
			Handler:    _VrfService_ListVrfs_Handler,
		},
		{
			MethodName: "GetVrf",
			Handler:    _VrfService_GetVrf_Handler,
		},
		{
			MethodName: "DeleteVrf",
			Handler:    _VrfService_DeleteVrf_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "l3_xpu_infra_mgr.proto",
}

// SviServiceClient is the client API for SviService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SviServiceClient interface {
	// Create a Svi
	CreateSvi(ctx context.Context, in *CreateSviRequest, opts ...grpc.CallOption) (*Svi, error)
	// List Svis
	ListSvis(ctx context.Context, in *ListSvisRequest, opts ...grpc.CallOption) (*ListSvisResponse, error)
	// Retrieve a Svi
	// (-- api-linter: core::0131::method-signature=disabled
	//     aip.dev/not-precedent: "vrf" and "vlan_id" are the keys. --)
	// (-- api-linter: client-libraries::4232::required-fields=disabled
	//     aip.dev/not-precedent: vrf" and "vlan_id" are the required fields. --)
	// (-- api-linter: core::0131::http-uri-name=disabled
	//     aip.dev/not-precedent: No "name" is used as key. --)
	GetSvi(ctx context.Context, in *GetSviRequest, opts ...grpc.CallOption) (*Svi, error)
	// Delete a Svi
	// (-- api-linter: core::0135::method-signature=disabled
	//     aip.dev/not-precedent: "vrf" and "vlan_id" are the keys. --)
	// (-- api-linter: client-libraries::4232::required-fields=disabled
	//     aip.dev/not-precedent: "vrf" and "vlan_id" are the required fields. --)
	// (-- api-linter: core::0135::http-uri-name=disabled
	//     aip.dev/not-precedent: The "name" is not used as key. --)
	DeleteSvi(ctx context.Context, in *DeleteSviRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type sviServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSviServiceClient(cc grpc.ClientConnInterface) SviServiceClient {
	return &sviServiceClient{cc}
}

func (c *sviServiceClient) CreateSvi(ctx context.Context, in *CreateSviRequest, opts ...grpc.CallOption) (*Svi, error) {
	out := new(Svi)
	err := c.cc.Invoke(ctx, "/opi_api.network.evpn_gw.v1alpha1.SviService/CreateSvi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sviServiceClient) ListSvis(ctx context.Context, in *ListSvisRequest, opts ...grpc.CallOption) (*ListSvisResponse, error) {
	out := new(ListSvisResponse)
	err := c.cc.Invoke(ctx, "/opi_api.network.evpn_gw.v1alpha1.SviService/ListSvis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sviServiceClient) GetSvi(ctx context.Context, in *GetSviRequest, opts ...grpc.CallOption) (*Svi, error) {
	out := new(Svi)
	err := c.cc.Invoke(ctx, "/opi_api.network.evpn_gw.v1alpha1.SviService/GetSvi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sviServiceClient) DeleteSvi(ctx context.Context, in *DeleteSviRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/opi_api.network.evpn_gw.v1alpha1.SviService/DeleteSvi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SviServiceServer is the server API for SviService service.
type SviServiceServer interface {
	// Create a Svi
	CreateSvi(context.Context, *CreateSviRequest) (*Svi, error)
	// List Svis
	ListSvis(context.Context, *ListSvisRequest) (*ListSvisResponse, error)
	// Retrieve a Svi
	// (-- api-linter: core::0131::method-signature=disabled
	//     aip.dev/not-precedent: "vrf" and "vlan_id" are the keys. --)
	// (-- api-linter: client-libraries::4232::required-fields=disabled
	//     aip.dev/not-precedent: vrf" and "vlan_id" are the required fields. --)
	// (-- api-linter: core::0131::http-uri-name=disabled
	//     aip.dev/not-precedent: No "name" is used as key. --)
	GetSvi(context.Context, *GetSviRequest) (*Svi, error)
	// Delete a Svi
	// (-- api-linter: core::0135::method-signature=disabled
	//     aip.dev/not-precedent: "vrf" and "vlan_id" are the keys. --)
	// (-- api-linter: client-libraries::4232::required-fields=disabled
	//     aip.dev/not-precedent: "vrf" and "vlan_id" are the required fields. --)
	// (-- api-linter: core::0135::http-uri-name=disabled
	//     aip.dev/not-precedent: The "name" is not used as key. --)
	DeleteSvi(context.Context, *DeleteSviRequest) (*emptypb.Empty, error)
}

// UnimplementedSviServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSviServiceServer struct {
}

func (*UnimplementedSviServiceServer) CreateSvi(context.Context, *CreateSviRequest) (*Svi, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSvi not implemented")
}
func (*UnimplementedSviServiceServer) ListSvis(context.Context, *ListSvisRequest) (*ListSvisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSvis not implemented")
}
func (*UnimplementedSviServiceServer) GetSvi(context.Context, *GetSviRequest) (*Svi, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSvi not implemented")
}
func (*UnimplementedSviServiceServer) DeleteSvi(context.Context, *DeleteSviRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSvi not implemented")
}

func RegisterSviServiceServer(s *grpc.Server, srv SviServiceServer) {
	s.RegisterService(&_SviService_serviceDesc, srv)
}

func _SviService_CreateSvi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSviRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SviServiceServer).CreateSvi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.evpn_gw.v1alpha1.SviService/CreateSvi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SviServiceServer).CreateSvi(ctx, req.(*CreateSviRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SviService_ListSvis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSvisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SviServiceServer).ListSvis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.evpn_gw.v1alpha1.SviService/ListSvis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SviServiceServer).ListSvis(ctx, req.(*ListSvisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SviService_GetSvi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSviRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SviServiceServer).GetSvi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.evpn_gw.v1alpha1.SviService/GetSvi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SviServiceServer).GetSvi(ctx, req.(*GetSviRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SviService_DeleteSvi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSviRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SviServiceServer).DeleteSvi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.evpn_gw.v1alpha1.SviService/DeleteSvi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SviServiceServer).DeleteSvi(ctx, req.(*DeleteSviRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SviService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "opi_api.network.evpn_gw.v1alpha1.SviService",
	HandlerType: (*SviServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSvi",
			Handler:    _SviService_CreateSvi_Handler,
		},
		{
			MethodName: "ListSvis",
			Handler:    _SviService_ListSvis_Handler,
		},
		{
			MethodName: "GetSvi",
			Handler:    _SviService_GetSvi_Handler,
		},
		{
			MethodName: "DeleteSvi",
			Handler:    _SviService_DeleteSvi_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "l3_xpu_infra_mgr.proto",
}
