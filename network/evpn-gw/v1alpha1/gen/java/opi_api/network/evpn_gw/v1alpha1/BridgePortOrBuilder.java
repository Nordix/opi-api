// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: l2_xpu_infra_mgr.proto

package opi_api.network.evpn_gw.v1alpha1;

public interface BridgePortOrBuilder extends
    // @@protoc_insertion_point(interface_extends:opi_api.network.evpn_gw.v1alpha1.BridgePort)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Free text description
   * </pre>
   *
   * <code>string name = 1;</code>
   * @return The name.
   */
  java.lang.String getName();
  /**
   * <pre>
   * Free text description
   * </pre>
   *
   * <code>string name = 1;</code>
   * @return The bytes for name.
   */
  com.google.protobuf.ByteString
      getNameBytes();

  /**
   * <pre>
   * Key. Read-only. Assigned by the server in CreateBridgePort
   * (-- api-linter: core::0141::forbidden-types=disabled
   *     aip.dev/not-precedent: vport_id cannot be negative number. --)
   * </pre>
   *
   * <code>uint32 vport_id = 2;</code>
   * @return The vportId.
   */
  int getVportId();

  /**
   * <pre>
   * Use "aa:bb:cc:dd:ee:ff" format
   * </pre>
   *
   * <code>string mac_address = 3 [(.google.api.field_behavior) = REQUIRED];</code>
   * @return The macAddress.
   */
  java.lang.String getMacAddress();
  /**
   * <pre>
   * Use "aa:bb:cc:dd:ee:ff" format
   * </pre>
   *
   * <code>string mac_address = 3 [(.google.api.field_behavior) = REQUIRED];</code>
   * @return The bytes for macAddress.
   */
  com.google.protobuf.ByteString
      getMacAddressBytes();

  /**
   * <pre>
   * holds the type of the bridge port
   * </pre>
   *
   * <code>.opi_api.network.evpn_gw.v1alpha1.BridgePort.BridgePortType ptype = 4 [(.google.api.field_behavior) = REQUIRED];</code>
   * @return The enum numeric value on the wire for ptype.
   */
  int getPtypeValue();
  /**
   * <pre>
   * holds the type of the bridge port
   * </pre>
   *
   * <code>.opi_api.network.evpn_gw.v1alpha1.BridgePort.BridgePortType ptype = 4 [(.google.api.field_behavior) = REQUIRED];</code>
   * @return The ptype.
   */
  opi_api.network.evpn_gw.v1alpha1.BridgePort.BridgePortType getPtype();

  /**
   * <pre>
   * Configured vlan ids on the bridge port
   * (-- api-linter: core::0141::forbidden-types=disabled
   *     aip.dev/not-precedent: vlan cannot be negative number. --)
   * </pre>
   *
   * <code>repeated uint32 vlan_id = 5;</code>
   * @return A list containing the vlanId.
   */
  java.util.List<java.lang.Integer> getVlanIdList();
  /**
   * <pre>
   * Configured vlan ids on the bridge port
   * (-- api-linter: core::0141::forbidden-types=disabled
   *     aip.dev/not-precedent: vlan cannot be negative number. --)
   * </pre>
   *
   * <code>repeated uint32 vlan_id = 5;</code>
   * @return The count of vlanId.
   */
  int getVlanIdCount();
  /**
   * <pre>
   * Configured vlan ids on the bridge port
   * (-- api-linter: core::0141::forbidden-types=disabled
   *     aip.dev/not-precedent: vlan cannot be negative number. --)
   * </pre>
   *
   * <code>repeated uint32 vlan_id = 5;</code>
   * @param index The index of the element to return.
   * @return The vlanId at the given index.
   */
  int getVlanId(int index);
}
