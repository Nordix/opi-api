// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: l3_xpu_infra_mgr.proto

#include "l3_xpu_infra_mgr.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace opi_api {
namespace network {
namespace evpn_gw {
namespace v1alpha1 {
constexpr Vrf::Vrf(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : import_rts_()
  , export_rts_()
  , vlan_ids_()
  , _vlan_ids_cached_byte_size_(0)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , loopback_ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , vtep_ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , rd_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , rmac_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , vni_(0u)
  , routing_table_(0u)
  , local_as_(0u){}
struct VrfDefaultTypeInternal {
  constexpr VrfDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VrfDefaultTypeInternal() {}
  union {
    Vrf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VrfDefaultTypeInternal _Vrf_default_instance_;
constexpr CreateVrfRequest::CreateVrfRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vrf_(nullptr){}
struct CreateVrfRequestDefaultTypeInternal {
  constexpr CreateVrfRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateVrfRequestDefaultTypeInternal() {}
  union {
    CreateVrfRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateVrfRequestDefaultTypeInternal _CreateVrfRequest_default_instance_;
constexpr ListVrfsRequest::ListVrfsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : page_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , page_size_(0){}
struct ListVrfsRequestDefaultTypeInternal {
  constexpr ListVrfsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListVrfsRequestDefaultTypeInternal() {}
  union {
    ListVrfsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListVrfsRequestDefaultTypeInternal _ListVrfsRequest_default_instance_;
constexpr ListVrfsResponse::ListVrfsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vrfs_()
  , next_page_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ListVrfsResponseDefaultTypeInternal {
  constexpr ListVrfsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListVrfsResponseDefaultTypeInternal() {}
  union {
    ListVrfsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListVrfsResponseDefaultTypeInternal _ListVrfsResponse_default_instance_;
constexpr GetVrfRequest::GetVrfRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetVrfRequestDefaultTypeInternal {
  constexpr GetVrfRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetVrfRequestDefaultTypeInternal() {}
  union {
    GetVrfRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetVrfRequestDefaultTypeInternal _GetVrfRequest_default_instance_;
constexpr DeleteVrfRequest::DeleteVrfRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DeleteVrfRequestDefaultTypeInternal {
  constexpr DeleteVrfRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteVrfRequestDefaultTypeInternal() {}
  union {
    DeleteVrfRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteVrfRequestDefaultTypeInternal _DeleteVrfRequest_default_instance_;
constexpr IpAddressMasklen::IpAddressMasklen(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ip_addr_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , len_(0u){}
struct IpAddressMasklenDefaultTypeInternal {
  constexpr IpAddressMasklenDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IpAddressMasklenDefaultTypeInternal() {}
  union {
    IpAddressMasklen _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IpAddressMasklenDefaultTypeInternal _IpAddressMasklen_default_instance_;
constexpr Svi::Svi(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gw_ip_()
  , vrf_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mac_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , vlan_id_(0u)
  , enable_bgp_(false)
  , remote_as_(0u){}
struct SviDefaultTypeInternal {
  constexpr SviDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SviDefaultTypeInternal() {}
  union {
    Svi _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SviDefaultTypeInternal _Svi_default_instance_;
constexpr CreateSviRequest::CreateSviRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : svi_(nullptr){}
struct CreateSviRequestDefaultTypeInternal {
  constexpr CreateSviRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateSviRequestDefaultTypeInternal() {}
  union {
    CreateSviRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateSviRequestDefaultTypeInternal _CreateSviRequest_default_instance_;
constexpr ListSvisRequest::ListSvisRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : page_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , page_size_(0){}
struct ListSvisRequestDefaultTypeInternal {
  constexpr ListSvisRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListSvisRequestDefaultTypeInternal() {}
  union {
    ListSvisRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListSvisRequestDefaultTypeInternal _ListSvisRequest_default_instance_;
constexpr ListSvisResponse::ListSvisResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : svis_()
  , next_page_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ListSvisResponseDefaultTypeInternal {
  constexpr ListSvisResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListSvisResponseDefaultTypeInternal() {}
  union {
    ListSvisResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListSvisResponseDefaultTypeInternal _ListSvisResponse_default_instance_;
constexpr GetSviRequest::GetSviRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vrf_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , vlan_id_(0u){}
struct GetSviRequestDefaultTypeInternal {
  constexpr GetSviRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetSviRequestDefaultTypeInternal() {}
  union {
    GetSviRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetSviRequestDefaultTypeInternal _GetSviRequest_default_instance_;
constexpr DeleteSviRequest::DeleteSviRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vrf_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , vlan_id_(0u){}
struct DeleteSviRequestDefaultTypeInternal {
  constexpr DeleteSviRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteSviRequestDefaultTypeInternal() {}
  union {
    DeleteSviRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteSviRequestDefaultTypeInternal _DeleteSviRequest_default_instance_;
}  // namespace v1alpha1
}  // namespace evpn_gw
}  // namespace network
}  // namespace opi_api
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_l3_5fxpu_5finfra_5fmgr_2eproto[13];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_l3_5fxpu_5finfra_5fmgr_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_l3_5fxpu_5finfra_5fmgr_2eproto = nullptr;

const uint32_t TableStruct_l3_5fxpu_5finfra_5fmgr_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::Vrf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::Vrf, name_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::Vrf, vni_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::Vrf, routing_table_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::Vrf, loopback_ip_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::Vrf, vtep_ip_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::Vrf, local_as_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::Vrf, rd_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::Vrf, rmac_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::Vrf, import_rts_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::Vrf, export_rts_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::Vrf, vlan_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::CreateVrfRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::CreateVrfRequest, vrf_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::ListVrfsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::ListVrfsRequest, page_size_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::ListVrfsRequest, page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::ListVrfsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::ListVrfsResponse, vrfs_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::ListVrfsResponse, next_page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::GetVrfRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::GetVrfRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::DeleteVrfRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::DeleteVrfRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::IpAddressMasklen, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::IpAddressMasklen, ip_addr_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::IpAddressMasklen, len_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::Svi, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::Svi, vrf_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::Svi, vlan_id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::Svi, mac_address_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::Svi, gw_ip_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::Svi, enable_bgp_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::Svi, remote_as_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::CreateSviRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::CreateSviRequest, svi_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::ListSvisRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::ListSvisRequest, page_size_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::ListSvisRequest, page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::ListSvisResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::ListSvisResponse, svis_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::ListSvisResponse, next_page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::GetSviRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::GetSviRequest, vrf_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::GetSviRequest, vlan_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::DeleteSviRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::DeleteSviRequest, vrf_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::evpn_gw::v1alpha1::DeleteSviRequest, vlan_id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::opi_api::network::evpn_gw::v1alpha1::Vrf)},
  { 17, -1, -1, sizeof(::opi_api::network::evpn_gw::v1alpha1::CreateVrfRequest)},
  { 24, -1, -1, sizeof(::opi_api::network::evpn_gw::v1alpha1::ListVrfsRequest)},
  { 32, -1, -1, sizeof(::opi_api::network::evpn_gw::v1alpha1::ListVrfsResponse)},
  { 40, -1, -1, sizeof(::opi_api::network::evpn_gw::v1alpha1::GetVrfRequest)},
  { 47, -1, -1, sizeof(::opi_api::network::evpn_gw::v1alpha1::DeleteVrfRequest)},
  { 54, -1, -1, sizeof(::opi_api::network::evpn_gw::v1alpha1::IpAddressMasklen)},
  { 62, -1, -1, sizeof(::opi_api::network::evpn_gw::v1alpha1::Svi)},
  { 74, -1, -1, sizeof(::opi_api::network::evpn_gw::v1alpha1::CreateSviRequest)},
  { 81, -1, -1, sizeof(::opi_api::network::evpn_gw::v1alpha1::ListSvisRequest)},
  { 89, -1, -1, sizeof(::opi_api::network::evpn_gw::v1alpha1::ListSvisResponse)},
  { 97, -1, -1, sizeof(::opi_api::network::evpn_gw::v1alpha1::GetSviRequest)},
  { 105, -1, -1, sizeof(::opi_api::network::evpn_gw::v1alpha1::DeleteSviRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::evpn_gw::v1alpha1::_Vrf_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::evpn_gw::v1alpha1::_CreateVrfRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::evpn_gw::v1alpha1::_ListVrfsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::evpn_gw::v1alpha1::_ListVrfsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::evpn_gw::v1alpha1::_GetVrfRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::evpn_gw::v1alpha1::_DeleteVrfRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::evpn_gw::v1alpha1::_IpAddressMasklen_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::evpn_gw::v1alpha1::_Svi_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::evpn_gw::v1alpha1::_CreateSviRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::evpn_gw::v1alpha1::_ListSvisRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::evpn_gw::v1alpha1::_ListSvisResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::evpn_gw::v1alpha1::_GetSviRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::evpn_gw::v1alpha1::_DeleteSviRequest_default_instance_),
};

const char descriptor_table_protodef_l3_5fxpu_5finfra_5fmgr_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026l3_xpu_infra_mgr.proto\022 opi_api.networ"
  "k.evpn_gw.v1alpha1\032\034google/api/annotatio"
  "ns.proto\032\027google/api/client.proto\032\033googl"
  "e/protobuf/empty.proto\032\037google/api/field"
  "_behavior.proto\032\031google/api/resource.pro"
  "to\"\204\002\n\003Vrf\022\021\n\004name\030\001 \001(\tB\003\340A\002\022\013\n\003vni\030\002 \001"
  "(\r\022\025\n\rrouting_table\030\003 \001(\r\022\030\n\013loopback_ip"
  "\030\004 \001(\tB\003\340A\002\022\017\n\007vtep_ip\030\005 \001(\t\022\020\n\010local_as"
  "\030\006 \001(\r\022\n\n\002rd\030\007 \001(\t\022\014\n\004rmac\030\010 \001(\t\022\022\n\nimpo"
  "rt_rts\030\t \003(\t\022\022\n\nexport_rts\030\n \003(\t\022\020\n\010vlan"
  "_ids\030\013 \003(\r:5\352A2\n$opi_api.network.evpn_gw"
  ".v1alpha1/Vrf\022\nvrfs/{vrf}\"K\n\020CreateVrfRe"
  "quest\0227\n\003vrf\030\001 \001(\0132%.opi_api.network.evp"
  "n_gw.v1alpha1.VrfB\003\340A\002\"8\n\017ListVrfsReques"
  "t\022\021\n\tpage_size\030\001 \001(\005\022\022\n\npage_token\030\002 \001(\t"
  "\"`\n\020ListVrfsResponse\0223\n\004vrfs\030\001 \003(\0132%.opi"
  "_api.network.evpn_gw.v1alpha1.Vrf\022\027\n\017nex"
  "t_page_token\030\002 \001(\t\"K\n\rGetVrfRequest\022:\n\004n"
  "ame\030\001 \001(\tB,\340A\002\372A&\n$opi_api.network.evpn_"
  "gw.v1alpha1/Vrf\"N\n\020DeleteVrfRequest\022:\n\004n"
  "ame\030\001 \001(\tB,\340A\002\372A&\n$opi_api.network.evpn_"
  "gw.v1alpha1/Vrf\"0\n\020IpAddressMasklen\022\017\n\007i"
  "p_addr\030\001 \001(\t\022\013\n\003len\030\002 \001(\r\"\355\001\n\003Svi\022\020\n\003vrf"
  "\030\001 \001(\tB\003\340A\002\022\024\n\007vlan_id\030\002 \001(\rB\003\340A\002\022\030\n\013mac"
  "_address\030\003 \001(\tB\003\340A\002\022F\n\005gw_ip\030\004 \003(\01322.opi"
  "_api.network.evpn_gw.v1alpha1.IpAddressM"
  "asklenB\003\340A\002\022\022\n\nenable_bgp\030\005 \001(\010\022\021\n\tremot"
  "e_as\030\006 \001(\r:5\352A2\n$opi_api.network.evpn_gw"
  ".v1alpha1/Svi\022\nsvis/{svi}\"K\n\020CreateSviRe"
  "quest\0227\n\003svi\030\001 \001(\0132%.opi_api.network.evp"
  "n_gw.v1alpha1.SviB\003\340A\002\"8\n\017ListSvisReques"
  "t\022\021\n\tpage_size\030\001 \001(\005\022\022\n\npage_token\030\002 \001(\t"
  "\"`\n\020ListSvisResponse\0223\n\004svis\030\001 \003(\0132%.opi"
  "_api.network.evpn_gw.v1alpha1.Svi\022\027\n\017nex"
  "t_page_token\030\002 \001(\t\"7\n\rGetSviRequest\022\020\n\003v"
  "rf\030\001 \001(\tB\003\340A\002\022\024\n\007vlan_id\030\002 \001(\rB\003\340A\002\":\n\020D"
  "eleteSviRequest\022\020\n\003vrf\030\001 \001(\tB\003\340A\002\022\024\n\007vla"
  "n_id\030\002 \001(\rB\003\340A\0022\230\004\n\nVrfService\022\203\001\n\tCreat"
  "eVrf\0222.opi_api.network.evpn_gw.v1alpha1."
  "CreateVrfRequest\032%.opi_api.network.evpn_"
  "gw.v1alpha1.Vrf\"\033\202\323\344\223\002\017\"\010/v1/vrfs:\003vrf\332A"
  "\003vrf\022\203\001\n\010ListVrfs\0221.opi_api.network.evpn"
  "_gw.v1alpha1.ListVrfsRequest\0322.opi_api.n"
  "etwork.evpn_gw.v1alpha1.ListVrfsResponse"
  "\"\020\202\323\344\223\002\n\022\010/v1/vrfs\022\202\001\n\006GetVrf\022/.opi_api."
  "network.evpn_gw.v1alpha1.GetVrfRequest\032%"
  ".opi_api.network.evpn_gw.v1alpha1.Vrf\" \202"
  "\323\344\223\002\023\022\021/v1/{name=vrfs/*}\332A\004name\022y\n\tDelet"
  "eVrf\0222.opi_api.network.evpn_gw.v1alpha1."
  "DeleteVrfRequest\032\026.google.protobuf.Empty"
  "\" \202\323\344\223\002\023*\021/v1/{name=vrfs/*}\332A\004name2\267\004\n\nS"
  "viService\022\203\001\n\tCreateSvi\0222.opi_api.networ"
  "k.evpn_gw.v1alpha1.CreateSviRequest\032%.op"
  "i_api.network.evpn_gw.v1alpha1.Svi\"\033\202\323\344\223"
  "\002\017\"\010/v1/svis:\003svi\332A\003svi\022\203\001\n\010ListSvis\0221.o"
  "pi_api.network.evpn_gw.v1alpha1.ListSvis"
  "Request\0322.opi_api.network.evpn_gw.v1alph"
  "a1.ListSvisResponse\"\020\202\323\344\223\002\n\022\010/v1/svis\022\221\001"
  "\n\006GetSvi\022/.opi_api.network.evpn_gw.v1alp"
  "ha1.GetSviRequest\032%.opi_api.network.evpn"
  "_gw.v1alpha1.Svi\"/\202\323\344\223\002\032\022\030/v1/{vrf&vlan_"
  "id=svis/*}\332A\014vrf, vlan_id\022\210\001\n\tDeleteSvi\022"
  "2.opi_api.network.evpn_gw.v1alpha1.Delet"
  "eSviRequest\032\026.google.protobuf.Empty\"/\202\323\344"
  "\223\002\032*\030/v1/{vrf&vlan_id=svis/*}\332A\014vrf, vla"
  "n_idBw\n opi_api.network.evpn_gw.v1alpha1"
  "B\022L3XpuInfraMgrProtoP\001Z=github.com/opipr"
  "oject/opi-api/network/evpn-gw/v1alpha1/g"
  "en/gob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_l3_5fxpu_5finfra_5fmgr_2eproto_deps[5] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fapi_2fclient_2eproto,
  &::descriptor_table_google_2fapi_2ffield_5fbehavior_2eproto,
  &::descriptor_table_google_2fapi_2fresource_2eproto,
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_l3_5fxpu_5finfra_5fmgr_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_l3_5fxpu_5finfra_5fmgr_2eproto = {
  false, false, 2733, descriptor_table_protodef_l3_5fxpu_5finfra_5fmgr_2eproto, "l3_xpu_infra_mgr.proto", 
  &descriptor_table_l3_5fxpu_5finfra_5fmgr_2eproto_once, descriptor_table_l3_5fxpu_5finfra_5fmgr_2eproto_deps, 5, 13,
  schemas, file_default_instances, TableStruct_l3_5fxpu_5finfra_5fmgr_2eproto::offsets,
  file_level_metadata_l3_5fxpu_5finfra_5fmgr_2eproto, file_level_enum_descriptors_l3_5fxpu_5finfra_5fmgr_2eproto, file_level_service_descriptors_l3_5fxpu_5finfra_5fmgr_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_l3_5fxpu_5finfra_5fmgr_2eproto_getter() {
  return &descriptor_table_l3_5fxpu_5finfra_5fmgr_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_l3_5fxpu_5finfra_5fmgr_2eproto(&descriptor_table_l3_5fxpu_5finfra_5fmgr_2eproto);
namespace opi_api {
namespace network {
namespace evpn_gw {
namespace v1alpha1 {

// ===================================================================

class Vrf::_Internal {
 public:
};

Vrf::Vrf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  import_rts_(arena),
  export_rts_(arena),
  vlan_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.evpn_gw.v1alpha1.Vrf)
}
Vrf::Vrf(const Vrf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      import_rts_(from.import_rts_),
      export_rts_(from.export_rts_),
      vlan_ids_(from.vlan_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  loopback_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    loopback_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_loopback_ip().empty()) {
    loopback_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_loopback_ip(), 
      GetArenaForAllocation());
  }
  vtep_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    vtep_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vtep_ip().empty()) {
    vtep_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vtep_ip(), 
      GetArenaForAllocation());
  }
  rd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    rd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rd().empty()) {
    rd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rd(), 
      GetArenaForAllocation());
  }
  rmac_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    rmac_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rmac().empty()) {
    rmac_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rmac(), 
      GetArenaForAllocation());
  }
  ::memcpy(&vni_, &from.vni_,
    static_cast<size_t>(reinterpret_cast<char*>(&local_as_) -
    reinterpret_cast<char*>(&vni_)) + sizeof(local_as_));
  // @@protoc_insertion_point(copy_constructor:opi_api.network.evpn_gw.v1alpha1.Vrf)
}

inline void Vrf::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
loopback_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  loopback_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
vtep_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  vtep_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
rd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  rd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
rmac_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  rmac_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&vni_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&local_as_) -
    reinterpret_cast<char*>(&vni_)) + sizeof(local_as_));
}

Vrf::~Vrf() {
  // @@protoc_insertion_point(destructor:opi_api.network.evpn_gw.v1alpha1.Vrf)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Vrf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  loopback_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vtep_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rmac_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Vrf::ArenaDtor(void* object) {
  Vrf* _this = reinterpret_cast< Vrf* >(object);
  (void)_this;
}
void Vrf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vrf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Vrf::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.evpn_gw.v1alpha1.Vrf)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  import_rts_.Clear();
  export_rts_.Clear();
  vlan_ids_.Clear();
  name_.ClearToEmpty();
  loopback_ip_.ClearToEmpty();
  vtep_ip_.ClearToEmpty();
  rd_.ClearToEmpty();
  rmac_.ClearToEmpty();
  ::memset(&vni_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&local_as_) -
      reinterpret_cast<char*>(&vni_)) + sizeof(local_as_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vrf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.network.evpn_gw.v1alpha1.Vrf.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 vni = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          vni_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 routing_table = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          routing_table_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string loopback_ip = 4 [(.google.api.field_behavior) = REQUIRED];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_loopback_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.network.evpn_gw.v1alpha1.Vrf.loopback_ip"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string vtep_ip = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_vtep_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.network.evpn_gw.v1alpha1.Vrf.vtep_ip"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 local_as = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          local_as_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string rd = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_rd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.network.evpn_gw.v1alpha1.Vrf.rd"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string rmac = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_rmac();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.network.evpn_gw.v1alpha1.Vrf.rmac"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string import_rts = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_import_rts();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.network.evpn_gw.v1alpha1.Vrf.import_rts"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string export_rts = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_export_rts();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.network.evpn_gw.v1alpha1.Vrf.export_rts"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 vlan_ids = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_vlan_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 88) {
          _internal_add_vlan_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vrf::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.evpn_gw.v1alpha1.Vrf)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.evpn_gw.v1alpha1.Vrf.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // uint32 vni = 2;
  if (this->_internal_vni() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_vni(), target);
  }

  // uint32 routing_table = 3;
  if (this->_internal_routing_table() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_routing_table(), target);
  }

  // string loopback_ip = 4 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_loopback_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_loopback_ip().data(), static_cast<int>(this->_internal_loopback_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.evpn_gw.v1alpha1.Vrf.loopback_ip");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_loopback_ip(), target);
  }

  // string vtep_ip = 5;
  if (!this->_internal_vtep_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vtep_ip().data(), static_cast<int>(this->_internal_vtep_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.evpn_gw.v1alpha1.Vrf.vtep_ip");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_vtep_ip(), target);
  }

  // uint32 local_as = 6;
  if (this->_internal_local_as() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_local_as(), target);
  }

  // string rd = 7;
  if (!this->_internal_rd().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rd().data(), static_cast<int>(this->_internal_rd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.evpn_gw.v1alpha1.Vrf.rd");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_rd(), target);
  }

  // string rmac = 8;
  if (!this->_internal_rmac().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rmac().data(), static_cast<int>(this->_internal_rmac().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.evpn_gw.v1alpha1.Vrf.rmac");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_rmac(), target);
  }

  // repeated string import_rts = 9;
  for (int i = 0, n = this->_internal_import_rts_size(); i < n; i++) {
    const auto& s = this->_internal_import_rts(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.evpn_gw.v1alpha1.Vrf.import_rts");
    target = stream->WriteString(9, s, target);
  }

  // repeated string export_rts = 10;
  for (int i = 0, n = this->_internal_export_rts_size(); i < n; i++) {
    const auto& s = this->_internal_export_rts(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.evpn_gw.v1alpha1.Vrf.export_rts");
    target = stream->WriteString(10, s, target);
  }

  // repeated uint32 vlan_ids = 11;
  {
    int byte_size = _vlan_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          11, _internal_vlan_ids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.evpn_gw.v1alpha1.Vrf)
  return target;
}

size_t Vrf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.evpn_gw.v1alpha1.Vrf)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string import_rts = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(import_rts_.size());
  for (int i = 0, n = import_rts_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      import_rts_.Get(i));
  }

  // repeated string export_rts = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(export_rts_.size());
  for (int i = 0, n = export_rts_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      export_rts_.Get(i));
  }

  // repeated uint32 vlan_ids = 11;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->vlan_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _vlan_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string name = 1 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string loopback_ip = 4 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_loopback_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_loopback_ip());
  }

  // string vtep_ip = 5;
  if (!this->_internal_vtep_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vtep_ip());
  }

  // string rd = 7;
  if (!this->_internal_rd().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rd());
  }

  // string rmac = 8;
  if (!this->_internal_rmac().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rmac());
  }

  // uint32 vni = 2;
  if (this->_internal_vni() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_vni());
  }

  // uint32 routing_table = 3;
  if (this->_internal_routing_table() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_routing_table());
  }

  // uint32 local_as = 6;
  if (this->_internal_local_as() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_local_as());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vrf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Vrf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vrf::GetClassData() const { return &_class_data_; }

void Vrf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Vrf *>(to)->MergeFrom(
      static_cast<const Vrf &>(from));
}


void Vrf::MergeFrom(const Vrf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.evpn_gw.v1alpha1.Vrf)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  import_rts_.MergeFrom(from.import_rts_);
  export_rts_.MergeFrom(from.export_rts_);
  vlan_ids_.MergeFrom(from.vlan_ids_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_loopback_ip().empty()) {
    _internal_set_loopback_ip(from._internal_loopback_ip());
  }
  if (!from._internal_vtep_ip().empty()) {
    _internal_set_vtep_ip(from._internal_vtep_ip());
  }
  if (!from._internal_rd().empty()) {
    _internal_set_rd(from._internal_rd());
  }
  if (!from._internal_rmac().empty()) {
    _internal_set_rmac(from._internal_rmac());
  }
  if (from._internal_vni() != 0) {
    _internal_set_vni(from._internal_vni());
  }
  if (from._internal_routing_table() != 0) {
    _internal_set_routing_table(from._internal_routing_table());
  }
  if (from._internal_local_as() != 0) {
    _internal_set_local_as(from._internal_local_as());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vrf::CopyFrom(const Vrf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.evpn_gw.v1alpha1.Vrf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vrf::IsInitialized() const {
  return true;
}

void Vrf::InternalSwap(Vrf* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  import_rts_.InternalSwap(&other->import_rts_);
  export_rts_.InternalSwap(&other->export_rts_);
  vlan_ids_.InternalSwap(&other->vlan_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &loopback_ip_, lhs_arena,
      &other->loopback_ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &vtep_ip_, lhs_arena,
      &other->vtep_ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &rd_, lhs_arena,
      &other->rd_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &rmac_, lhs_arena,
      &other->rmac_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vrf, local_as_)
      + sizeof(Vrf::local_as_)
      - PROTOBUF_FIELD_OFFSET(Vrf, vni_)>(
          reinterpret_cast<char*>(&vni_),
          reinterpret_cast<char*>(&other->vni_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vrf::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_l3_5fxpu_5finfra_5fmgr_2eproto_getter, &descriptor_table_l3_5fxpu_5finfra_5fmgr_2eproto_once,
      file_level_metadata_l3_5fxpu_5finfra_5fmgr_2eproto[0]);
}

// ===================================================================

class CreateVrfRequest::_Internal {
 public:
  static const ::opi_api::network::evpn_gw::v1alpha1::Vrf& vrf(const CreateVrfRequest* msg);
};

const ::opi_api::network::evpn_gw::v1alpha1::Vrf&
CreateVrfRequest::_Internal::vrf(const CreateVrfRequest* msg) {
  return *msg->vrf_;
}
CreateVrfRequest::CreateVrfRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.evpn_gw.v1alpha1.CreateVrfRequest)
}
CreateVrfRequest::CreateVrfRequest(const CreateVrfRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_vrf()) {
    vrf_ = new ::opi_api::network::evpn_gw::v1alpha1::Vrf(*from.vrf_);
  } else {
    vrf_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.evpn_gw.v1alpha1.CreateVrfRequest)
}

inline void CreateVrfRequest::SharedCtor() {
vrf_ = nullptr;
}

CreateVrfRequest::~CreateVrfRequest() {
  // @@protoc_insertion_point(destructor:opi_api.network.evpn_gw.v1alpha1.CreateVrfRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateVrfRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete vrf_;
}

void CreateVrfRequest::ArenaDtor(void* object) {
  CreateVrfRequest* _this = reinterpret_cast< CreateVrfRequest* >(object);
  (void)_this;
}
void CreateVrfRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateVrfRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateVrfRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.evpn_gw.v1alpha1.CreateVrfRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && vrf_ != nullptr) {
    delete vrf_;
  }
  vrf_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateVrfRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.network.evpn_gw.v1alpha1.Vrf vrf = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_vrf(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateVrfRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.evpn_gw.v1alpha1.CreateVrfRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.network.evpn_gw.v1alpha1.Vrf vrf = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_vrf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::vrf(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.evpn_gw.v1alpha1.CreateVrfRequest)
  return target;
}

size_t CreateVrfRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.evpn_gw.v1alpha1.CreateVrfRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.network.evpn_gw.v1alpha1.Vrf vrf = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_vrf()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vrf_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateVrfRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateVrfRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateVrfRequest::GetClassData() const { return &_class_data_; }

void CreateVrfRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateVrfRequest *>(to)->MergeFrom(
      static_cast<const CreateVrfRequest &>(from));
}


void CreateVrfRequest::MergeFrom(const CreateVrfRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.evpn_gw.v1alpha1.CreateVrfRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_vrf()) {
    _internal_mutable_vrf()->::opi_api::network::evpn_gw::v1alpha1::Vrf::MergeFrom(from._internal_vrf());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateVrfRequest::CopyFrom(const CreateVrfRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.evpn_gw.v1alpha1.CreateVrfRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateVrfRequest::IsInitialized() const {
  return true;
}

void CreateVrfRequest::InternalSwap(CreateVrfRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(vrf_, other->vrf_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateVrfRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_l3_5fxpu_5finfra_5fmgr_2eproto_getter, &descriptor_table_l3_5fxpu_5finfra_5fmgr_2eproto_once,
      file_level_metadata_l3_5fxpu_5finfra_5fmgr_2eproto[1]);
}

// ===================================================================

class ListVrfsRequest::_Internal {
 public:
};

ListVrfsRequest::ListVrfsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.evpn_gw.v1alpha1.ListVrfsRequest)
}
ListVrfsRequest::ListVrfsRequest(const ListVrfsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_page_token().empty()) {
    page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_page_token(), 
      GetArenaForAllocation());
  }
  page_size_ = from.page_size_;
  // @@protoc_insertion_point(copy_constructor:opi_api.network.evpn_gw.v1alpha1.ListVrfsRequest)
}

inline void ListVrfsRequest::SharedCtor() {
page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
page_size_ = 0;
}

ListVrfsRequest::~ListVrfsRequest() {
  // @@protoc_insertion_point(destructor:opi_api.network.evpn_gw.v1alpha1.ListVrfsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListVrfsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  page_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListVrfsRequest::ArenaDtor(void* object) {
  ListVrfsRequest* _this = reinterpret_cast< ListVrfsRequest* >(object);
  (void)_this;
}
void ListVrfsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListVrfsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListVrfsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.evpn_gw.v1alpha1.ListVrfsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  page_token_.ClearToEmpty();
  page_size_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListVrfsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 page_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          page_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string page_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_page_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.network.evpn_gw.v1alpha1.ListVrfsRequest.page_token"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListVrfsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.evpn_gw.v1alpha1.ListVrfsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 page_size = 1;
  if (this->_internal_page_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_page_size(), target);
  }

  // string page_token = 2;
  if (!this->_internal_page_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_page_token().data(), static_cast<int>(this->_internal_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.evpn_gw.v1alpha1.ListVrfsRequest.page_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_page_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.evpn_gw.v1alpha1.ListVrfsRequest)
  return target;
}

size_t ListVrfsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.evpn_gw.v1alpha1.ListVrfsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string page_token = 2;
  if (!this->_internal_page_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_page_token());
  }

  // int32 page_size = 1;
  if (this->_internal_page_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_page_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListVrfsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListVrfsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListVrfsRequest::GetClassData() const { return &_class_data_; }

void ListVrfsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListVrfsRequest *>(to)->MergeFrom(
      static_cast<const ListVrfsRequest &>(from));
}


void ListVrfsRequest::MergeFrom(const ListVrfsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.evpn_gw.v1alpha1.ListVrfsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_page_token().empty()) {
    _internal_set_page_token(from._internal_page_token());
  }
  if (from._internal_page_size() != 0) {
    _internal_set_page_size(from._internal_page_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListVrfsRequest::CopyFrom(const ListVrfsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.evpn_gw.v1alpha1.ListVrfsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListVrfsRequest::IsInitialized() const {
  return true;
}

void ListVrfsRequest::InternalSwap(ListVrfsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &page_token_, lhs_arena,
      &other->page_token_, rhs_arena
  );
  swap(page_size_, other->page_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListVrfsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_l3_5fxpu_5finfra_5fmgr_2eproto_getter, &descriptor_table_l3_5fxpu_5finfra_5fmgr_2eproto_once,
      file_level_metadata_l3_5fxpu_5finfra_5fmgr_2eproto[2]);
}

// ===================================================================

class ListVrfsResponse::_Internal {
 public:
};

ListVrfsResponse::ListVrfsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  vrfs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.evpn_gw.v1alpha1.ListVrfsResponse)
}
ListVrfsResponse::ListVrfsResponse(const ListVrfsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vrfs_(from.vrfs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  next_page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_next_page_token().empty()) {
    next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_next_page_token(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.evpn_gw.v1alpha1.ListVrfsResponse)
}

inline void ListVrfsResponse::SharedCtor() {
next_page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListVrfsResponse::~ListVrfsResponse() {
  // @@protoc_insertion_point(destructor:opi_api.network.evpn_gw.v1alpha1.ListVrfsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListVrfsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  next_page_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListVrfsResponse::ArenaDtor(void* object) {
  ListVrfsResponse* _this = reinterpret_cast< ListVrfsResponse* >(object);
  (void)_this;
}
void ListVrfsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListVrfsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListVrfsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.evpn_gw.v1alpha1.ListVrfsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vrfs_.Clear();
  next_page_token_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListVrfsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .opi_api.network.evpn_gw.v1alpha1.Vrf vrfs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vrfs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string next_page_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_next_page_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.network.evpn_gw.v1alpha1.ListVrfsResponse.next_page_token"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListVrfsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.evpn_gw.v1alpha1.ListVrfsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opi_api.network.evpn_gw.v1alpha1.Vrf vrfs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vrfs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_vrfs(i), target, stream);
  }

  // string next_page_token = 2;
  if (!this->_internal_next_page_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_next_page_token().data(), static_cast<int>(this->_internal_next_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.evpn_gw.v1alpha1.ListVrfsResponse.next_page_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_next_page_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.evpn_gw.v1alpha1.ListVrfsResponse)
  return target;
}

size_t ListVrfsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.evpn_gw.v1alpha1.ListVrfsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opi_api.network.evpn_gw.v1alpha1.Vrf vrfs = 1;
  total_size += 1UL * this->_internal_vrfs_size();
  for (const auto& msg : this->vrfs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string next_page_token = 2;
  if (!this->_internal_next_page_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_next_page_token());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListVrfsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListVrfsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListVrfsResponse::GetClassData() const { return &_class_data_; }

void ListVrfsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListVrfsResponse *>(to)->MergeFrom(
      static_cast<const ListVrfsResponse &>(from));
}


void ListVrfsResponse::MergeFrom(const ListVrfsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.evpn_gw.v1alpha1.ListVrfsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  vrfs_.MergeFrom(from.vrfs_);
  if (!from._internal_next_page_token().empty()) {
    _internal_set_next_page_token(from._internal_next_page_token());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListVrfsResponse::CopyFrom(const ListVrfsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.evpn_gw.v1alpha1.ListVrfsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListVrfsResponse::IsInitialized() const {
  return true;
}

void ListVrfsResponse::InternalSwap(ListVrfsResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  vrfs_.InternalSwap(&other->vrfs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &next_page_token_, lhs_arena,
      &other->next_page_token_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ListVrfsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_l3_5fxpu_5finfra_5fmgr_2eproto_getter, &descriptor_table_l3_5fxpu_5finfra_5fmgr_2eproto_once,
      file_level_metadata_l3_5fxpu_5finfra_5fmgr_2eproto[3]);
}

// ===================================================================

class GetVrfRequest::_Internal {
 public:
};

GetVrfRequest::GetVrfRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.evpn_gw.v1alpha1.GetVrfRequest)
}
GetVrfRequest::GetVrfRequest(const GetVrfRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.evpn_gw.v1alpha1.GetVrfRequest)
}

inline void GetVrfRequest::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetVrfRequest::~GetVrfRequest() {
  // @@protoc_insertion_point(destructor:opi_api.network.evpn_gw.v1alpha1.GetVrfRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetVrfRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetVrfRequest::ArenaDtor(void* object) {
  GetVrfRequest* _this = reinterpret_cast< GetVrfRequest* >(object);
  (void)_this;
}
void GetVrfRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetVrfRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetVrfRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.evpn_gw.v1alpha1.GetVrfRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetVrfRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.network.evpn_gw.v1alpha1.GetVrfRequest.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetVrfRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.evpn_gw.v1alpha1.GetVrfRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.evpn_gw.v1alpha1.GetVrfRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.evpn_gw.v1alpha1.GetVrfRequest)
  return target;
}

size_t GetVrfRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.evpn_gw.v1alpha1.GetVrfRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetVrfRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetVrfRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetVrfRequest::GetClassData() const { return &_class_data_; }

void GetVrfRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetVrfRequest *>(to)->MergeFrom(
      static_cast<const GetVrfRequest &>(from));
}


void GetVrfRequest::MergeFrom(const GetVrfRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.evpn_gw.v1alpha1.GetVrfRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetVrfRequest::CopyFrom(const GetVrfRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.evpn_gw.v1alpha1.GetVrfRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetVrfRequest::IsInitialized() const {
  return true;
}

void GetVrfRequest::InternalSwap(GetVrfRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetVrfRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_l3_5fxpu_5finfra_5fmgr_2eproto_getter, &descriptor_table_l3_5fxpu_5finfra_5fmgr_2eproto_once,
      file_level_metadata_l3_5fxpu_5finfra_5fmgr_2eproto[4]);
}

// ===================================================================

class DeleteVrfRequest::_Internal {
 public:
};

DeleteVrfRequest::DeleteVrfRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.evpn_gw.v1alpha1.DeleteVrfRequest)
}
DeleteVrfRequest::DeleteVrfRequest(const DeleteVrfRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.evpn_gw.v1alpha1.DeleteVrfRequest)
}

inline void DeleteVrfRequest::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeleteVrfRequest::~DeleteVrfRequest() {
  // @@protoc_insertion_point(destructor:opi_api.network.evpn_gw.v1alpha1.DeleteVrfRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteVrfRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteVrfRequest::ArenaDtor(void* object) {
  DeleteVrfRequest* _this = reinterpret_cast< DeleteVrfRequest* >(object);
  (void)_this;
}
void DeleteVrfRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteVrfRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteVrfRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.evpn_gw.v1alpha1.DeleteVrfRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteVrfRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.network.evpn_gw.v1alpha1.DeleteVrfRequest.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteVrfRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.evpn_gw.v1alpha1.DeleteVrfRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.evpn_gw.v1alpha1.DeleteVrfRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.evpn_gw.v1alpha1.DeleteVrfRequest)
  return target;
}

size_t DeleteVrfRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.evpn_gw.v1alpha1.DeleteVrfRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteVrfRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteVrfRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteVrfRequest::GetClassData() const { return &_class_data_; }

void DeleteVrfRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteVrfRequest *>(to)->MergeFrom(
      static_cast<const DeleteVrfRequest &>(from));
}


void DeleteVrfRequest::MergeFrom(const DeleteVrfRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.evpn_gw.v1alpha1.DeleteVrfRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteVrfRequest::CopyFrom(const DeleteVrfRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.evpn_gw.v1alpha1.DeleteVrfRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteVrfRequest::IsInitialized() const {
  return true;
}

void DeleteVrfRequest::InternalSwap(DeleteVrfRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteVrfRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_l3_5fxpu_5finfra_5fmgr_2eproto_getter, &descriptor_table_l3_5fxpu_5finfra_5fmgr_2eproto_once,
      file_level_metadata_l3_5fxpu_5finfra_5fmgr_2eproto[5]);
}

// ===================================================================

class IpAddressMasklen::_Internal {
 public:
};

IpAddressMasklen::IpAddressMasklen(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.evpn_gw.v1alpha1.IpAddressMasklen)
}
IpAddressMasklen::IpAddressMasklen(const IpAddressMasklen& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ip_addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip_addr().empty()) {
    ip_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip_addr(), 
      GetArenaForAllocation());
  }
  len_ = from.len_;
  // @@protoc_insertion_point(copy_constructor:opi_api.network.evpn_gw.v1alpha1.IpAddressMasklen)
}

inline void IpAddressMasklen::SharedCtor() {
ip_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ip_addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
len_ = 0u;
}

IpAddressMasklen::~IpAddressMasklen() {
  // @@protoc_insertion_point(destructor:opi_api.network.evpn_gw.v1alpha1.IpAddressMasklen)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IpAddressMasklen::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ip_addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IpAddressMasklen::ArenaDtor(void* object) {
  IpAddressMasklen* _this = reinterpret_cast< IpAddressMasklen* >(object);
  (void)_this;
}
void IpAddressMasklen::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IpAddressMasklen::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IpAddressMasklen::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.evpn_gw.v1alpha1.IpAddressMasklen)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_addr_.ClearToEmpty();
  len_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IpAddressMasklen::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ip_addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ip_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.network.evpn_gw.v1alpha1.IpAddressMasklen.ip_addr"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 len = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IpAddressMasklen::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.evpn_gw.v1alpha1.IpAddressMasklen)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip_addr = 1;
  if (!this->_internal_ip_addr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip_addr().data(), static_cast<int>(this->_internal_ip_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.evpn_gw.v1alpha1.IpAddressMasklen.ip_addr");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ip_addr(), target);
  }

  // uint32 len = 2;
  if (this->_internal_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_len(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.evpn_gw.v1alpha1.IpAddressMasklen)
  return target;
}

size_t IpAddressMasklen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.evpn_gw.v1alpha1.IpAddressMasklen)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip_addr = 1;
  if (!this->_internal_ip_addr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip_addr());
  }

  // uint32 len = 2;
  if (this->_internal_len() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_len());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IpAddressMasklen::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IpAddressMasklen::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IpAddressMasklen::GetClassData() const { return &_class_data_; }

void IpAddressMasklen::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IpAddressMasklen *>(to)->MergeFrom(
      static_cast<const IpAddressMasklen &>(from));
}


void IpAddressMasklen::MergeFrom(const IpAddressMasklen& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.evpn_gw.v1alpha1.IpAddressMasklen)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ip_addr().empty()) {
    _internal_set_ip_addr(from._internal_ip_addr());
  }
  if (from._internal_len() != 0) {
    _internal_set_len(from._internal_len());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IpAddressMasklen::CopyFrom(const IpAddressMasklen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.evpn_gw.v1alpha1.IpAddressMasklen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IpAddressMasklen::IsInitialized() const {
  return true;
}

void IpAddressMasklen::InternalSwap(IpAddressMasklen* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ip_addr_, lhs_arena,
      &other->ip_addr_, rhs_arena
  );
  swap(len_, other->len_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IpAddressMasklen::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_l3_5fxpu_5finfra_5fmgr_2eproto_getter, &descriptor_table_l3_5fxpu_5finfra_5fmgr_2eproto_once,
      file_level_metadata_l3_5fxpu_5finfra_5fmgr_2eproto[6]);
}

// ===================================================================

class Svi::_Internal {
 public:
};

Svi::Svi(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  gw_ip_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.evpn_gw.v1alpha1.Svi)
}
Svi::Svi(const Svi& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      gw_ip_(from.gw_ip_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vrf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    vrf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vrf().empty()) {
    vrf_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vrf(), 
      GetArenaForAllocation());
  }
  mac_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    mac_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mac_address().empty()) {
    mac_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mac_address(), 
      GetArenaForAllocation());
  }
  ::memcpy(&vlan_id_, &from.vlan_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&remote_as_) -
    reinterpret_cast<char*>(&vlan_id_)) + sizeof(remote_as_));
  // @@protoc_insertion_point(copy_constructor:opi_api.network.evpn_gw.v1alpha1.Svi)
}

inline void Svi::SharedCtor() {
vrf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  vrf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
mac_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  mac_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&vlan_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&remote_as_) -
    reinterpret_cast<char*>(&vlan_id_)) + sizeof(remote_as_));
}

Svi::~Svi() {
  // @@protoc_insertion_point(destructor:opi_api.network.evpn_gw.v1alpha1.Svi)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Svi::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  vrf_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mac_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Svi::ArenaDtor(void* object) {
  Svi* _this = reinterpret_cast< Svi* >(object);
  (void)_this;
}
void Svi::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Svi::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Svi::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.evpn_gw.v1alpha1.Svi)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gw_ip_.Clear();
  vrf_.ClearToEmpty();
  mac_address_.ClearToEmpty();
  ::memset(&vlan_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remote_as_) -
      reinterpret_cast<char*>(&vlan_id_)) + sizeof(remote_as_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Svi::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string vrf = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_vrf();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.network.evpn_gw.v1alpha1.Svi.vrf"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 vlan_id = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          vlan_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string mac_address = 3 [(.google.api.field_behavior) = REQUIRED];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_mac_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.network.evpn_gw.v1alpha1.Svi.mac_address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .opi_api.network.evpn_gw.v1alpha1.IpAddressMasklen gw_ip = 4 [(.google.api.field_behavior) = REQUIRED];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gw_ip(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool enable_bgp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          enable_bgp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 remote_as = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          remote_as_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Svi::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.evpn_gw.v1alpha1.Svi)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string vrf = 1 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_vrf().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vrf().data(), static_cast<int>(this->_internal_vrf().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.evpn_gw.v1alpha1.Svi.vrf");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_vrf(), target);
  }

  // uint32 vlan_id = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_vlan_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_vlan_id(), target);
  }

  // string mac_address = 3 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_mac_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mac_address().data(), static_cast<int>(this->_internal_mac_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.evpn_gw.v1alpha1.Svi.mac_address");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_mac_address(), target);
  }

  // repeated .opi_api.network.evpn_gw.v1alpha1.IpAddressMasklen gw_ip = 4 [(.google.api.field_behavior) = REQUIRED];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_gw_ip_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_gw_ip(i), target, stream);
  }

  // bool enable_bgp = 5;
  if (this->_internal_enable_bgp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_enable_bgp(), target);
  }

  // uint32 remote_as = 6;
  if (this->_internal_remote_as() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_remote_as(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.evpn_gw.v1alpha1.Svi)
  return target;
}

size_t Svi::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.evpn_gw.v1alpha1.Svi)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opi_api.network.evpn_gw.v1alpha1.IpAddressMasklen gw_ip = 4 [(.google.api.field_behavior) = REQUIRED];
  total_size += 1UL * this->_internal_gw_ip_size();
  for (const auto& msg : this->gw_ip_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string vrf = 1 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_vrf().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vrf());
  }

  // string mac_address = 3 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_mac_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mac_address());
  }

  // uint32 vlan_id = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_vlan_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_vlan_id());
  }

  // bool enable_bgp = 5;
  if (this->_internal_enable_bgp() != 0) {
    total_size += 1 + 1;
  }

  // uint32 remote_as = 6;
  if (this->_internal_remote_as() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_remote_as());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Svi::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Svi::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Svi::GetClassData() const { return &_class_data_; }

void Svi::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Svi *>(to)->MergeFrom(
      static_cast<const Svi &>(from));
}


void Svi::MergeFrom(const Svi& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.evpn_gw.v1alpha1.Svi)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  gw_ip_.MergeFrom(from.gw_ip_);
  if (!from._internal_vrf().empty()) {
    _internal_set_vrf(from._internal_vrf());
  }
  if (!from._internal_mac_address().empty()) {
    _internal_set_mac_address(from._internal_mac_address());
  }
  if (from._internal_vlan_id() != 0) {
    _internal_set_vlan_id(from._internal_vlan_id());
  }
  if (from._internal_enable_bgp() != 0) {
    _internal_set_enable_bgp(from._internal_enable_bgp());
  }
  if (from._internal_remote_as() != 0) {
    _internal_set_remote_as(from._internal_remote_as());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Svi::CopyFrom(const Svi& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.evpn_gw.v1alpha1.Svi)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Svi::IsInitialized() const {
  return true;
}

void Svi::InternalSwap(Svi* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  gw_ip_.InternalSwap(&other->gw_ip_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &vrf_, lhs_arena,
      &other->vrf_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mac_address_, lhs_arena,
      &other->mac_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Svi, remote_as_)
      + sizeof(Svi::remote_as_)
      - PROTOBUF_FIELD_OFFSET(Svi, vlan_id_)>(
          reinterpret_cast<char*>(&vlan_id_),
          reinterpret_cast<char*>(&other->vlan_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Svi::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_l3_5fxpu_5finfra_5fmgr_2eproto_getter, &descriptor_table_l3_5fxpu_5finfra_5fmgr_2eproto_once,
      file_level_metadata_l3_5fxpu_5finfra_5fmgr_2eproto[7]);
}

// ===================================================================

class CreateSviRequest::_Internal {
 public:
  static const ::opi_api::network::evpn_gw::v1alpha1::Svi& svi(const CreateSviRequest* msg);
};

const ::opi_api::network::evpn_gw::v1alpha1::Svi&
CreateSviRequest::_Internal::svi(const CreateSviRequest* msg) {
  return *msg->svi_;
}
CreateSviRequest::CreateSviRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.evpn_gw.v1alpha1.CreateSviRequest)
}
CreateSviRequest::CreateSviRequest(const CreateSviRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_svi()) {
    svi_ = new ::opi_api::network::evpn_gw::v1alpha1::Svi(*from.svi_);
  } else {
    svi_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.evpn_gw.v1alpha1.CreateSviRequest)
}

inline void CreateSviRequest::SharedCtor() {
svi_ = nullptr;
}

CreateSviRequest::~CreateSviRequest() {
  // @@protoc_insertion_point(destructor:opi_api.network.evpn_gw.v1alpha1.CreateSviRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateSviRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete svi_;
}

void CreateSviRequest::ArenaDtor(void* object) {
  CreateSviRequest* _this = reinterpret_cast< CreateSviRequest* >(object);
  (void)_this;
}
void CreateSviRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateSviRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateSviRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.evpn_gw.v1alpha1.CreateSviRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && svi_ != nullptr) {
    delete svi_;
  }
  svi_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateSviRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.network.evpn_gw.v1alpha1.Svi svi = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_svi(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateSviRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.evpn_gw.v1alpha1.CreateSviRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.network.evpn_gw.v1alpha1.Svi svi = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_svi()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::svi(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.evpn_gw.v1alpha1.CreateSviRequest)
  return target;
}

size_t CreateSviRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.evpn_gw.v1alpha1.CreateSviRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.network.evpn_gw.v1alpha1.Svi svi = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_svi()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *svi_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateSviRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateSviRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateSviRequest::GetClassData() const { return &_class_data_; }

void CreateSviRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateSviRequest *>(to)->MergeFrom(
      static_cast<const CreateSviRequest &>(from));
}


void CreateSviRequest::MergeFrom(const CreateSviRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.evpn_gw.v1alpha1.CreateSviRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_svi()) {
    _internal_mutable_svi()->::opi_api::network::evpn_gw::v1alpha1::Svi::MergeFrom(from._internal_svi());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateSviRequest::CopyFrom(const CreateSviRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.evpn_gw.v1alpha1.CreateSviRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateSviRequest::IsInitialized() const {
  return true;
}

void CreateSviRequest::InternalSwap(CreateSviRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(svi_, other->svi_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateSviRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_l3_5fxpu_5finfra_5fmgr_2eproto_getter, &descriptor_table_l3_5fxpu_5finfra_5fmgr_2eproto_once,
      file_level_metadata_l3_5fxpu_5finfra_5fmgr_2eproto[8]);
}

// ===================================================================

class ListSvisRequest::_Internal {
 public:
};

ListSvisRequest::ListSvisRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.evpn_gw.v1alpha1.ListSvisRequest)
}
ListSvisRequest::ListSvisRequest(const ListSvisRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_page_token().empty()) {
    page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_page_token(), 
      GetArenaForAllocation());
  }
  page_size_ = from.page_size_;
  // @@protoc_insertion_point(copy_constructor:opi_api.network.evpn_gw.v1alpha1.ListSvisRequest)
}

inline void ListSvisRequest::SharedCtor() {
page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
page_size_ = 0;
}

ListSvisRequest::~ListSvisRequest() {
  // @@protoc_insertion_point(destructor:opi_api.network.evpn_gw.v1alpha1.ListSvisRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListSvisRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  page_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListSvisRequest::ArenaDtor(void* object) {
  ListSvisRequest* _this = reinterpret_cast< ListSvisRequest* >(object);
  (void)_this;
}
void ListSvisRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListSvisRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListSvisRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.evpn_gw.v1alpha1.ListSvisRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  page_token_.ClearToEmpty();
  page_size_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListSvisRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 page_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          page_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string page_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_page_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.network.evpn_gw.v1alpha1.ListSvisRequest.page_token"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListSvisRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.evpn_gw.v1alpha1.ListSvisRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 page_size = 1;
  if (this->_internal_page_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_page_size(), target);
  }

  // string page_token = 2;
  if (!this->_internal_page_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_page_token().data(), static_cast<int>(this->_internal_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.evpn_gw.v1alpha1.ListSvisRequest.page_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_page_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.evpn_gw.v1alpha1.ListSvisRequest)
  return target;
}

size_t ListSvisRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.evpn_gw.v1alpha1.ListSvisRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string page_token = 2;
  if (!this->_internal_page_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_page_token());
  }

  // int32 page_size = 1;
  if (this->_internal_page_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_page_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListSvisRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListSvisRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListSvisRequest::GetClassData() const { return &_class_data_; }

void ListSvisRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListSvisRequest *>(to)->MergeFrom(
      static_cast<const ListSvisRequest &>(from));
}


void ListSvisRequest::MergeFrom(const ListSvisRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.evpn_gw.v1alpha1.ListSvisRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_page_token().empty()) {
    _internal_set_page_token(from._internal_page_token());
  }
  if (from._internal_page_size() != 0) {
    _internal_set_page_size(from._internal_page_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListSvisRequest::CopyFrom(const ListSvisRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.evpn_gw.v1alpha1.ListSvisRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListSvisRequest::IsInitialized() const {
  return true;
}

void ListSvisRequest::InternalSwap(ListSvisRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &page_token_, lhs_arena,
      &other->page_token_, rhs_arena
  );
  swap(page_size_, other->page_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListSvisRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_l3_5fxpu_5finfra_5fmgr_2eproto_getter, &descriptor_table_l3_5fxpu_5finfra_5fmgr_2eproto_once,
      file_level_metadata_l3_5fxpu_5finfra_5fmgr_2eproto[9]);
}

// ===================================================================

class ListSvisResponse::_Internal {
 public:
};

ListSvisResponse::ListSvisResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  svis_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.evpn_gw.v1alpha1.ListSvisResponse)
}
ListSvisResponse::ListSvisResponse(const ListSvisResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      svis_(from.svis_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  next_page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_next_page_token().empty()) {
    next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_next_page_token(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.evpn_gw.v1alpha1.ListSvisResponse)
}

inline void ListSvisResponse::SharedCtor() {
next_page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListSvisResponse::~ListSvisResponse() {
  // @@protoc_insertion_point(destructor:opi_api.network.evpn_gw.v1alpha1.ListSvisResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListSvisResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  next_page_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListSvisResponse::ArenaDtor(void* object) {
  ListSvisResponse* _this = reinterpret_cast< ListSvisResponse* >(object);
  (void)_this;
}
void ListSvisResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListSvisResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListSvisResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.evpn_gw.v1alpha1.ListSvisResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  svis_.Clear();
  next_page_token_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListSvisResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .opi_api.network.evpn_gw.v1alpha1.Svi svis = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_svis(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string next_page_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_next_page_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.network.evpn_gw.v1alpha1.ListSvisResponse.next_page_token"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListSvisResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.evpn_gw.v1alpha1.ListSvisResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opi_api.network.evpn_gw.v1alpha1.Svi svis = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_svis_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_svis(i), target, stream);
  }

  // string next_page_token = 2;
  if (!this->_internal_next_page_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_next_page_token().data(), static_cast<int>(this->_internal_next_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.evpn_gw.v1alpha1.ListSvisResponse.next_page_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_next_page_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.evpn_gw.v1alpha1.ListSvisResponse)
  return target;
}

size_t ListSvisResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.evpn_gw.v1alpha1.ListSvisResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opi_api.network.evpn_gw.v1alpha1.Svi svis = 1;
  total_size += 1UL * this->_internal_svis_size();
  for (const auto& msg : this->svis_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string next_page_token = 2;
  if (!this->_internal_next_page_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_next_page_token());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListSvisResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListSvisResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListSvisResponse::GetClassData() const { return &_class_data_; }

void ListSvisResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListSvisResponse *>(to)->MergeFrom(
      static_cast<const ListSvisResponse &>(from));
}


void ListSvisResponse::MergeFrom(const ListSvisResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.evpn_gw.v1alpha1.ListSvisResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  svis_.MergeFrom(from.svis_);
  if (!from._internal_next_page_token().empty()) {
    _internal_set_next_page_token(from._internal_next_page_token());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListSvisResponse::CopyFrom(const ListSvisResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.evpn_gw.v1alpha1.ListSvisResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListSvisResponse::IsInitialized() const {
  return true;
}

void ListSvisResponse::InternalSwap(ListSvisResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  svis_.InternalSwap(&other->svis_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &next_page_token_, lhs_arena,
      &other->next_page_token_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ListSvisResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_l3_5fxpu_5finfra_5fmgr_2eproto_getter, &descriptor_table_l3_5fxpu_5finfra_5fmgr_2eproto_once,
      file_level_metadata_l3_5fxpu_5finfra_5fmgr_2eproto[10]);
}

// ===================================================================

class GetSviRequest::_Internal {
 public:
};

GetSviRequest::GetSviRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.evpn_gw.v1alpha1.GetSviRequest)
}
GetSviRequest::GetSviRequest(const GetSviRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vrf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    vrf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vrf().empty()) {
    vrf_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vrf(), 
      GetArenaForAllocation());
  }
  vlan_id_ = from.vlan_id_;
  // @@protoc_insertion_point(copy_constructor:opi_api.network.evpn_gw.v1alpha1.GetSviRequest)
}

inline void GetSviRequest::SharedCtor() {
vrf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  vrf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
vlan_id_ = 0u;
}

GetSviRequest::~GetSviRequest() {
  // @@protoc_insertion_point(destructor:opi_api.network.evpn_gw.v1alpha1.GetSviRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetSviRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  vrf_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetSviRequest::ArenaDtor(void* object) {
  GetSviRequest* _this = reinterpret_cast< GetSviRequest* >(object);
  (void)_this;
}
void GetSviRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetSviRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetSviRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.evpn_gw.v1alpha1.GetSviRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vrf_.ClearToEmpty();
  vlan_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSviRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string vrf = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_vrf();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.network.evpn_gw.v1alpha1.GetSviRequest.vrf"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 vlan_id = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          vlan_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetSviRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.evpn_gw.v1alpha1.GetSviRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string vrf = 1 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_vrf().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vrf().data(), static_cast<int>(this->_internal_vrf().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.evpn_gw.v1alpha1.GetSviRequest.vrf");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_vrf(), target);
  }

  // uint32 vlan_id = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_vlan_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_vlan_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.evpn_gw.v1alpha1.GetSviRequest)
  return target;
}

size_t GetSviRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.evpn_gw.v1alpha1.GetSviRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string vrf = 1 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_vrf().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vrf());
  }

  // uint32 vlan_id = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_vlan_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_vlan_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSviRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetSviRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSviRequest::GetClassData() const { return &_class_data_; }

void GetSviRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetSviRequest *>(to)->MergeFrom(
      static_cast<const GetSviRequest &>(from));
}


void GetSviRequest::MergeFrom(const GetSviRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.evpn_gw.v1alpha1.GetSviRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_vrf().empty()) {
    _internal_set_vrf(from._internal_vrf());
  }
  if (from._internal_vlan_id() != 0) {
    _internal_set_vlan_id(from._internal_vlan_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSviRequest::CopyFrom(const GetSviRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.evpn_gw.v1alpha1.GetSviRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSviRequest::IsInitialized() const {
  return true;
}

void GetSviRequest::InternalSwap(GetSviRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &vrf_, lhs_arena,
      &other->vrf_, rhs_arena
  );
  swap(vlan_id_, other->vlan_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSviRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_l3_5fxpu_5finfra_5fmgr_2eproto_getter, &descriptor_table_l3_5fxpu_5finfra_5fmgr_2eproto_once,
      file_level_metadata_l3_5fxpu_5finfra_5fmgr_2eproto[11]);
}

// ===================================================================

class DeleteSviRequest::_Internal {
 public:
};

DeleteSviRequest::DeleteSviRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.evpn_gw.v1alpha1.DeleteSviRequest)
}
DeleteSviRequest::DeleteSviRequest(const DeleteSviRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vrf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    vrf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vrf().empty()) {
    vrf_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vrf(), 
      GetArenaForAllocation());
  }
  vlan_id_ = from.vlan_id_;
  // @@protoc_insertion_point(copy_constructor:opi_api.network.evpn_gw.v1alpha1.DeleteSviRequest)
}

inline void DeleteSviRequest::SharedCtor() {
vrf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  vrf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
vlan_id_ = 0u;
}

DeleteSviRequest::~DeleteSviRequest() {
  // @@protoc_insertion_point(destructor:opi_api.network.evpn_gw.v1alpha1.DeleteSviRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteSviRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  vrf_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteSviRequest::ArenaDtor(void* object) {
  DeleteSviRequest* _this = reinterpret_cast< DeleteSviRequest* >(object);
  (void)_this;
}
void DeleteSviRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteSviRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteSviRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.evpn_gw.v1alpha1.DeleteSviRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vrf_.ClearToEmpty();
  vlan_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteSviRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string vrf = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_vrf();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.network.evpn_gw.v1alpha1.DeleteSviRequest.vrf"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 vlan_id = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          vlan_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteSviRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.evpn_gw.v1alpha1.DeleteSviRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string vrf = 1 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_vrf().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vrf().data(), static_cast<int>(this->_internal_vrf().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.evpn_gw.v1alpha1.DeleteSviRequest.vrf");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_vrf(), target);
  }

  // uint32 vlan_id = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_vlan_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_vlan_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.evpn_gw.v1alpha1.DeleteSviRequest)
  return target;
}

size_t DeleteSviRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.evpn_gw.v1alpha1.DeleteSviRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string vrf = 1 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_vrf().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vrf());
  }

  // uint32 vlan_id = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_vlan_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_vlan_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteSviRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteSviRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteSviRequest::GetClassData() const { return &_class_data_; }

void DeleteSviRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteSviRequest *>(to)->MergeFrom(
      static_cast<const DeleteSviRequest &>(from));
}


void DeleteSviRequest::MergeFrom(const DeleteSviRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.evpn_gw.v1alpha1.DeleteSviRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_vrf().empty()) {
    _internal_set_vrf(from._internal_vrf());
  }
  if (from._internal_vlan_id() != 0) {
    _internal_set_vlan_id(from._internal_vlan_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteSviRequest::CopyFrom(const DeleteSviRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.evpn_gw.v1alpha1.DeleteSviRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteSviRequest::IsInitialized() const {
  return true;
}

void DeleteSviRequest::InternalSwap(DeleteSviRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &vrf_, lhs_arena,
      &other->vrf_, rhs_arena
  );
  swap(vlan_id_, other->vlan_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteSviRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_l3_5fxpu_5finfra_5fmgr_2eproto_getter, &descriptor_table_l3_5fxpu_5finfra_5fmgr_2eproto_once,
      file_level_metadata_l3_5fxpu_5finfra_5fmgr_2eproto[12]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha1
}  // namespace evpn_gw
}  // namespace network
}  // namespace opi_api
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::opi_api::network::evpn_gw::v1alpha1::Vrf* Arena::CreateMaybeMessage< ::opi_api::network::evpn_gw::v1alpha1::Vrf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::evpn_gw::v1alpha1::Vrf >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::evpn_gw::v1alpha1::CreateVrfRequest* Arena::CreateMaybeMessage< ::opi_api::network::evpn_gw::v1alpha1::CreateVrfRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::evpn_gw::v1alpha1::CreateVrfRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::evpn_gw::v1alpha1::ListVrfsRequest* Arena::CreateMaybeMessage< ::opi_api::network::evpn_gw::v1alpha1::ListVrfsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::evpn_gw::v1alpha1::ListVrfsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::evpn_gw::v1alpha1::ListVrfsResponse* Arena::CreateMaybeMessage< ::opi_api::network::evpn_gw::v1alpha1::ListVrfsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::evpn_gw::v1alpha1::ListVrfsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::evpn_gw::v1alpha1::GetVrfRequest* Arena::CreateMaybeMessage< ::opi_api::network::evpn_gw::v1alpha1::GetVrfRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::evpn_gw::v1alpha1::GetVrfRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::evpn_gw::v1alpha1::DeleteVrfRequest* Arena::CreateMaybeMessage< ::opi_api::network::evpn_gw::v1alpha1::DeleteVrfRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::evpn_gw::v1alpha1::DeleteVrfRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::evpn_gw::v1alpha1::IpAddressMasklen* Arena::CreateMaybeMessage< ::opi_api::network::evpn_gw::v1alpha1::IpAddressMasklen >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::evpn_gw::v1alpha1::IpAddressMasklen >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::evpn_gw::v1alpha1::Svi* Arena::CreateMaybeMessage< ::opi_api::network::evpn_gw::v1alpha1::Svi >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::evpn_gw::v1alpha1::Svi >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::evpn_gw::v1alpha1::CreateSviRequest* Arena::CreateMaybeMessage< ::opi_api::network::evpn_gw::v1alpha1::CreateSviRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::evpn_gw::v1alpha1::CreateSviRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::evpn_gw::v1alpha1::ListSvisRequest* Arena::CreateMaybeMessage< ::opi_api::network::evpn_gw::v1alpha1::ListSvisRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::evpn_gw::v1alpha1::ListSvisRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::evpn_gw::v1alpha1::ListSvisResponse* Arena::CreateMaybeMessage< ::opi_api::network::evpn_gw::v1alpha1::ListSvisResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::evpn_gw::v1alpha1::ListSvisResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::evpn_gw::v1alpha1::GetSviRequest* Arena::CreateMaybeMessage< ::opi_api::network::evpn_gw::v1alpha1::GetSviRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::evpn_gw::v1alpha1::GetSviRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::evpn_gw::v1alpha1::DeleteSviRequest* Arena::CreateMaybeMessage< ::opi_api::network::evpn_gw::v1alpha1::DeleteSviRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::evpn_gw::v1alpha1::DeleteSviRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
