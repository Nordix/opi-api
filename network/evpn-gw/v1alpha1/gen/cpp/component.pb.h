// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: component.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_component_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_component_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/field_behavior.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_component_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_component_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_component_2eproto;
namespace opi_api {
namespace network {
namespace evpn_gw {
namespace v1alpha1 {
class Component;
struct ComponentDefaultTypeInternal;
extern ComponentDefaultTypeInternal _Component_default_instance_;
}  // namespace v1alpha1
}  // namespace evpn_gw
}  // namespace network
}  // namespace opi_api
PROTOBUF_NAMESPACE_OPEN
template<> ::opi_api::network::evpn_gw::v1alpha1::Component* Arena::CreateMaybeMessage<::opi_api::network::evpn_gw::v1alpha1::Component>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace opi_api {
namespace network {
namespace evpn_gw {
namespace v1alpha1 {

enum CompStatus : int {
  COMP_STATUS_UNSPECIFIED = 0,
  COMP_STATUS_PENDING = 1,
  COMP_STATUS_SUCCESS = 2,
  COMP_STATUS_ERROR = 3,
  CompStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CompStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CompStatus_IsValid(int value);
constexpr CompStatus CompStatus_MIN = COMP_STATUS_UNSPECIFIED;
constexpr CompStatus CompStatus_MAX = COMP_STATUS_ERROR;
constexpr int CompStatus_ARRAYSIZE = CompStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CompStatus_descriptor();
template<typename T>
inline const std::string& CompStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CompStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CompStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CompStatus_descriptor(), enum_t_value);
}
inline bool CompStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CompStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CompStatus>(
    CompStatus_descriptor(), name, value);
}
// ===================================================================

class Component final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.evpn_gw.v1alpha1.Component) */ {
 public:
  inline Component() : Component(nullptr) {}
  ~Component() override;
  explicit PROTOBUF_CONSTEXPR Component(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Component(const Component& from);
  Component(Component&& from) noexcept
    : Component() {
    *this = ::std::move(from);
  }

  inline Component& operator=(const Component& from) {
    CopyFrom(from);
    return *this;
  }
  inline Component& operator=(Component&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Component& default_instance() {
    return *internal_default_instance();
  }
  static inline const Component* internal_default_instance() {
    return reinterpret_cast<const Component*>(
               &_Component_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Component& a, Component& b) {
    a.Swap(&b);
  }
  inline void Swap(Component* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Component* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Component* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Component>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Component& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Component& from) {
    Component::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Component* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.evpn_gw.v1alpha1.Component";
  }
  protected:
  explicit Component(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDetailsFieldNumber = 3,
    kStatusFieldNumber = 2,
  };
  // string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string details = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_details();
  const std::string& details() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_details(ArgT0&& arg0, ArgT... args);
  std::string* mutable_details();
  PROTOBUF_NODISCARD std::string* release_details();
  void set_allocated_details(std::string* details);
  private:
  const std::string& _internal_details() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_details(const std::string& value);
  std::string* _internal_mutable_details();
  public:

  // .opi_api.network.evpn_gw.v1alpha1.CompStatus status = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_status();
  ::opi_api::network::evpn_gw::v1alpha1::CompStatus status() const;
  void set_status(::opi_api::network::evpn_gw::v1alpha1::CompStatus value);
  private:
  ::opi_api::network::evpn_gw::v1alpha1::CompStatus _internal_status() const;
  void _internal_set_status(::opi_api::network::evpn_gw::v1alpha1::CompStatus value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.evpn_gw.v1alpha1.Component)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr details_;
    int status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_component_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Component

// string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void Component::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Component::name() const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.Component.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Component::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.evpn_gw.v1alpha1.Component.name)
}
inline std::string* Component::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opi_api.network.evpn_gw.v1alpha1.Component.name)
  return _s;
}
inline const std::string& Component::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Component::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Component::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Component::release_name() {
  // @@protoc_insertion_point(field_release:opi_api.network.evpn_gw.v1alpha1.Component.name)
  return _impl_.name_.Release();
}
inline void Component::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.evpn_gw.v1alpha1.Component.name)
}

// .opi_api.network.evpn_gw.v1alpha1.CompStatus status = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void Component::clear_status() {
  _impl_.status_ = 0;
}
inline ::opi_api::network::evpn_gw::v1alpha1::CompStatus Component::_internal_status() const {
  return static_cast< ::opi_api::network::evpn_gw::v1alpha1::CompStatus >(_impl_.status_);
}
inline ::opi_api::network::evpn_gw::v1alpha1::CompStatus Component::status() const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.Component.status)
  return _internal_status();
}
inline void Component::_internal_set_status(::opi_api::network::evpn_gw::v1alpha1::CompStatus value) {
  
  _impl_.status_ = value;
}
inline void Component::set_status(::opi_api::network::evpn_gw::v1alpha1::CompStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:opi_api.network.evpn_gw.v1alpha1.Component.status)
}

// string details = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void Component::clear_details() {
  _impl_.details_.ClearToEmpty();
}
inline const std::string& Component::details() const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.Component.details)
  return _internal_details();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Component::set_details(ArgT0&& arg0, ArgT... args) {
 
 _impl_.details_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.evpn_gw.v1alpha1.Component.details)
}
inline std::string* Component::mutable_details() {
  std::string* _s = _internal_mutable_details();
  // @@protoc_insertion_point(field_mutable:opi_api.network.evpn_gw.v1alpha1.Component.details)
  return _s;
}
inline const std::string& Component::_internal_details() const {
  return _impl_.details_.Get();
}
inline void Component::_internal_set_details(const std::string& value) {
  
  _impl_.details_.Set(value, GetArenaForAllocation());
}
inline std::string* Component::_internal_mutable_details() {
  
  return _impl_.details_.Mutable(GetArenaForAllocation());
}
inline std::string* Component::release_details() {
  // @@protoc_insertion_point(field_release:opi_api.network.evpn_gw.v1alpha1.Component.details)
  return _impl_.details_.Release();
}
inline void Component::set_allocated_details(std::string* details) {
  if (details != nullptr) {
    
  } else {
    
  }
  _impl_.details_.SetAllocated(details, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.details_.IsDefault()) {
    _impl_.details_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.evpn_gw.v1alpha1.Component.details)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace evpn_gw
}  // namespace network
}  // namespace opi_api

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::opi_api::network::evpn_gw::v1alpha1::CompStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opi_api::network::evpn_gw::v1alpha1::CompStatus>() {
  return ::opi_api::network::evpn_gw::v1alpha1::CompStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_component_2eproto
