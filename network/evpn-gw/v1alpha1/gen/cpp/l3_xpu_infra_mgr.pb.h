// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: l3_xpu_infra_mgr.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_l3_5fxpu_5finfra_5fmgr_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_l3_5fxpu_5finfra_5fmgr_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include <google/protobuf/empty.pb.h>
#include "google/api/field_behavior.pb.h"
#include "google/api/resource.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_l3_5fxpu_5finfra_5fmgr_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_l3_5fxpu_5finfra_5fmgr_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[13]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_l3_5fxpu_5finfra_5fmgr_2eproto;
namespace opi_api {
namespace network {
namespace evpn_gw {
namespace v1alpha1 {
class CreateSviRequest;
struct CreateSviRequestDefaultTypeInternal;
extern CreateSviRequestDefaultTypeInternal _CreateSviRequest_default_instance_;
class CreateVrfRequest;
struct CreateVrfRequestDefaultTypeInternal;
extern CreateVrfRequestDefaultTypeInternal _CreateVrfRequest_default_instance_;
class DeleteSviRequest;
struct DeleteSviRequestDefaultTypeInternal;
extern DeleteSviRequestDefaultTypeInternal _DeleteSviRequest_default_instance_;
class DeleteVrfRequest;
struct DeleteVrfRequestDefaultTypeInternal;
extern DeleteVrfRequestDefaultTypeInternal _DeleteVrfRequest_default_instance_;
class GetSviRequest;
struct GetSviRequestDefaultTypeInternal;
extern GetSviRequestDefaultTypeInternal _GetSviRequest_default_instance_;
class GetVrfRequest;
struct GetVrfRequestDefaultTypeInternal;
extern GetVrfRequestDefaultTypeInternal _GetVrfRequest_default_instance_;
class IpAddressMasklen;
struct IpAddressMasklenDefaultTypeInternal;
extern IpAddressMasklenDefaultTypeInternal _IpAddressMasklen_default_instance_;
class ListSvisRequest;
struct ListSvisRequestDefaultTypeInternal;
extern ListSvisRequestDefaultTypeInternal _ListSvisRequest_default_instance_;
class ListSvisResponse;
struct ListSvisResponseDefaultTypeInternal;
extern ListSvisResponseDefaultTypeInternal _ListSvisResponse_default_instance_;
class ListVrfsRequest;
struct ListVrfsRequestDefaultTypeInternal;
extern ListVrfsRequestDefaultTypeInternal _ListVrfsRequest_default_instance_;
class ListVrfsResponse;
struct ListVrfsResponseDefaultTypeInternal;
extern ListVrfsResponseDefaultTypeInternal _ListVrfsResponse_default_instance_;
class Svi;
struct SviDefaultTypeInternal;
extern SviDefaultTypeInternal _Svi_default_instance_;
class Vrf;
struct VrfDefaultTypeInternal;
extern VrfDefaultTypeInternal _Vrf_default_instance_;
}  // namespace v1alpha1
}  // namespace evpn_gw
}  // namespace network
}  // namespace opi_api
PROTOBUF_NAMESPACE_OPEN
template<> ::opi_api::network::evpn_gw::v1alpha1::CreateSviRequest* Arena::CreateMaybeMessage<::opi_api::network::evpn_gw::v1alpha1::CreateSviRequest>(Arena*);
template<> ::opi_api::network::evpn_gw::v1alpha1::CreateVrfRequest* Arena::CreateMaybeMessage<::opi_api::network::evpn_gw::v1alpha1::CreateVrfRequest>(Arena*);
template<> ::opi_api::network::evpn_gw::v1alpha1::DeleteSviRequest* Arena::CreateMaybeMessage<::opi_api::network::evpn_gw::v1alpha1::DeleteSviRequest>(Arena*);
template<> ::opi_api::network::evpn_gw::v1alpha1::DeleteVrfRequest* Arena::CreateMaybeMessage<::opi_api::network::evpn_gw::v1alpha1::DeleteVrfRequest>(Arena*);
template<> ::opi_api::network::evpn_gw::v1alpha1::GetSviRequest* Arena::CreateMaybeMessage<::opi_api::network::evpn_gw::v1alpha1::GetSviRequest>(Arena*);
template<> ::opi_api::network::evpn_gw::v1alpha1::GetVrfRequest* Arena::CreateMaybeMessage<::opi_api::network::evpn_gw::v1alpha1::GetVrfRequest>(Arena*);
template<> ::opi_api::network::evpn_gw::v1alpha1::IpAddressMasklen* Arena::CreateMaybeMessage<::opi_api::network::evpn_gw::v1alpha1::IpAddressMasklen>(Arena*);
template<> ::opi_api::network::evpn_gw::v1alpha1::ListSvisRequest* Arena::CreateMaybeMessage<::opi_api::network::evpn_gw::v1alpha1::ListSvisRequest>(Arena*);
template<> ::opi_api::network::evpn_gw::v1alpha1::ListSvisResponse* Arena::CreateMaybeMessage<::opi_api::network::evpn_gw::v1alpha1::ListSvisResponse>(Arena*);
template<> ::opi_api::network::evpn_gw::v1alpha1::ListVrfsRequest* Arena::CreateMaybeMessage<::opi_api::network::evpn_gw::v1alpha1::ListVrfsRequest>(Arena*);
template<> ::opi_api::network::evpn_gw::v1alpha1::ListVrfsResponse* Arena::CreateMaybeMessage<::opi_api::network::evpn_gw::v1alpha1::ListVrfsResponse>(Arena*);
template<> ::opi_api::network::evpn_gw::v1alpha1::Svi* Arena::CreateMaybeMessage<::opi_api::network::evpn_gw::v1alpha1::Svi>(Arena*);
template<> ::opi_api::network::evpn_gw::v1alpha1::Vrf* Arena::CreateMaybeMessage<::opi_api::network::evpn_gw::v1alpha1::Vrf>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace opi_api {
namespace network {
namespace evpn_gw {
namespace v1alpha1 {

// ===================================================================

class Vrf final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.evpn_gw.v1alpha1.Vrf) */ {
 public:
  inline Vrf() : Vrf(nullptr) {}
  ~Vrf() override;
  explicit constexpr Vrf(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vrf(const Vrf& from);
  Vrf(Vrf&& from) noexcept
    : Vrf() {
    *this = ::std::move(from);
  }

  inline Vrf& operator=(const Vrf& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vrf& operator=(Vrf&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vrf& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vrf* internal_default_instance() {
    return reinterpret_cast<const Vrf*>(
               &_Vrf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Vrf& a, Vrf& b) {
    a.Swap(&b);
  }
  inline void Swap(Vrf* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vrf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vrf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vrf>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vrf& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Vrf& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vrf* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.evpn_gw.v1alpha1.Vrf";
  }
  protected:
  explicit Vrf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImportRtsFieldNumber = 9,
    kExportRtsFieldNumber = 10,
    kVlanIdsFieldNumber = 11,
    kNameFieldNumber = 1,
    kLoopbackIpFieldNumber = 4,
    kVtepIpFieldNumber = 5,
    kRdFieldNumber = 7,
    kRmacFieldNumber = 8,
    kVniFieldNumber = 2,
    kRoutingTableFieldNumber = 3,
    kLocalAsFieldNumber = 6,
  };
  // repeated string import_rts = 9;
  int import_rts_size() const;
  private:
  int _internal_import_rts_size() const;
  public:
  void clear_import_rts();
  const std::string& import_rts(int index) const;
  std::string* mutable_import_rts(int index);
  void set_import_rts(int index, const std::string& value);
  void set_import_rts(int index, std::string&& value);
  void set_import_rts(int index, const char* value);
  void set_import_rts(int index, const char* value, size_t size);
  std::string* add_import_rts();
  void add_import_rts(const std::string& value);
  void add_import_rts(std::string&& value);
  void add_import_rts(const char* value);
  void add_import_rts(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& import_rts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_import_rts();
  private:
  const std::string& _internal_import_rts(int index) const;
  std::string* _internal_add_import_rts();
  public:

  // repeated string export_rts = 10;
  int export_rts_size() const;
  private:
  int _internal_export_rts_size() const;
  public:
  void clear_export_rts();
  const std::string& export_rts(int index) const;
  std::string* mutable_export_rts(int index);
  void set_export_rts(int index, const std::string& value);
  void set_export_rts(int index, std::string&& value);
  void set_export_rts(int index, const char* value);
  void set_export_rts(int index, const char* value, size_t size);
  std::string* add_export_rts();
  void add_export_rts(const std::string& value);
  void add_export_rts(std::string&& value);
  void add_export_rts(const char* value);
  void add_export_rts(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& export_rts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_export_rts();
  private:
  const std::string& _internal_export_rts(int index) const;
  std::string* _internal_add_export_rts();
  public:

  // repeated uint32 vlan_ids = 11;
  int vlan_ids_size() const;
  private:
  int _internal_vlan_ids_size() const;
  public:
  void clear_vlan_ids();
  private:
  uint32_t _internal_vlan_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_vlan_ids() const;
  void _internal_add_vlan_ids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_vlan_ids();
  public:
  uint32_t vlan_ids(int index) const;
  void set_vlan_ids(int index, uint32_t value);
  void add_vlan_ids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      vlan_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_vlan_ids();

  // string name = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string loopback_ip = 4 [(.google.api.field_behavior) = REQUIRED];
  void clear_loopback_ip();
  const std::string& loopback_ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_loopback_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_loopback_ip();
  PROTOBUF_NODISCARD std::string* release_loopback_ip();
  void set_allocated_loopback_ip(std::string* loopback_ip);
  private:
  const std::string& _internal_loopback_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_loopback_ip(const std::string& value);
  std::string* _internal_mutable_loopback_ip();
  public:

  // string vtep_ip = 5;
  void clear_vtep_ip();
  const std::string& vtep_ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vtep_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vtep_ip();
  PROTOBUF_NODISCARD std::string* release_vtep_ip();
  void set_allocated_vtep_ip(std::string* vtep_ip);
  private:
  const std::string& _internal_vtep_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vtep_ip(const std::string& value);
  std::string* _internal_mutable_vtep_ip();
  public:

  // string rd = 7;
  void clear_rd();
  const std::string& rd() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rd(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rd();
  PROTOBUF_NODISCARD std::string* release_rd();
  void set_allocated_rd(std::string* rd);
  private:
  const std::string& _internal_rd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rd(const std::string& value);
  std::string* _internal_mutable_rd();
  public:

  // string rmac = 8;
  void clear_rmac();
  const std::string& rmac() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rmac(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rmac();
  PROTOBUF_NODISCARD std::string* release_rmac();
  void set_allocated_rmac(std::string* rmac);
  private:
  const std::string& _internal_rmac() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rmac(const std::string& value);
  std::string* _internal_mutable_rmac();
  public:

  // uint32 vni = 2;
  void clear_vni();
  uint32_t vni() const;
  void set_vni(uint32_t value);
  private:
  uint32_t _internal_vni() const;
  void _internal_set_vni(uint32_t value);
  public:

  // uint32 routing_table = 3;
  void clear_routing_table();
  uint32_t routing_table() const;
  void set_routing_table(uint32_t value);
  private:
  uint32_t _internal_routing_table() const;
  void _internal_set_routing_table(uint32_t value);
  public:

  // uint32 local_as = 6;
  void clear_local_as();
  uint32_t local_as() const;
  void set_local_as(uint32_t value);
  private:
  uint32_t _internal_local_as() const;
  void _internal_set_local_as(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.evpn_gw.v1alpha1.Vrf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> import_rts_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> export_rts_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > vlan_ids_;
  mutable std::atomic<int> _vlan_ids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr loopback_ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vtep_ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rd_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rmac_;
  uint32_t vni_;
  uint32_t routing_table_;
  uint32_t local_as_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_l3_5fxpu_5finfra_5fmgr_2eproto;
};
// -------------------------------------------------------------------

class CreateVrfRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.evpn_gw.v1alpha1.CreateVrfRequest) */ {
 public:
  inline CreateVrfRequest() : CreateVrfRequest(nullptr) {}
  ~CreateVrfRequest() override;
  explicit constexpr CreateVrfRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateVrfRequest(const CreateVrfRequest& from);
  CreateVrfRequest(CreateVrfRequest&& from) noexcept
    : CreateVrfRequest() {
    *this = ::std::move(from);
  }

  inline CreateVrfRequest& operator=(const CreateVrfRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateVrfRequest& operator=(CreateVrfRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateVrfRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateVrfRequest* internal_default_instance() {
    return reinterpret_cast<const CreateVrfRequest*>(
               &_CreateVrfRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateVrfRequest& a, CreateVrfRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateVrfRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateVrfRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateVrfRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateVrfRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateVrfRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateVrfRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateVrfRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.evpn_gw.v1alpha1.CreateVrfRequest";
  }
  protected:
  explicit CreateVrfRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVrfFieldNumber = 1,
  };
  // .opi_api.network.evpn_gw.v1alpha1.Vrf vrf = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_vrf() const;
  private:
  bool _internal_has_vrf() const;
  public:
  void clear_vrf();
  const ::opi_api::network::evpn_gw::v1alpha1::Vrf& vrf() const;
  PROTOBUF_NODISCARD ::opi_api::network::evpn_gw::v1alpha1::Vrf* release_vrf();
  ::opi_api::network::evpn_gw::v1alpha1::Vrf* mutable_vrf();
  void set_allocated_vrf(::opi_api::network::evpn_gw::v1alpha1::Vrf* vrf);
  private:
  const ::opi_api::network::evpn_gw::v1alpha1::Vrf& _internal_vrf() const;
  ::opi_api::network::evpn_gw::v1alpha1::Vrf* _internal_mutable_vrf();
  public:
  void unsafe_arena_set_allocated_vrf(
      ::opi_api::network::evpn_gw::v1alpha1::Vrf* vrf);
  ::opi_api::network::evpn_gw::v1alpha1::Vrf* unsafe_arena_release_vrf();

  // @@protoc_insertion_point(class_scope:opi_api.network.evpn_gw.v1alpha1.CreateVrfRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::network::evpn_gw::v1alpha1::Vrf* vrf_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_l3_5fxpu_5finfra_5fmgr_2eproto;
};
// -------------------------------------------------------------------

class ListVrfsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.evpn_gw.v1alpha1.ListVrfsRequest) */ {
 public:
  inline ListVrfsRequest() : ListVrfsRequest(nullptr) {}
  ~ListVrfsRequest() override;
  explicit constexpr ListVrfsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListVrfsRequest(const ListVrfsRequest& from);
  ListVrfsRequest(ListVrfsRequest&& from) noexcept
    : ListVrfsRequest() {
    *this = ::std::move(from);
  }

  inline ListVrfsRequest& operator=(const ListVrfsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListVrfsRequest& operator=(ListVrfsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListVrfsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListVrfsRequest* internal_default_instance() {
    return reinterpret_cast<const ListVrfsRequest*>(
               &_ListVrfsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ListVrfsRequest& a, ListVrfsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListVrfsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListVrfsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListVrfsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListVrfsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListVrfsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListVrfsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListVrfsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.evpn_gw.v1alpha1.ListVrfsRequest";
  }
  protected:
  explicit ListVrfsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPageTokenFieldNumber = 2,
    kPageSizeFieldNumber = 1,
  };
  // string page_token = 2;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 1;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.evpn_gw.v1alpha1.ListVrfsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
  int32_t page_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_l3_5fxpu_5finfra_5fmgr_2eproto;
};
// -------------------------------------------------------------------

class ListVrfsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.evpn_gw.v1alpha1.ListVrfsResponse) */ {
 public:
  inline ListVrfsResponse() : ListVrfsResponse(nullptr) {}
  ~ListVrfsResponse() override;
  explicit constexpr ListVrfsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListVrfsResponse(const ListVrfsResponse& from);
  ListVrfsResponse(ListVrfsResponse&& from) noexcept
    : ListVrfsResponse() {
    *this = ::std::move(from);
  }

  inline ListVrfsResponse& operator=(const ListVrfsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListVrfsResponse& operator=(ListVrfsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListVrfsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListVrfsResponse* internal_default_instance() {
    return reinterpret_cast<const ListVrfsResponse*>(
               &_ListVrfsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ListVrfsResponse& a, ListVrfsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListVrfsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListVrfsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListVrfsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListVrfsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListVrfsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListVrfsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListVrfsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.evpn_gw.v1alpha1.ListVrfsResponse";
  }
  protected:
  explicit ListVrfsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVrfsFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .opi_api.network.evpn_gw.v1alpha1.Vrf vrfs = 1;
  int vrfs_size() const;
  private:
  int _internal_vrfs_size() const;
  public:
  void clear_vrfs();
  ::opi_api::network::evpn_gw::v1alpha1::Vrf* mutable_vrfs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::evpn_gw::v1alpha1::Vrf >*
      mutable_vrfs();
  private:
  const ::opi_api::network::evpn_gw::v1alpha1::Vrf& _internal_vrfs(int index) const;
  ::opi_api::network::evpn_gw::v1alpha1::Vrf* _internal_add_vrfs();
  public:
  const ::opi_api::network::evpn_gw::v1alpha1::Vrf& vrfs(int index) const;
  ::opi_api::network::evpn_gw::v1alpha1::Vrf* add_vrfs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::evpn_gw::v1alpha1::Vrf >&
      vrfs() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.evpn_gw.v1alpha1.ListVrfsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::evpn_gw::v1alpha1::Vrf > vrfs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_l3_5fxpu_5finfra_5fmgr_2eproto;
};
// -------------------------------------------------------------------

class GetVrfRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.evpn_gw.v1alpha1.GetVrfRequest) */ {
 public:
  inline GetVrfRequest() : GetVrfRequest(nullptr) {}
  ~GetVrfRequest() override;
  explicit constexpr GetVrfRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetVrfRequest(const GetVrfRequest& from);
  GetVrfRequest(GetVrfRequest&& from) noexcept
    : GetVrfRequest() {
    *this = ::std::move(from);
  }

  inline GetVrfRequest& operator=(const GetVrfRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVrfRequest& operator=(GetVrfRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetVrfRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetVrfRequest* internal_default_instance() {
    return reinterpret_cast<const GetVrfRequest*>(
               &_GetVrfRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetVrfRequest& a, GetVrfRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetVrfRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetVrfRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetVrfRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetVrfRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetVrfRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetVrfRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVrfRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.evpn_gw.v1alpha1.GetVrfRequest";
  }
  protected:
  explicit GetVrfRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.evpn_gw.v1alpha1.GetVrfRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_l3_5fxpu_5finfra_5fmgr_2eproto;
};
// -------------------------------------------------------------------

class DeleteVrfRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.evpn_gw.v1alpha1.DeleteVrfRequest) */ {
 public:
  inline DeleteVrfRequest() : DeleteVrfRequest(nullptr) {}
  ~DeleteVrfRequest() override;
  explicit constexpr DeleteVrfRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteVrfRequest(const DeleteVrfRequest& from);
  DeleteVrfRequest(DeleteVrfRequest&& from) noexcept
    : DeleteVrfRequest() {
    *this = ::std::move(from);
  }

  inline DeleteVrfRequest& operator=(const DeleteVrfRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteVrfRequest& operator=(DeleteVrfRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteVrfRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteVrfRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteVrfRequest*>(
               &_DeleteVrfRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DeleteVrfRequest& a, DeleteVrfRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteVrfRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteVrfRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteVrfRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteVrfRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteVrfRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteVrfRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteVrfRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.evpn_gw.v1alpha1.DeleteVrfRequest";
  }
  protected:
  explicit DeleteVrfRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.evpn_gw.v1alpha1.DeleteVrfRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_l3_5fxpu_5finfra_5fmgr_2eproto;
};
// -------------------------------------------------------------------

class IpAddressMasklen final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.evpn_gw.v1alpha1.IpAddressMasklen) */ {
 public:
  inline IpAddressMasklen() : IpAddressMasklen(nullptr) {}
  ~IpAddressMasklen() override;
  explicit constexpr IpAddressMasklen(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IpAddressMasklen(const IpAddressMasklen& from);
  IpAddressMasklen(IpAddressMasklen&& from) noexcept
    : IpAddressMasklen() {
    *this = ::std::move(from);
  }

  inline IpAddressMasklen& operator=(const IpAddressMasklen& from) {
    CopyFrom(from);
    return *this;
  }
  inline IpAddressMasklen& operator=(IpAddressMasklen&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IpAddressMasklen& default_instance() {
    return *internal_default_instance();
  }
  static inline const IpAddressMasklen* internal_default_instance() {
    return reinterpret_cast<const IpAddressMasklen*>(
               &_IpAddressMasklen_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(IpAddressMasklen& a, IpAddressMasklen& b) {
    a.Swap(&b);
  }
  inline void Swap(IpAddressMasklen* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IpAddressMasklen* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IpAddressMasklen* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IpAddressMasklen>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IpAddressMasklen& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IpAddressMasklen& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IpAddressMasklen* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.evpn_gw.v1alpha1.IpAddressMasklen";
  }
  protected:
  explicit IpAddressMasklen(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpAddrFieldNumber = 1,
    kLenFieldNumber = 2,
  };
  // string ip_addr = 1;
  void clear_ip_addr();
  const std::string& ip_addr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip_addr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip_addr();
  PROTOBUF_NODISCARD std::string* release_ip_addr();
  void set_allocated_ip_addr(std::string* ip_addr);
  private:
  const std::string& _internal_ip_addr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip_addr(const std::string& value);
  std::string* _internal_mutable_ip_addr();
  public:

  // uint32 len = 2;
  void clear_len();
  uint32_t len() const;
  void set_len(uint32_t value);
  private:
  uint32_t _internal_len() const;
  void _internal_set_len(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.evpn_gw.v1alpha1.IpAddressMasklen)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_addr_;
  uint32_t len_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_l3_5fxpu_5finfra_5fmgr_2eproto;
};
// -------------------------------------------------------------------

class Svi final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.evpn_gw.v1alpha1.Svi) */ {
 public:
  inline Svi() : Svi(nullptr) {}
  ~Svi() override;
  explicit constexpr Svi(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Svi(const Svi& from);
  Svi(Svi&& from) noexcept
    : Svi() {
    *this = ::std::move(from);
  }

  inline Svi& operator=(const Svi& from) {
    CopyFrom(from);
    return *this;
  }
  inline Svi& operator=(Svi&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Svi& default_instance() {
    return *internal_default_instance();
  }
  static inline const Svi* internal_default_instance() {
    return reinterpret_cast<const Svi*>(
               &_Svi_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Svi& a, Svi& b) {
    a.Swap(&b);
  }
  inline void Swap(Svi* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Svi* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Svi* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Svi>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Svi& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Svi& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Svi* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.evpn_gw.v1alpha1.Svi";
  }
  protected:
  explicit Svi(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGwIpFieldNumber = 4,
    kVrfFieldNumber = 1,
    kMacAddressFieldNumber = 3,
    kVlanIdFieldNumber = 2,
    kEnableBgpFieldNumber = 5,
    kRemoteAsFieldNumber = 6,
  };
  // repeated .opi_api.network.evpn_gw.v1alpha1.IpAddressMasklen gw_ip = 4 [(.google.api.field_behavior) = REQUIRED];
  int gw_ip_size() const;
  private:
  int _internal_gw_ip_size() const;
  public:
  void clear_gw_ip();
  ::opi_api::network::evpn_gw::v1alpha1::IpAddressMasklen* mutable_gw_ip(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::evpn_gw::v1alpha1::IpAddressMasklen >*
      mutable_gw_ip();
  private:
  const ::opi_api::network::evpn_gw::v1alpha1::IpAddressMasklen& _internal_gw_ip(int index) const;
  ::opi_api::network::evpn_gw::v1alpha1::IpAddressMasklen* _internal_add_gw_ip();
  public:
  const ::opi_api::network::evpn_gw::v1alpha1::IpAddressMasklen& gw_ip(int index) const;
  ::opi_api::network::evpn_gw::v1alpha1::IpAddressMasklen* add_gw_ip();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::evpn_gw::v1alpha1::IpAddressMasklen >&
      gw_ip() const;

  // string vrf = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_vrf();
  const std::string& vrf() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vrf(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vrf();
  PROTOBUF_NODISCARD std::string* release_vrf();
  void set_allocated_vrf(std::string* vrf);
  private:
  const std::string& _internal_vrf() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vrf(const std::string& value);
  std::string* _internal_mutable_vrf();
  public:

  // string mac_address = 3 [(.google.api.field_behavior) = REQUIRED];
  void clear_mac_address();
  const std::string& mac_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mac_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mac_address();
  PROTOBUF_NODISCARD std::string* release_mac_address();
  void set_allocated_mac_address(std::string* mac_address);
  private:
  const std::string& _internal_mac_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mac_address(const std::string& value);
  std::string* _internal_mutable_mac_address();
  public:

  // uint32 vlan_id = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_vlan_id();
  uint32_t vlan_id() const;
  void set_vlan_id(uint32_t value);
  private:
  uint32_t _internal_vlan_id() const;
  void _internal_set_vlan_id(uint32_t value);
  public:

  // bool enable_bgp = 5;
  void clear_enable_bgp();
  bool enable_bgp() const;
  void set_enable_bgp(bool value);
  private:
  bool _internal_enable_bgp() const;
  void _internal_set_enable_bgp(bool value);
  public:

  // uint32 remote_as = 6;
  void clear_remote_as();
  uint32_t remote_as() const;
  void set_remote_as(uint32_t value);
  private:
  uint32_t _internal_remote_as() const;
  void _internal_set_remote_as(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.evpn_gw.v1alpha1.Svi)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::evpn_gw::v1alpha1::IpAddressMasklen > gw_ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vrf_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mac_address_;
  uint32_t vlan_id_;
  bool enable_bgp_;
  uint32_t remote_as_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_l3_5fxpu_5finfra_5fmgr_2eproto;
};
// -------------------------------------------------------------------

class CreateSviRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.evpn_gw.v1alpha1.CreateSviRequest) */ {
 public:
  inline CreateSviRequest() : CreateSviRequest(nullptr) {}
  ~CreateSviRequest() override;
  explicit constexpr CreateSviRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateSviRequest(const CreateSviRequest& from);
  CreateSviRequest(CreateSviRequest&& from) noexcept
    : CreateSviRequest() {
    *this = ::std::move(from);
  }

  inline CreateSviRequest& operator=(const CreateSviRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateSviRequest& operator=(CreateSviRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateSviRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateSviRequest* internal_default_instance() {
    return reinterpret_cast<const CreateSviRequest*>(
               &_CreateSviRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CreateSviRequest& a, CreateSviRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateSviRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateSviRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateSviRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateSviRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateSviRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateSviRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateSviRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.evpn_gw.v1alpha1.CreateSviRequest";
  }
  protected:
  explicit CreateSviRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSviFieldNumber = 1,
  };
  // .opi_api.network.evpn_gw.v1alpha1.Svi svi = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_svi() const;
  private:
  bool _internal_has_svi() const;
  public:
  void clear_svi();
  const ::opi_api::network::evpn_gw::v1alpha1::Svi& svi() const;
  PROTOBUF_NODISCARD ::opi_api::network::evpn_gw::v1alpha1::Svi* release_svi();
  ::opi_api::network::evpn_gw::v1alpha1::Svi* mutable_svi();
  void set_allocated_svi(::opi_api::network::evpn_gw::v1alpha1::Svi* svi);
  private:
  const ::opi_api::network::evpn_gw::v1alpha1::Svi& _internal_svi() const;
  ::opi_api::network::evpn_gw::v1alpha1::Svi* _internal_mutable_svi();
  public:
  void unsafe_arena_set_allocated_svi(
      ::opi_api::network::evpn_gw::v1alpha1::Svi* svi);
  ::opi_api::network::evpn_gw::v1alpha1::Svi* unsafe_arena_release_svi();

  // @@protoc_insertion_point(class_scope:opi_api.network.evpn_gw.v1alpha1.CreateSviRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::network::evpn_gw::v1alpha1::Svi* svi_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_l3_5fxpu_5finfra_5fmgr_2eproto;
};
// -------------------------------------------------------------------

class ListSvisRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.evpn_gw.v1alpha1.ListSvisRequest) */ {
 public:
  inline ListSvisRequest() : ListSvisRequest(nullptr) {}
  ~ListSvisRequest() override;
  explicit constexpr ListSvisRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListSvisRequest(const ListSvisRequest& from);
  ListSvisRequest(ListSvisRequest&& from) noexcept
    : ListSvisRequest() {
    *this = ::std::move(from);
  }

  inline ListSvisRequest& operator=(const ListSvisRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSvisRequest& operator=(ListSvisRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListSvisRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListSvisRequest* internal_default_instance() {
    return reinterpret_cast<const ListSvisRequest*>(
               &_ListSvisRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ListSvisRequest& a, ListSvisRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSvisRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSvisRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListSvisRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListSvisRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListSvisRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListSvisRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSvisRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.evpn_gw.v1alpha1.ListSvisRequest";
  }
  protected:
  explicit ListSvisRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPageTokenFieldNumber = 2,
    kPageSizeFieldNumber = 1,
  };
  // string page_token = 2;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 1;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.evpn_gw.v1alpha1.ListSvisRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
  int32_t page_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_l3_5fxpu_5finfra_5fmgr_2eproto;
};
// -------------------------------------------------------------------

class ListSvisResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.evpn_gw.v1alpha1.ListSvisResponse) */ {
 public:
  inline ListSvisResponse() : ListSvisResponse(nullptr) {}
  ~ListSvisResponse() override;
  explicit constexpr ListSvisResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListSvisResponse(const ListSvisResponse& from);
  ListSvisResponse(ListSvisResponse&& from) noexcept
    : ListSvisResponse() {
    *this = ::std::move(from);
  }

  inline ListSvisResponse& operator=(const ListSvisResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSvisResponse& operator=(ListSvisResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListSvisResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListSvisResponse* internal_default_instance() {
    return reinterpret_cast<const ListSvisResponse*>(
               &_ListSvisResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ListSvisResponse& a, ListSvisResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSvisResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSvisResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListSvisResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListSvisResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListSvisResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListSvisResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSvisResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.evpn_gw.v1alpha1.ListSvisResponse";
  }
  protected:
  explicit ListSvisResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSvisFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .opi_api.network.evpn_gw.v1alpha1.Svi svis = 1;
  int svis_size() const;
  private:
  int _internal_svis_size() const;
  public:
  void clear_svis();
  ::opi_api::network::evpn_gw::v1alpha1::Svi* mutable_svis(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::evpn_gw::v1alpha1::Svi >*
      mutable_svis();
  private:
  const ::opi_api::network::evpn_gw::v1alpha1::Svi& _internal_svis(int index) const;
  ::opi_api::network::evpn_gw::v1alpha1::Svi* _internal_add_svis();
  public:
  const ::opi_api::network::evpn_gw::v1alpha1::Svi& svis(int index) const;
  ::opi_api::network::evpn_gw::v1alpha1::Svi* add_svis();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::evpn_gw::v1alpha1::Svi >&
      svis() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.evpn_gw.v1alpha1.ListSvisResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::evpn_gw::v1alpha1::Svi > svis_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_l3_5fxpu_5finfra_5fmgr_2eproto;
};
// -------------------------------------------------------------------

class GetSviRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.evpn_gw.v1alpha1.GetSviRequest) */ {
 public:
  inline GetSviRequest() : GetSviRequest(nullptr) {}
  ~GetSviRequest() override;
  explicit constexpr GetSviRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSviRequest(const GetSviRequest& from);
  GetSviRequest(GetSviRequest&& from) noexcept
    : GetSviRequest() {
    *this = ::std::move(from);
  }

  inline GetSviRequest& operator=(const GetSviRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSviRequest& operator=(GetSviRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSviRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSviRequest* internal_default_instance() {
    return reinterpret_cast<const GetSviRequest*>(
               &_GetSviRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetSviRequest& a, GetSviRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSviRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSviRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSviRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSviRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSviRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetSviRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSviRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.evpn_gw.v1alpha1.GetSviRequest";
  }
  protected:
  explicit GetSviRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVrfFieldNumber = 1,
    kVlanIdFieldNumber = 2,
  };
  // string vrf = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_vrf();
  const std::string& vrf() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vrf(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vrf();
  PROTOBUF_NODISCARD std::string* release_vrf();
  void set_allocated_vrf(std::string* vrf);
  private:
  const std::string& _internal_vrf() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vrf(const std::string& value);
  std::string* _internal_mutable_vrf();
  public:

  // uint32 vlan_id = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_vlan_id();
  uint32_t vlan_id() const;
  void set_vlan_id(uint32_t value);
  private:
  uint32_t _internal_vlan_id() const;
  void _internal_set_vlan_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.evpn_gw.v1alpha1.GetSviRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vrf_;
  uint32_t vlan_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_l3_5fxpu_5finfra_5fmgr_2eproto;
};
// -------------------------------------------------------------------

class DeleteSviRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.evpn_gw.v1alpha1.DeleteSviRequest) */ {
 public:
  inline DeleteSviRequest() : DeleteSviRequest(nullptr) {}
  ~DeleteSviRequest() override;
  explicit constexpr DeleteSviRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteSviRequest(const DeleteSviRequest& from);
  DeleteSviRequest(DeleteSviRequest&& from) noexcept
    : DeleteSviRequest() {
    *this = ::std::move(from);
  }

  inline DeleteSviRequest& operator=(const DeleteSviRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteSviRequest& operator=(DeleteSviRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteSviRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteSviRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteSviRequest*>(
               &_DeleteSviRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(DeleteSviRequest& a, DeleteSviRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteSviRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteSviRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteSviRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteSviRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteSviRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteSviRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteSviRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.evpn_gw.v1alpha1.DeleteSviRequest";
  }
  protected:
  explicit DeleteSviRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVrfFieldNumber = 1,
    kVlanIdFieldNumber = 2,
  };
  // string vrf = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_vrf();
  const std::string& vrf() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vrf(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vrf();
  PROTOBUF_NODISCARD std::string* release_vrf();
  void set_allocated_vrf(std::string* vrf);
  private:
  const std::string& _internal_vrf() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vrf(const std::string& value);
  std::string* _internal_mutable_vrf();
  public:

  // uint32 vlan_id = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_vlan_id();
  uint32_t vlan_id() const;
  void set_vlan_id(uint32_t value);
  private:
  uint32_t _internal_vlan_id() const;
  void _internal_set_vlan_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.evpn_gw.v1alpha1.DeleteSviRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vrf_;
  uint32_t vlan_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_l3_5fxpu_5finfra_5fmgr_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vrf

// string name = 1 [(.google.api.field_behavior) = REQUIRED];
inline void Vrf::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Vrf::name() const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.Vrf.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Vrf::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.evpn_gw.v1alpha1.Vrf.name)
}
inline std::string* Vrf::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opi_api.network.evpn_gw.v1alpha1.Vrf.name)
  return _s;
}
inline const std::string& Vrf::_internal_name() const {
  return name_.Get();
}
inline void Vrf::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Vrf::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Vrf::release_name() {
  // @@protoc_insertion_point(field_release:opi_api.network.evpn_gw.v1alpha1.Vrf.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Vrf::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.evpn_gw.v1alpha1.Vrf.name)
}

// uint32 vni = 2;
inline void Vrf::clear_vni() {
  vni_ = 0u;
}
inline uint32_t Vrf::_internal_vni() const {
  return vni_;
}
inline uint32_t Vrf::vni() const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.Vrf.vni)
  return _internal_vni();
}
inline void Vrf::_internal_set_vni(uint32_t value) {
  
  vni_ = value;
}
inline void Vrf::set_vni(uint32_t value) {
  _internal_set_vni(value);
  // @@protoc_insertion_point(field_set:opi_api.network.evpn_gw.v1alpha1.Vrf.vni)
}

// uint32 routing_table = 3;
inline void Vrf::clear_routing_table() {
  routing_table_ = 0u;
}
inline uint32_t Vrf::_internal_routing_table() const {
  return routing_table_;
}
inline uint32_t Vrf::routing_table() const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.Vrf.routing_table)
  return _internal_routing_table();
}
inline void Vrf::_internal_set_routing_table(uint32_t value) {
  
  routing_table_ = value;
}
inline void Vrf::set_routing_table(uint32_t value) {
  _internal_set_routing_table(value);
  // @@protoc_insertion_point(field_set:opi_api.network.evpn_gw.v1alpha1.Vrf.routing_table)
}

// string loopback_ip = 4 [(.google.api.field_behavior) = REQUIRED];
inline void Vrf::clear_loopback_ip() {
  loopback_ip_.ClearToEmpty();
}
inline const std::string& Vrf::loopback_ip() const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.Vrf.loopback_ip)
  return _internal_loopback_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Vrf::set_loopback_ip(ArgT0&& arg0, ArgT... args) {
 
 loopback_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.evpn_gw.v1alpha1.Vrf.loopback_ip)
}
inline std::string* Vrf::mutable_loopback_ip() {
  std::string* _s = _internal_mutable_loopback_ip();
  // @@protoc_insertion_point(field_mutable:opi_api.network.evpn_gw.v1alpha1.Vrf.loopback_ip)
  return _s;
}
inline const std::string& Vrf::_internal_loopback_ip() const {
  return loopback_ip_.Get();
}
inline void Vrf::_internal_set_loopback_ip(const std::string& value) {
  
  loopback_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Vrf::_internal_mutable_loopback_ip() {
  
  return loopback_ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Vrf::release_loopback_ip() {
  // @@protoc_insertion_point(field_release:opi_api.network.evpn_gw.v1alpha1.Vrf.loopback_ip)
  return loopback_ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Vrf::set_allocated_loopback_ip(std::string* loopback_ip) {
  if (loopback_ip != nullptr) {
    
  } else {
    
  }
  loopback_ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), loopback_ip,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (loopback_ip_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    loopback_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.evpn_gw.v1alpha1.Vrf.loopback_ip)
}

// string vtep_ip = 5;
inline void Vrf::clear_vtep_ip() {
  vtep_ip_.ClearToEmpty();
}
inline const std::string& Vrf::vtep_ip() const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.Vrf.vtep_ip)
  return _internal_vtep_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Vrf::set_vtep_ip(ArgT0&& arg0, ArgT... args) {
 
 vtep_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.evpn_gw.v1alpha1.Vrf.vtep_ip)
}
inline std::string* Vrf::mutable_vtep_ip() {
  std::string* _s = _internal_mutable_vtep_ip();
  // @@protoc_insertion_point(field_mutable:opi_api.network.evpn_gw.v1alpha1.Vrf.vtep_ip)
  return _s;
}
inline const std::string& Vrf::_internal_vtep_ip() const {
  return vtep_ip_.Get();
}
inline void Vrf::_internal_set_vtep_ip(const std::string& value) {
  
  vtep_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Vrf::_internal_mutable_vtep_ip() {
  
  return vtep_ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Vrf::release_vtep_ip() {
  // @@protoc_insertion_point(field_release:opi_api.network.evpn_gw.v1alpha1.Vrf.vtep_ip)
  return vtep_ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Vrf::set_allocated_vtep_ip(std::string* vtep_ip) {
  if (vtep_ip != nullptr) {
    
  } else {
    
  }
  vtep_ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vtep_ip,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (vtep_ip_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    vtep_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.evpn_gw.v1alpha1.Vrf.vtep_ip)
}

// uint32 local_as = 6;
inline void Vrf::clear_local_as() {
  local_as_ = 0u;
}
inline uint32_t Vrf::_internal_local_as() const {
  return local_as_;
}
inline uint32_t Vrf::local_as() const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.Vrf.local_as)
  return _internal_local_as();
}
inline void Vrf::_internal_set_local_as(uint32_t value) {
  
  local_as_ = value;
}
inline void Vrf::set_local_as(uint32_t value) {
  _internal_set_local_as(value);
  // @@protoc_insertion_point(field_set:opi_api.network.evpn_gw.v1alpha1.Vrf.local_as)
}

// string rd = 7;
inline void Vrf::clear_rd() {
  rd_.ClearToEmpty();
}
inline const std::string& Vrf::rd() const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.Vrf.rd)
  return _internal_rd();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Vrf::set_rd(ArgT0&& arg0, ArgT... args) {
 
 rd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.evpn_gw.v1alpha1.Vrf.rd)
}
inline std::string* Vrf::mutable_rd() {
  std::string* _s = _internal_mutable_rd();
  // @@protoc_insertion_point(field_mutable:opi_api.network.evpn_gw.v1alpha1.Vrf.rd)
  return _s;
}
inline const std::string& Vrf::_internal_rd() const {
  return rd_.Get();
}
inline void Vrf::_internal_set_rd(const std::string& value) {
  
  rd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Vrf::_internal_mutable_rd() {
  
  return rd_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Vrf::release_rd() {
  // @@protoc_insertion_point(field_release:opi_api.network.evpn_gw.v1alpha1.Vrf.rd)
  return rd_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Vrf::set_allocated_rd(std::string* rd) {
  if (rd != nullptr) {
    
  } else {
    
  }
  rd_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rd,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (rd_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    rd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.evpn_gw.v1alpha1.Vrf.rd)
}

// string rmac = 8;
inline void Vrf::clear_rmac() {
  rmac_.ClearToEmpty();
}
inline const std::string& Vrf::rmac() const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.Vrf.rmac)
  return _internal_rmac();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Vrf::set_rmac(ArgT0&& arg0, ArgT... args) {
 
 rmac_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.evpn_gw.v1alpha1.Vrf.rmac)
}
inline std::string* Vrf::mutable_rmac() {
  std::string* _s = _internal_mutable_rmac();
  // @@protoc_insertion_point(field_mutable:opi_api.network.evpn_gw.v1alpha1.Vrf.rmac)
  return _s;
}
inline const std::string& Vrf::_internal_rmac() const {
  return rmac_.Get();
}
inline void Vrf::_internal_set_rmac(const std::string& value) {
  
  rmac_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Vrf::_internal_mutable_rmac() {
  
  return rmac_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Vrf::release_rmac() {
  // @@protoc_insertion_point(field_release:opi_api.network.evpn_gw.v1alpha1.Vrf.rmac)
  return rmac_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Vrf::set_allocated_rmac(std::string* rmac) {
  if (rmac != nullptr) {
    
  } else {
    
  }
  rmac_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rmac,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (rmac_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    rmac_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.evpn_gw.v1alpha1.Vrf.rmac)
}

// repeated string import_rts = 9;
inline int Vrf::_internal_import_rts_size() const {
  return import_rts_.size();
}
inline int Vrf::import_rts_size() const {
  return _internal_import_rts_size();
}
inline void Vrf::clear_import_rts() {
  import_rts_.Clear();
}
inline std::string* Vrf::add_import_rts() {
  std::string* _s = _internal_add_import_rts();
  // @@protoc_insertion_point(field_add_mutable:opi_api.network.evpn_gw.v1alpha1.Vrf.import_rts)
  return _s;
}
inline const std::string& Vrf::_internal_import_rts(int index) const {
  return import_rts_.Get(index);
}
inline const std::string& Vrf::import_rts(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.Vrf.import_rts)
  return _internal_import_rts(index);
}
inline std::string* Vrf::mutable_import_rts(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.network.evpn_gw.v1alpha1.Vrf.import_rts)
  return import_rts_.Mutable(index);
}
inline void Vrf::set_import_rts(int index, const std::string& value) {
  import_rts_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:opi_api.network.evpn_gw.v1alpha1.Vrf.import_rts)
}
inline void Vrf::set_import_rts(int index, std::string&& value) {
  import_rts_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:opi_api.network.evpn_gw.v1alpha1.Vrf.import_rts)
}
inline void Vrf::set_import_rts(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  import_rts_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:opi_api.network.evpn_gw.v1alpha1.Vrf.import_rts)
}
inline void Vrf::set_import_rts(int index, const char* value, size_t size) {
  import_rts_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opi_api.network.evpn_gw.v1alpha1.Vrf.import_rts)
}
inline std::string* Vrf::_internal_add_import_rts() {
  return import_rts_.Add();
}
inline void Vrf::add_import_rts(const std::string& value) {
  import_rts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:opi_api.network.evpn_gw.v1alpha1.Vrf.import_rts)
}
inline void Vrf::add_import_rts(std::string&& value) {
  import_rts_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:opi_api.network.evpn_gw.v1alpha1.Vrf.import_rts)
}
inline void Vrf::add_import_rts(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  import_rts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:opi_api.network.evpn_gw.v1alpha1.Vrf.import_rts)
}
inline void Vrf::add_import_rts(const char* value, size_t size) {
  import_rts_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:opi_api.network.evpn_gw.v1alpha1.Vrf.import_rts)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Vrf::import_rts() const {
  // @@protoc_insertion_point(field_list:opi_api.network.evpn_gw.v1alpha1.Vrf.import_rts)
  return import_rts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Vrf::mutable_import_rts() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.network.evpn_gw.v1alpha1.Vrf.import_rts)
  return &import_rts_;
}

// repeated string export_rts = 10;
inline int Vrf::_internal_export_rts_size() const {
  return export_rts_.size();
}
inline int Vrf::export_rts_size() const {
  return _internal_export_rts_size();
}
inline void Vrf::clear_export_rts() {
  export_rts_.Clear();
}
inline std::string* Vrf::add_export_rts() {
  std::string* _s = _internal_add_export_rts();
  // @@protoc_insertion_point(field_add_mutable:opi_api.network.evpn_gw.v1alpha1.Vrf.export_rts)
  return _s;
}
inline const std::string& Vrf::_internal_export_rts(int index) const {
  return export_rts_.Get(index);
}
inline const std::string& Vrf::export_rts(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.Vrf.export_rts)
  return _internal_export_rts(index);
}
inline std::string* Vrf::mutable_export_rts(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.network.evpn_gw.v1alpha1.Vrf.export_rts)
  return export_rts_.Mutable(index);
}
inline void Vrf::set_export_rts(int index, const std::string& value) {
  export_rts_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:opi_api.network.evpn_gw.v1alpha1.Vrf.export_rts)
}
inline void Vrf::set_export_rts(int index, std::string&& value) {
  export_rts_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:opi_api.network.evpn_gw.v1alpha1.Vrf.export_rts)
}
inline void Vrf::set_export_rts(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  export_rts_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:opi_api.network.evpn_gw.v1alpha1.Vrf.export_rts)
}
inline void Vrf::set_export_rts(int index, const char* value, size_t size) {
  export_rts_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opi_api.network.evpn_gw.v1alpha1.Vrf.export_rts)
}
inline std::string* Vrf::_internal_add_export_rts() {
  return export_rts_.Add();
}
inline void Vrf::add_export_rts(const std::string& value) {
  export_rts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:opi_api.network.evpn_gw.v1alpha1.Vrf.export_rts)
}
inline void Vrf::add_export_rts(std::string&& value) {
  export_rts_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:opi_api.network.evpn_gw.v1alpha1.Vrf.export_rts)
}
inline void Vrf::add_export_rts(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  export_rts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:opi_api.network.evpn_gw.v1alpha1.Vrf.export_rts)
}
inline void Vrf::add_export_rts(const char* value, size_t size) {
  export_rts_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:opi_api.network.evpn_gw.v1alpha1.Vrf.export_rts)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Vrf::export_rts() const {
  // @@protoc_insertion_point(field_list:opi_api.network.evpn_gw.v1alpha1.Vrf.export_rts)
  return export_rts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Vrf::mutable_export_rts() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.network.evpn_gw.v1alpha1.Vrf.export_rts)
  return &export_rts_;
}

// repeated uint32 vlan_ids = 11;
inline int Vrf::_internal_vlan_ids_size() const {
  return vlan_ids_.size();
}
inline int Vrf::vlan_ids_size() const {
  return _internal_vlan_ids_size();
}
inline void Vrf::clear_vlan_ids() {
  vlan_ids_.Clear();
}
inline uint32_t Vrf::_internal_vlan_ids(int index) const {
  return vlan_ids_.Get(index);
}
inline uint32_t Vrf::vlan_ids(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.Vrf.vlan_ids)
  return _internal_vlan_ids(index);
}
inline void Vrf::set_vlan_ids(int index, uint32_t value) {
  vlan_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:opi_api.network.evpn_gw.v1alpha1.Vrf.vlan_ids)
}
inline void Vrf::_internal_add_vlan_ids(uint32_t value) {
  vlan_ids_.Add(value);
}
inline void Vrf::add_vlan_ids(uint32_t value) {
  _internal_add_vlan_ids(value);
  // @@protoc_insertion_point(field_add:opi_api.network.evpn_gw.v1alpha1.Vrf.vlan_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Vrf::_internal_vlan_ids() const {
  return vlan_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Vrf::vlan_ids() const {
  // @@protoc_insertion_point(field_list:opi_api.network.evpn_gw.v1alpha1.Vrf.vlan_ids)
  return _internal_vlan_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Vrf::_internal_mutable_vlan_ids() {
  return &vlan_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Vrf::mutable_vlan_ids() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.network.evpn_gw.v1alpha1.Vrf.vlan_ids)
  return _internal_mutable_vlan_ids();
}

// -------------------------------------------------------------------

// CreateVrfRequest

// .opi_api.network.evpn_gw.v1alpha1.Vrf vrf = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateVrfRequest::_internal_has_vrf() const {
  return this != internal_default_instance() && vrf_ != nullptr;
}
inline bool CreateVrfRequest::has_vrf() const {
  return _internal_has_vrf();
}
inline void CreateVrfRequest::clear_vrf() {
  if (GetArenaForAllocation() == nullptr && vrf_ != nullptr) {
    delete vrf_;
  }
  vrf_ = nullptr;
}
inline const ::opi_api::network::evpn_gw::v1alpha1::Vrf& CreateVrfRequest::_internal_vrf() const {
  const ::opi_api::network::evpn_gw::v1alpha1::Vrf* p = vrf_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::evpn_gw::v1alpha1::Vrf&>(
      ::opi_api::network::evpn_gw::v1alpha1::_Vrf_default_instance_);
}
inline const ::opi_api::network::evpn_gw::v1alpha1::Vrf& CreateVrfRequest::vrf() const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.CreateVrfRequest.vrf)
  return _internal_vrf();
}
inline void CreateVrfRequest::unsafe_arena_set_allocated_vrf(
    ::opi_api::network::evpn_gw::v1alpha1::Vrf* vrf) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vrf_);
  }
  vrf_ = vrf;
  if (vrf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.evpn_gw.v1alpha1.CreateVrfRequest.vrf)
}
inline ::opi_api::network::evpn_gw::v1alpha1::Vrf* CreateVrfRequest::release_vrf() {
  
  ::opi_api::network::evpn_gw::v1alpha1::Vrf* temp = vrf_;
  vrf_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::evpn_gw::v1alpha1::Vrf* CreateVrfRequest::unsafe_arena_release_vrf() {
  // @@protoc_insertion_point(field_release:opi_api.network.evpn_gw.v1alpha1.CreateVrfRequest.vrf)
  
  ::opi_api::network::evpn_gw::v1alpha1::Vrf* temp = vrf_;
  vrf_ = nullptr;
  return temp;
}
inline ::opi_api::network::evpn_gw::v1alpha1::Vrf* CreateVrfRequest::_internal_mutable_vrf() {
  
  if (vrf_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::evpn_gw::v1alpha1::Vrf>(GetArenaForAllocation());
    vrf_ = p;
  }
  return vrf_;
}
inline ::opi_api::network::evpn_gw::v1alpha1::Vrf* CreateVrfRequest::mutable_vrf() {
  ::opi_api::network::evpn_gw::v1alpha1::Vrf* _msg = _internal_mutable_vrf();
  // @@protoc_insertion_point(field_mutable:opi_api.network.evpn_gw.v1alpha1.CreateVrfRequest.vrf)
  return _msg;
}
inline void CreateVrfRequest::set_allocated_vrf(::opi_api::network::evpn_gw::v1alpha1::Vrf* vrf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete vrf_;
  }
  if (vrf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::evpn_gw::v1alpha1::Vrf>::GetOwningArena(vrf);
    if (message_arena != submessage_arena) {
      vrf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vrf, submessage_arena);
    }
    
  } else {
    
  }
  vrf_ = vrf;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.evpn_gw.v1alpha1.CreateVrfRequest.vrf)
}

// -------------------------------------------------------------------

// ListVrfsRequest

// int32 page_size = 1;
inline void ListVrfsRequest::clear_page_size() {
  page_size_ = 0;
}
inline int32_t ListVrfsRequest::_internal_page_size() const {
  return page_size_;
}
inline int32_t ListVrfsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.ListVrfsRequest.page_size)
  return _internal_page_size();
}
inline void ListVrfsRequest::_internal_set_page_size(int32_t value) {
  
  page_size_ = value;
}
inline void ListVrfsRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:opi_api.network.evpn_gw.v1alpha1.ListVrfsRequest.page_size)
}

// string page_token = 2;
inline void ListVrfsRequest::clear_page_token() {
  page_token_.ClearToEmpty();
}
inline const std::string& ListVrfsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.ListVrfsRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListVrfsRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.evpn_gw.v1alpha1.ListVrfsRequest.page_token)
}
inline std::string* ListVrfsRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.network.evpn_gw.v1alpha1.ListVrfsRequest.page_token)
  return _s;
}
inline const std::string& ListVrfsRequest::_internal_page_token() const {
  return page_token_.Get();
}
inline void ListVrfsRequest::_internal_set_page_token(const std::string& value) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListVrfsRequest::_internal_mutable_page_token() {
  
  return page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListVrfsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.network.evpn_gw.v1alpha1.ListVrfsRequest.page_token)
  return page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListVrfsRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (page_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.evpn_gw.v1alpha1.ListVrfsRequest.page_token)
}

// -------------------------------------------------------------------

// ListVrfsResponse

// repeated .opi_api.network.evpn_gw.v1alpha1.Vrf vrfs = 1;
inline int ListVrfsResponse::_internal_vrfs_size() const {
  return vrfs_.size();
}
inline int ListVrfsResponse::vrfs_size() const {
  return _internal_vrfs_size();
}
inline void ListVrfsResponse::clear_vrfs() {
  vrfs_.Clear();
}
inline ::opi_api::network::evpn_gw::v1alpha1::Vrf* ListVrfsResponse::mutable_vrfs(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.network.evpn_gw.v1alpha1.ListVrfsResponse.vrfs)
  return vrfs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::evpn_gw::v1alpha1::Vrf >*
ListVrfsResponse::mutable_vrfs() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.network.evpn_gw.v1alpha1.ListVrfsResponse.vrfs)
  return &vrfs_;
}
inline const ::opi_api::network::evpn_gw::v1alpha1::Vrf& ListVrfsResponse::_internal_vrfs(int index) const {
  return vrfs_.Get(index);
}
inline const ::opi_api::network::evpn_gw::v1alpha1::Vrf& ListVrfsResponse::vrfs(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.ListVrfsResponse.vrfs)
  return _internal_vrfs(index);
}
inline ::opi_api::network::evpn_gw::v1alpha1::Vrf* ListVrfsResponse::_internal_add_vrfs() {
  return vrfs_.Add();
}
inline ::opi_api::network::evpn_gw::v1alpha1::Vrf* ListVrfsResponse::add_vrfs() {
  ::opi_api::network::evpn_gw::v1alpha1::Vrf* _add = _internal_add_vrfs();
  // @@protoc_insertion_point(field_add:opi_api.network.evpn_gw.v1alpha1.ListVrfsResponse.vrfs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::evpn_gw::v1alpha1::Vrf >&
ListVrfsResponse::vrfs() const {
  // @@protoc_insertion_point(field_list:opi_api.network.evpn_gw.v1alpha1.ListVrfsResponse.vrfs)
  return vrfs_;
}

// string next_page_token = 2;
inline void ListVrfsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty();
}
inline const std::string& ListVrfsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.ListVrfsResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListVrfsResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.evpn_gw.v1alpha1.ListVrfsResponse.next_page_token)
}
inline std::string* ListVrfsResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.network.evpn_gw.v1alpha1.ListVrfsResponse.next_page_token)
  return _s;
}
inline const std::string& ListVrfsResponse::_internal_next_page_token() const {
  return next_page_token_.Get();
}
inline void ListVrfsResponse::_internal_set_next_page_token(const std::string& value) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListVrfsResponse::_internal_mutable_next_page_token() {
  
  return next_page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListVrfsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.network.evpn_gw.v1alpha1.ListVrfsResponse.next_page_token)
  return next_page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListVrfsResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (next_page_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.evpn_gw.v1alpha1.ListVrfsResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetVrfRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetVrfRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetVrfRequest::name() const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.GetVrfRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetVrfRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.evpn_gw.v1alpha1.GetVrfRequest.name)
}
inline std::string* GetVrfRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opi_api.network.evpn_gw.v1alpha1.GetVrfRequest.name)
  return _s;
}
inline const std::string& GetVrfRequest::_internal_name() const {
  return name_.Get();
}
inline void GetVrfRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetVrfRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetVrfRequest::release_name() {
  // @@protoc_insertion_point(field_release:opi_api.network.evpn_gw.v1alpha1.GetVrfRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetVrfRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.evpn_gw.v1alpha1.GetVrfRequest.name)
}

// -------------------------------------------------------------------

// DeleteVrfRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteVrfRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& DeleteVrfRequest::name() const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.DeleteVrfRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteVrfRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.evpn_gw.v1alpha1.DeleteVrfRequest.name)
}
inline std::string* DeleteVrfRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opi_api.network.evpn_gw.v1alpha1.DeleteVrfRequest.name)
  return _s;
}
inline const std::string& DeleteVrfRequest::_internal_name() const {
  return name_.Get();
}
inline void DeleteVrfRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteVrfRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteVrfRequest::release_name() {
  // @@protoc_insertion_point(field_release:opi_api.network.evpn_gw.v1alpha1.DeleteVrfRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteVrfRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.evpn_gw.v1alpha1.DeleteVrfRequest.name)
}

// -------------------------------------------------------------------

// IpAddressMasklen

// string ip_addr = 1;
inline void IpAddressMasklen::clear_ip_addr() {
  ip_addr_.ClearToEmpty();
}
inline const std::string& IpAddressMasklen::ip_addr() const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.IpAddressMasklen.ip_addr)
  return _internal_ip_addr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IpAddressMasklen::set_ip_addr(ArgT0&& arg0, ArgT... args) {
 
 ip_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.evpn_gw.v1alpha1.IpAddressMasklen.ip_addr)
}
inline std::string* IpAddressMasklen::mutable_ip_addr() {
  std::string* _s = _internal_mutable_ip_addr();
  // @@protoc_insertion_point(field_mutable:opi_api.network.evpn_gw.v1alpha1.IpAddressMasklen.ip_addr)
  return _s;
}
inline const std::string& IpAddressMasklen::_internal_ip_addr() const {
  return ip_addr_.Get();
}
inline void IpAddressMasklen::_internal_set_ip_addr(const std::string& value) {
  
  ip_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IpAddressMasklen::_internal_mutable_ip_addr() {
  
  return ip_addr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IpAddressMasklen::release_ip_addr() {
  // @@protoc_insertion_point(field_release:opi_api.network.evpn_gw.v1alpha1.IpAddressMasklen.ip_addr)
  return ip_addr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IpAddressMasklen::set_allocated_ip_addr(std::string* ip_addr) {
  if (ip_addr != nullptr) {
    
  } else {
    
  }
  ip_addr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip_addr,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ip_addr_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ip_addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.evpn_gw.v1alpha1.IpAddressMasklen.ip_addr)
}

// uint32 len = 2;
inline void IpAddressMasklen::clear_len() {
  len_ = 0u;
}
inline uint32_t IpAddressMasklen::_internal_len() const {
  return len_;
}
inline uint32_t IpAddressMasklen::len() const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.IpAddressMasklen.len)
  return _internal_len();
}
inline void IpAddressMasklen::_internal_set_len(uint32_t value) {
  
  len_ = value;
}
inline void IpAddressMasklen::set_len(uint32_t value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:opi_api.network.evpn_gw.v1alpha1.IpAddressMasklen.len)
}

// -------------------------------------------------------------------

// Svi

// string vrf = 1 [(.google.api.field_behavior) = REQUIRED];
inline void Svi::clear_vrf() {
  vrf_.ClearToEmpty();
}
inline const std::string& Svi::vrf() const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.Svi.vrf)
  return _internal_vrf();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Svi::set_vrf(ArgT0&& arg0, ArgT... args) {
 
 vrf_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.evpn_gw.v1alpha1.Svi.vrf)
}
inline std::string* Svi::mutable_vrf() {
  std::string* _s = _internal_mutable_vrf();
  // @@protoc_insertion_point(field_mutable:opi_api.network.evpn_gw.v1alpha1.Svi.vrf)
  return _s;
}
inline const std::string& Svi::_internal_vrf() const {
  return vrf_.Get();
}
inline void Svi::_internal_set_vrf(const std::string& value) {
  
  vrf_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Svi::_internal_mutable_vrf() {
  
  return vrf_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Svi::release_vrf() {
  // @@protoc_insertion_point(field_release:opi_api.network.evpn_gw.v1alpha1.Svi.vrf)
  return vrf_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Svi::set_allocated_vrf(std::string* vrf) {
  if (vrf != nullptr) {
    
  } else {
    
  }
  vrf_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vrf,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (vrf_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    vrf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.evpn_gw.v1alpha1.Svi.vrf)
}

// uint32 vlan_id = 2 [(.google.api.field_behavior) = REQUIRED];
inline void Svi::clear_vlan_id() {
  vlan_id_ = 0u;
}
inline uint32_t Svi::_internal_vlan_id() const {
  return vlan_id_;
}
inline uint32_t Svi::vlan_id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.Svi.vlan_id)
  return _internal_vlan_id();
}
inline void Svi::_internal_set_vlan_id(uint32_t value) {
  
  vlan_id_ = value;
}
inline void Svi::set_vlan_id(uint32_t value) {
  _internal_set_vlan_id(value);
  // @@protoc_insertion_point(field_set:opi_api.network.evpn_gw.v1alpha1.Svi.vlan_id)
}

// string mac_address = 3 [(.google.api.field_behavior) = REQUIRED];
inline void Svi::clear_mac_address() {
  mac_address_.ClearToEmpty();
}
inline const std::string& Svi::mac_address() const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.Svi.mac_address)
  return _internal_mac_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Svi::set_mac_address(ArgT0&& arg0, ArgT... args) {
 
 mac_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.evpn_gw.v1alpha1.Svi.mac_address)
}
inline std::string* Svi::mutable_mac_address() {
  std::string* _s = _internal_mutable_mac_address();
  // @@protoc_insertion_point(field_mutable:opi_api.network.evpn_gw.v1alpha1.Svi.mac_address)
  return _s;
}
inline const std::string& Svi::_internal_mac_address() const {
  return mac_address_.Get();
}
inline void Svi::_internal_set_mac_address(const std::string& value) {
  
  mac_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Svi::_internal_mutable_mac_address() {
  
  return mac_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Svi::release_mac_address() {
  // @@protoc_insertion_point(field_release:opi_api.network.evpn_gw.v1alpha1.Svi.mac_address)
  return mac_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Svi::set_allocated_mac_address(std::string* mac_address) {
  if (mac_address != nullptr) {
    
  } else {
    
  }
  mac_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mac_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mac_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    mac_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.evpn_gw.v1alpha1.Svi.mac_address)
}

// repeated .opi_api.network.evpn_gw.v1alpha1.IpAddressMasklen gw_ip = 4 [(.google.api.field_behavior) = REQUIRED];
inline int Svi::_internal_gw_ip_size() const {
  return gw_ip_.size();
}
inline int Svi::gw_ip_size() const {
  return _internal_gw_ip_size();
}
inline void Svi::clear_gw_ip() {
  gw_ip_.Clear();
}
inline ::opi_api::network::evpn_gw::v1alpha1::IpAddressMasklen* Svi::mutable_gw_ip(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.network.evpn_gw.v1alpha1.Svi.gw_ip)
  return gw_ip_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::evpn_gw::v1alpha1::IpAddressMasklen >*
Svi::mutable_gw_ip() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.network.evpn_gw.v1alpha1.Svi.gw_ip)
  return &gw_ip_;
}
inline const ::opi_api::network::evpn_gw::v1alpha1::IpAddressMasklen& Svi::_internal_gw_ip(int index) const {
  return gw_ip_.Get(index);
}
inline const ::opi_api::network::evpn_gw::v1alpha1::IpAddressMasklen& Svi::gw_ip(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.Svi.gw_ip)
  return _internal_gw_ip(index);
}
inline ::opi_api::network::evpn_gw::v1alpha1::IpAddressMasklen* Svi::_internal_add_gw_ip() {
  return gw_ip_.Add();
}
inline ::opi_api::network::evpn_gw::v1alpha1::IpAddressMasklen* Svi::add_gw_ip() {
  ::opi_api::network::evpn_gw::v1alpha1::IpAddressMasklen* _add = _internal_add_gw_ip();
  // @@protoc_insertion_point(field_add:opi_api.network.evpn_gw.v1alpha1.Svi.gw_ip)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::evpn_gw::v1alpha1::IpAddressMasklen >&
Svi::gw_ip() const {
  // @@protoc_insertion_point(field_list:opi_api.network.evpn_gw.v1alpha1.Svi.gw_ip)
  return gw_ip_;
}

// bool enable_bgp = 5;
inline void Svi::clear_enable_bgp() {
  enable_bgp_ = false;
}
inline bool Svi::_internal_enable_bgp() const {
  return enable_bgp_;
}
inline bool Svi::enable_bgp() const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.Svi.enable_bgp)
  return _internal_enable_bgp();
}
inline void Svi::_internal_set_enable_bgp(bool value) {
  
  enable_bgp_ = value;
}
inline void Svi::set_enable_bgp(bool value) {
  _internal_set_enable_bgp(value);
  // @@protoc_insertion_point(field_set:opi_api.network.evpn_gw.v1alpha1.Svi.enable_bgp)
}

// uint32 remote_as = 6;
inline void Svi::clear_remote_as() {
  remote_as_ = 0u;
}
inline uint32_t Svi::_internal_remote_as() const {
  return remote_as_;
}
inline uint32_t Svi::remote_as() const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.Svi.remote_as)
  return _internal_remote_as();
}
inline void Svi::_internal_set_remote_as(uint32_t value) {
  
  remote_as_ = value;
}
inline void Svi::set_remote_as(uint32_t value) {
  _internal_set_remote_as(value);
  // @@protoc_insertion_point(field_set:opi_api.network.evpn_gw.v1alpha1.Svi.remote_as)
}

// -------------------------------------------------------------------

// CreateSviRequest

// .opi_api.network.evpn_gw.v1alpha1.Svi svi = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateSviRequest::_internal_has_svi() const {
  return this != internal_default_instance() && svi_ != nullptr;
}
inline bool CreateSviRequest::has_svi() const {
  return _internal_has_svi();
}
inline void CreateSviRequest::clear_svi() {
  if (GetArenaForAllocation() == nullptr && svi_ != nullptr) {
    delete svi_;
  }
  svi_ = nullptr;
}
inline const ::opi_api::network::evpn_gw::v1alpha1::Svi& CreateSviRequest::_internal_svi() const {
  const ::opi_api::network::evpn_gw::v1alpha1::Svi* p = svi_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::evpn_gw::v1alpha1::Svi&>(
      ::opi_api::network::evpn_gw::v1alpha1::_Svi_default_instance_);
}
inline const ::opi_api::network::evpn_gw::v1alpha1::Svi& CreateSviRequest::svi() const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.CreateSviRequest.svi)
  return _internal_svi();
}
inline void CreateSviRequest::unsafe_arena_set_allocated_svi(
    ::opi_api::network::evpn_gw::v1alpha1::Svi* svi) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(svi_);
  }
  svi_ = svi;
  if (svi) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.evpn_gw.v1alpha1.CreateSviRequest.svi)
}
inline ::opi_api::network::evpn_gw::v1alpha1::Svi* CreateSviRequest::release_svi() {
  
  ::opi_api::network::evpn_gw::v1alpha1::Svi* temp = svi_;
  svi_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::evpn_gw::v1alpha1::Svi* CreateSviRequest::unsafe_arena_release_svi() {
  // @@protoc_insertion_point(field_release:opi_api.network.evpn_gw.v1alpha1.CreateSviRequest.svi)
  
  ::opi_api::network::evpn_gw::v1alpha1::Svi* temp = svi_;
  svi_ = nullptr;
  return temp;
}
inline ::opi_api::network::evpn_gw::v1alpha1::Svi* CreateSviRequest::_internal_mutable_svi() {
  
  if (svi_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::evpn_gw::v1alpha1::Svi>(GetArenaForAllocation());
    svi_ = p;
  }
  return svi_;
}
inline ::opi_api::network::evpn_gw::v1alpha1::Svi* CreateSviRequest::mutable_svi() {
  ::opi_api::network::evpn_gw::v1alpha1::Svi* _msg = _internal_mutable_svi();
  // @@protoc_insertion_point(field_mutable:opi_api.network.evpn_gw.v1alpha1.CreateSviRequest.svi)
  return _msg;
}
inline void CreateSviRequest::set_allocated_svi(::opi_api::network::evpn_gw::v1alpha1::Svi* svi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete svi_;
  }
  if (svi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::evpn_gw::v1alpha1::Svi>::GetOwningArena(svi);
    if (message_arena != submessage_arena) {
      svi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, svi, submessage_arena);
    }
    
  } else {
    
  }
  svi_ = svi;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.evpn_gw.v1alpha1.CreateSviRequest.svi)
}

// -------------------------------------------------------------------

// ListSvisRequest

// int32 page_size = 1;
inline void ListSvisRequest::clear_page_size() {
  page_size_ = 0;
}
inline int32_t ListSvisRequest::_internal_page_size() const {
  return page_size_;
}
inline int32_t ListSvisRequest::page_size() const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.ListSvisRequest.page_size)
  return _internal_page_size();
}
inline void ListSvisRequest::_internal_set_page_size(int32_t value) {
  
  page_size_ = value;
}
inline void ListSvisRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:opi_api.network.evpn_gw.v1alpha1.ListSvisRequest.page_size)
}

// string page_token = 2;
inline void ListSvisRequest::clear_page_token() {
  page_token_.ClearToEmpty();
}
inline const std::string& ListSvisRequest::page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.ListSvisRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListSvisRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.evpn_gw.v1alpha1.ListSvisRequest.page_token)
}
inline std::string* ListSvisRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.network.evpn_gw.v1alpha1.ListSvisRequest.page_token)
  return _s;
}
inline const std::string& ListSvisRequest::_internal_page_token() const {
  return page_token_.Get();
}
inline void ListSvisRequest::_internal_set_page_token(const std::string& value) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListSvisRequest::_internal_mutable_page_token() {
  
  return page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListSvisRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.network.evpn_gw.v1alpha1.ListSvisRequest.page_token)
  return page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListSvisRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (page_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.evpn_gw.v1alpha1.ListSvisRequest.page_token)
}

// -------------------------------------------------------------------

// ListSvisResponse

// repeated .opi_api.network.evpn_gw.v1alpha1.Svi svis = 1;
inline int ListSvisResponse::_internal_svis_size() const {
  return svis_.size();
}
inline int ListSvisResponse::svis_size() const {
  return _internal_svis_size();
}
inline void ListSvisResponse::clear_svis() {
  svis_.Clear();
}
inline ::opi_api::network::evpn_gw::v1alpha1::Svi* ListSvisResponse::mutable_svis(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.network.evpn_gw.v1alpha1.ListSvisResponse.svis)
  return svis_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::evpn_gw::v1alpha1::Svi >*
ListSvisResponse::mutable_svis() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.network.evpn_gw.v1alpha1.ListSvisResponse.svis)
  return &svis_;
}
inline const ::opi_api::network::evpn_gw::v1alpha1::Svi& ListSvisResponse::_internal_svis(int index) const {
  return svis_.Get(index);
}
inline const ::opi_api::network::evpn_gw::v1alpha1::Svi& ListSvisResponse::svis(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.ListSvisResponse.svis)
  return _internal_svis(index);
}
inline ::opi_api::network::evpn_gw::v1alpha1::Svi* ListSvisResponse::_internal_add_svis() {
  return svis_.Add();
}
inline ::opi_api::network::evpn_gw::v1alpha1::Svi* ListSvisResponse::add_svis() {
  ::opi_api::network::evpn_gw::v1alpha1::Svi* _add = _internal_add_svis();
  // @@protoc_insertion_point(field_add:opi_api.network.evpn_gw.v1alpha1.ListSvisResponse.svis)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::evpn_gw::v1alpha1::Svi >&
ListSvisResponse::svis() const {
  // @@protoc_insertion_point(field_list:opi_api.network.evpn_gw.v1alpha1.ListSvisResponse.svis)
  return svis_;
}

// string next_page_token = 2;
inline void ListSvisResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty();
}
inline const std::string& ListSvisResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.ListSvisResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListSvisResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.evpn_gw.v1alpha1.ListSvisResponse.next_page_token)
}
inline std::string* ListSvisResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.network.evpn_gw.v1alpha1.ListSvisResponse.next_page_token)
  return _s;
}
inline const std::string& ListSvisResponse::_internal_next_page_token() const {
  return next_page_token_.Get();
}
inline void ListSvisResponse::_internal_set_next_page_token(const std::string& value) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListSvisResponse::_internal_mutable_next_page_token() {
  
  return next_page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListSvisResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.network.evpn_gw.v1alpha1.ListSvisResponse.next_page_token)
  return next_page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListSvisResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (next_page_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.evpn_gw.v1alpha1.ListSvisResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetSviRequest

// string vrf = 1 [(.google.api.field_behavior) = REQUIRED];
inline void GetSviRequest::clear_vrf() {
  vrf_.ClearToEmpty();
}
inline const std::string& GetSviRequest::vrf() const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.GetSviRequest.vrf)
  return _internal_vrf();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetSviRequest::set_vrf(ArgT0&& arg0, ArgT... args) {
 
 vrf_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.evpn_gw.v1alpha1.GetSviRequest.vrf)
}
inline std::string* GetSviRequest::mutable_vrf() {
  std::string* _s = _internal_mutable_vrf();
  // @@protoc_insertion_point(field_mutable:opi_api.network.evpn_gw.v1alpha1.GetSviRequest.vrf)
  return _s;
}
inline const std::string& GetSviRequest::_internal_vrf() const {
  return vrf_.Get();
}
inline void GetSviRequest::_internal_set_vrf(const std::string& value) {
  
  vrf_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetSviRequest::_internal_mutable_vrf() {
  
  return vrf_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetSviRequest::release_vrf() {
  // @@protoc_insertion_point(field_release:opi_api.network.evpn_gw.v1alpha1.GetSviRequest.vrf)
  return vrf_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetSviRequest::set_allocated_vrf(std::string* vrf) {
  if (vrf != nullptr) {
    
  } else {
    
  }
  vrf_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vrf,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (vrf_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    vrf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.evpn_gw.v1alpha1.GetSviRequest.vrf)
}

// uint32 vlan_id = 2 [(.google.api.field_behavior) = REQUIRED];
inline void GetSviRequest::clear_vlan_id() {
  vlan_id_ = 0u;
}
inline uint32_t GetSviRequest::_internal_vlan_id() const {
  return vlan_id_;
}
inline uint32_t GetSviRequest::vlan_id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.GetSviRequest.vlan_id)
  return _internal_vlan_id();
}
inline void GetSviRequest::_internal_set_vlan_id(uint32_t value) {
  
  vlan_id_ = value;
}
inline void GetSviRequest::set_vlan_id(uint32_t value) {
  _internal_set_vlan_id(value);
  // @@protoc_insertion_point(field_set:opi_api.network.evpn_gw.v1alpha1.GetSviRequest.vlan_id)
}

// -------------------------------------------------------------------

// DeleteSviRequest

// string vrf = 1 [(.google.api.field_behavior) = REQUIRED];
inline void DeleteSviRequest::clear_vrf() {
  vrf_.ClearToEmpty();
}
inline const std::string& DeleteSviRequest::vrf() const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.DeleteSviRequest.vrf)
  return _internal_vrf();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteSviRequest::set_vrf(ArgT0&& arg0, ArgT... args) {
 
 vrf_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.evpn_gw.v1alpha1.DeleteSviRequest.vrf)
}
inline std::string* DeleteSviRequest::mutable_vrf() {
  std::string* _s = _internal_mutable_vrf();
  // @@protoc_insertion_point(field_mutable:opi_api.network.evpn_gw.v1alpha1.DeleteSviRequest.vrf)
  return _s;
}
inline const std::string& DeleteSviRequest::_internal_vrf() const {
  return vrf_.Get();
}
inline void DeleteSviRequest::_internal_set_vrf(const std::string& value) {
  
  vrf_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteSviRequest::_internal_mutable_vrf() {
  
  return vrf_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteSviRequest::release_vrf() {
  // @@protoc_insertion_point(field_release:opi_api.network.evpn_gw.v1alpha1.DeleteSviRequest.vrf)
  return vrf_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteSviRequest::set_allocated_vrf(std::string* vrf) {
  if (vrf != nullptr) {
    
  } else {
    
  }
  vrf_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vrf,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (vrf_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    vrf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.evpn_gw.v1alpha1.DeleteSviRequest.vrf)
}

// uint32 vlan_id = 2 [(.google.api.field_behavior) = REQUIRED];
inline void DeleteSviRequest::clear_vlan_id() {
  vlan_id_ = 0u;
}
inline uint32_t DeleteSviRequest::_internal_vlan_id() const {
  return vlan_id_;
}
inline uint32_t DeleteSviRequest::vlan_id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.evpn_gw.v1alpha1.DeleteSviRequest.vlan_id)
  return _internal_vlan_id();
}
inline void DeleteSviRequest::_internal_set_vlan_id(uint32_t value) {
  
  vlan_id_ = value;
}
inline void DeleteSviRequest::set_vlan_id(uint32_t value) {
  _internal_set_vlan_id(value);
  // @@protoc_insertion_point(field_set:opi_api.network.evpn_gw.v1alpha1.DeleteSviRequest.vlan_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace evpn_gw
}  // namespace network
}  // namespace opi_api

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_l3_5fxpu_5finfra_5fmgr_2eproto
